FUNCTION "osr.scv.foundation.db.functions::MatchResultsReview" ( )
       RETURNS TABLE (	
    					MATCH_ROW INTEGER,
    					SOURCE_SYSTEM NVARCHAR(10),
        				SYSTEM_ID NVARCHAR(10),
    					ENTITY_ID NVARCHAR(20),
    					GROUP_ID Integer,
    					REVIEW_GROUP NVARCHAR(1),
    					GROUP_COUNT INTEGER,
    					GROUP_ROW_COUNT INTEGER,
    					GROUP_CATEGORY INTEGER,
        				FIRST_NAME NVARCHAR(50),
        				MIDDLE_NAME NVARCHAR(50),
        				LAST_NAME NVARCHAR(80),
        				RELATED_ROW INTEGER,
        				SCORE INTEGER,
        				AVG_SCORE INTEGER,
        				STRATEGY NVARCHAR(10),
        				STRATEGY_RESOLVED NVARCHAR(10),
        				STRATEGY_RESOLVED_STATUS NVARCHAR(10),
        				PROMOTED_TO_SCV NVARCHAR(1),
            			PROMOTION_TIMESTAMP TIMESTAMP,
            			PROMOTED_BY NVARCHAR(10),
            			RMS_DUPLICATES INTEGER,
            			ACTION NVARCHAR(20),
        				ACTION_RESOLVED NVARCHAR(20)
        			  )
       SQL SECURITY INVOKER AS 
BEGIN 
/*****************************  
       SCV Review UI - Match Results Review
 *****************************/ 
	
	lt_overview =
	
		SELECT * FROM (
                SELECT  
	                m.ENTITY_ID,
	                m.GROUP_ID,
	                m.REVIEW_GROUP,
	                s1.GROUP_COUNT,
	                --CASE WHEN m.GROUP_ID IS NULL THEN 0 WHEN m.AVERAGE_SCORE = 100 THEN 1 WHEN m.AVERAGE_SCORE >= 95 THEN 2 ELSE 3 END AS GROUP_CATEGORY,
	                m.GROUP_CATEGORY,
	                m.SOURCE_SYSTEM, 
	                m.SYSTEM_ID,
	                COALESCE(r.FNAME_ORIG_BUT, t.FNAME_ORIG_TMR) "FNAME_ORIG",
	                COALESCE(r.MNAME_ORIG_BUT, t.MNAME_ORIG_TMR) "MNAME_ORIG",
	                COALESCE(r.LNAME_ORIG_BUT, t.LNAME_ORIG_TMR) "LNAME_ORIG",
	                m."Match_ROW_ID",
	                s.RELATED_ROW_ID,
	                s.SCORE,
	                m.AVERAGE_SCORE AS AVG_SCORE,
	                s.POLICY_NAME,
	                d.STRATEGY,
	                d.ACTION,
	                m.RMS_DUPLICATES
                FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" m
                -- Master data BUT000
                LEFT OUTER JOIN (
                                 SELECT NAME_FIRST AS FNAME_ORIG_BUT, NAMEMIDDLE AS MNAME_ORIG_BUT, NAME_LAST AS LNAME_ORIG_BUT, "Cleanse_TABLE_ID", "Cleanse_ROW_ID", "PARTNER" 
                                 FROM "osr.scv.foundation.db.synonyms::BUT000"
                                ) as r
                ON m."Cleanse_ROW_ID_BUT" = r."Cleanse_ROW_ID" AND m."Cleanse_TABLE_ID_BUT" = r."Cleanse_TABLE_ID" AND m."SYSTEM_ID" = r."PARTNER"
                -- Master data TMR
                LEFT OUTER JOIN (
                                 SELECT FIRST_NAME AS FNAME_ORIG_TMR, MIDDLE_NAME AS MNAME_ORIG_TMR, FAMILY_ORG_NAME AS LNAME_ORIG_TMR, "Cleanse_TABLE_ID", "RUN_NUMBER", "CUSTOMER_REF" 
                                 FROM "osr.scv.foundation.db.synonyms::TMR_Customers"
                                ) as t
                ON m."Cleanse_ROW_ID_TMR" = t."RUN_NUMBER"
                                AND m."Cleanse_TABLE_ID_TMR" = t."Cleanse_TABLE_ID"
                                AND m."SYSTEM_ID" = t."CUSTOMER_REF"         
                -- Match tracing
                LEFT OUTER JOIN (SELECT TOP 1 DISTINCT ROW_ID, RELATED_ROW_ID, POLICY_NAME, SCORE FROM  "osr.scv.foundation.db.data::MatchResults.MatchTracing") as s
                --LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::MATCH_TRACING" s
                ON m."Match_ROW_ID" = s.ROW_ID
                -- Match group information
                LEFT OUTER JOIN  "osr.scv.foundation.db.data::MatchResults.MatchGroupInfo" s1
                ON m."GROUP_ID" = s1.GROUP_ID
                -- Match strategy user overrides
                LEFT OUTER JOIN (
                                 SELECT a.ENTITY_ID, a.STRATEGY, a.ACTION
                                 FROM "osr.scv.foundation.db.data::MatchResultsReview.Assessments" AS a
                                 INNER JOIN (
                                             -- Latest strategy
                                             SELECT ENTITY_ID, MAX(TIMESTAMP) as MAX_TIMESTAMP 
                                             FROM "osr.scv.foundation.db.data::MatchResultsReview.Assessments" 
                                             GROUP BY ENTITY_ID
                                            ) AS b
                                 ON a.ENTITY_ID = b.ENTITY_ID
                                	AND a.TIMESTAMP = b.MAX_TIMESTAMP
                                ) AS d
                ON d."ENTITY_ID" = m."ENTITY_ID"                                         
                WHERE m.SHOW_IN_REVIEW = 'X'
					AND (
						 -- Unique records from RMS
						 m."Match_ROW_ID" IN (SELECT "Match_ROW_ID" FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" WHERE GROUP_ID IS NULL AND SOURCE_SYSTEM = 'RMS')
						 OR
						 -- Only match groups which contains at least one record from RMS
						 m.GROUP_ID IN (SELECT GROUP_ID FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" WHERE GROUP_ID IS NOT NULL AND SOURCE_SYSTEM = 'RMS' GROUP BY GROUP_ID)	
						)
                	--AND (s.POLICY_NAME NOT LIKE '%CustSourceSystem%' OR s.POLICY_NAME IS NULL)
		)
		;
	
	return SELECT 
				  "Match_ROW_ID" as MATCH_ROW, 
				  SOURCE_SYSTEM,
			      SYSTEM_ID,
				  ENTITY_ID,
				  GROUP_ID,
				  REVIEW_GROUP,
				  GROUP_COUNT,
				  0 AS GROUP_ROW_COUNT,
				  GROUP_CATEGORY,
				  FNAME_ORIG as FIRST_NAME, 
				  MNAME_ORIG as MIDDLE_NAME, 
				  LNAME_ORIG as LAST_NAME, 
				  RELATED_ROW_ID as RELATED_ROW, 
				  SCORE,
				  AVG_SCORE,
				  STRATEGY,
				  CASE WHEN STRATEGY IS NOT NULL THEN STRATEGY WHEN (GROUP_CATEGORY = 0 OR GROUP_CATEGORY = 1) THEN 'Promote' ELSE 'Review' END AS STRATEGY_RESOLVED,
				  CASE WHEN (STRATEGY IS NOT NULL AND STRATEGY = 'Promote') THEN 'Success' WHEN (STRATEGY IS NOT NULL AND STRATEGY = 'Review') THEN 'Error' WHEN (GROUP_CATEGORY = 0 OR GROUP_CATEGORY = 1) THEN 'Success' ELSE 'Error' END AS STRATEGY_RESOLVED_STATUS,
				  '' AS PROMOTED_TO_SCV,
            	  null AS PROMOTION_TIMESTAMP,
                  '' AS PROMOTED_BY,
                  RMS_DUPLICATES,
                  ACTION,
				  CASE WHEN ACTION IS NOT NULL THEN ACTION WHEN (GROUP_CATEGORY = 0 OR GROUP_CATEGORY = 1) THEN 'Auto-Promotion' ELSE '' END AS ACTION_RESOLVED
	FROM :lt_overview;
	
	-- TODO: Apply view filter here

END;