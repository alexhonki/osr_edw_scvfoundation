FUNCTION "osr.scv.foundation.db.functions::MatchResultsReview" ( )
       RETURNS TABLE (	
    					MATCH_ROW					INTEGER,
    					SOURCE_SYSTEM				NVARCHAR(10),
        				SYSTEM_ID					NVARCHAR(10),
    					ENTITY_ID					NVARCHAR(20),
    					GROUP_ID					INTEGER,
    					REVIEW_GROUP				NVARCHAR(1),
    					GROUP_COUNT 				INTEGER,
    					GROUP_ROW_COUNT 			INTEGER,
    					GROUP_CATEGORY				INTEGER,
        				FIRST_NAME					NVARCHAR(50),
        				MIDDLE_NAME 				NVARCHAR(50),
        				LAST_NAME					NVARCHAR(80),
        				RELATED_ROW 				INTEGER,
        				SCORE						INTEGER,
        				AVG_SCORE					INTEGER,
        				STRATEGY					NVARCHAR(10),
        				STRATEGY_RESOLVED			NVARCHAR(20),
        				STRATEGY_RESOLVED_STATUS	NVARCHAR(10),
        				PROMOTED_TO_SCV 			NVARCHAR(1),
            			PROMOTION_TIMESTAMP 		TIMESTAMP,
            			PROMOTED_BY 				NVARCHAR(10),
            			RMS_DUPLICATES				INTEGER,
            			ACTION						NVARCHAR(20),
        				ACTION_RESOLVED 			NVARCHAR(20),
        				MATCH_PERSON_FN 			NVARCHAR(50),
        				ACTION_RESOLVED_STATUS		NVARCHAR(10),
        				SHOW_IN_REVIEW				NVARCHAR(1)
        			  )
       SQL SECURITY INVOKER AS 
BEGIN 
/*****************************  
       SCV Review UI - Match Results Review
 *****************************/ 
	
	-- Business rules
	-- TODO: Create a UI which allows the business to define their own business rules instead of
	--       hard-coding them into this script
	
	-- Business rules concept:
	-- Match groups of for category 3 and 4 would typically be flagged as REVIEW. This concept allows to PROMOTE these groups without
	-- the need to review them
	
	-- Business rule 1: Promote all match groups which are not based on match policy Person, Address, Phone
	
	-- Group calculation
	-- Identicals: cat 1 + cat 2 - all matches on phone policies
	-- Reviews: cat 3 + cat 4 - business rules accepts
	-- 
	
	-- Calculate match group sets
	lt_identical_groups = SELECT DISTINCT GROUP_ID, 'X' AS STRATEGY_IDENTICAL
						  FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" 
						  WHERE GROUP_CATEGORY IN (0,1)
							AND GROUP_ID NOT IN (
												SELECT DISTINCT GROUP_ID 
												FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" a 
												LEFT OUTER JOIN "osr.scv.foundation.db.data::MatchResults.MatchTracing" b
												ON a."Match_ROW_ID" = b.ROW_ID
												WHERE b.POLICY_NAME LIKE '%Phone%'
											  )
	;
	
	lt_exclude_groups = SELECT DISTINCT GROUP_ID, 'X' AS STRATEGY_BR_EXCLUDE
						FROM "osr.scv.foundation.db.data::MatchResults.MatchResults"
						GROUP BY GROUP_ID
						HAVING COUNT(DISTINCT SYSTEM_ID) >= 1 
							AND COUNT(DISTINCT SOURCE_SYSTEM) = 1
							AND GROUP_ID IS NOT NULL 
							AND MAX(SOURCE_SYSTEM) = 'TMR' 
							AND MIN(SOURCE_SYSTEM) = 'TMR';
	
	lt_review_groups = 	SELECT DISTINCT m.GROUP_ID, 'X' AS STRATEGY_BR_REVIEW
						FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" m
						INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchTracing" s
						ON m."Match_ROW_ID" = s.ROW_ID
						WHERE s.POLICY_NAME = 'Person, Address, Phone'
							AND GROUP_ID NOT IN (SELECT GROUP_ID FROM :lt_identical_groups)
							AND GROUP_ID NOT IN (SELECT GROUP_ID FROM :lt_exclude_groups)
						;
							
	lt_accept_groups = SELECT DISTINCT GROUP_ID, 'X' AS STRATEGY_BR_ACCEPT 
					   FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" 
					   WHERE GROUP_CATEGORY IN (2,3)
						AND GROUP_ID NOT IN (SELECT GROUP_ID FROM :lt_review_groups)
						AND GROUP_ID NOT IN (SELECT GROUP_ID FROM :lt_exclude_groups);
	
	lt_overview =
	
		SELECT * FROM (
                SELECT  
	                m.ENTITY_ID,
	                m.GROUP_ID,
	                m.REVIEW_GROUP,
	                s1.GROUP_COUNT,
	                --CASE WHEN m.GROUP_ID IS NULL THEN 0 WHEN m.AVERAGE_SCORE = 100 THEN 1 WHEN m.AVERAGE_SCORE >= 95 THEN 2 ELSE 3 END AS GROUP_CATEGORY,
	                m.GROUP_CATEGORY,
	                m.SOURCE_SYSTEM, 
	                m.SYSTEM_ID,
	                COALESCE(r.FNAME_ORIG_BUT, t.FNAME_ORIG_TMR) "FNAME_ORIG",
	                COALESCE(r.MNAME_ORIG_BUT, t.MNAME_ORIG_TMR) "MNAME_ORIG",
	                COALESCE(r.LNAME_ORIG_BUT, t.LNAME_ORIG_TMR) "LNAME_ORIG",
	                m."Match_ROW_ID",
	                s.RELATED_ROW_ID,
	                s.SCORE,
	                m.AVERAGE_SCORE AS AVG_SCORE,
	                s.POLICY_NAME,
	                d.STRATEGY,
	                d.ACTION,
	                m.RMS_DUPLICATES,
	                COALESCE(r.MATCH_PERSON_FN, t.MATCH_PERSON_FN) "MATCH_PERSON_FN",
	                m.SHOW_IN_REVIEW,
	                gr_id.STRATEGY_IDENTICAL,
	                gr_rev.STRATEGY_BR_REVIEW,
	                gr_ex.STRATEGY_BR_EXCLUDE,
	                gr_acc.STRATEGY_BR_ACCEPT
                FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" m
               
                -- Master data BUT000
                LEFT OUTER JOIN (
                                 SELECT MATCH_PERSON_FN, NAME_FIRST AS FNAME_ORIG_BUT, NAMEMIDDLE AS MNAME_ORIG_BUT, NAME_LAST AS LNAME_ORIG_BUT, "Cleanse_TABLE_ID", "Cleanse_ROW_ID", "Z_RUN_SEQ_ID", "PARTNER" 
                                 FROM "osr.scv.foundation.db.synonyms::BUT000"
                                ) as r
                ON m."Cleanse_ROW_ID_BUT" = r."Z_RUN_SEQ_ID" AND m."Cleanse_TABLE_ID_BUT" = r."Cleanse_TABLE_ID" AND m."SYSTEM_ID" = r."PARTNER"
                -- Master data TMR
                LEFT OUTER JOIN (
                                 SELECT MATCH_PERSON_FN, FIRST_NAME AS FNAME_ORIG_TMR, MIDDLE_NAME AS MNAME_ORIG_TMR, FAMILY_ORG_NAME AS LNAME_ORIG_TMR, "Cleanse_TABLE_ID", "Z_RUN_SEQ_ID", "CUSTOMER_REF" 
                                 FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
                                ) as t
                ON m."Cleanse_ROW_ID_TMR" = t."Z_RUN_SEQ_ID"
                                AND m."Cleanse_TABLE_ID_TMR" = t."Cleanse_TABLE_ID"
                                AND m."SYSTEM_ID" = t."CUSTOMER_REF"         
                -- Match tracing
                LEFT OUTER JOIN (SELECT TOP 1 DISTINCT ROW_ID, RELATED_ROW_ID, POLICY_NAME, SCORE FROM  "osr.scv.foundation.db.data::MatchResults.MatchTracing") as s
                --LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::MATCH_TRACING" s
                ON m."Match_ROW_ID" = s.ROW_ID
                -- Match group information
                LEFT OUTER JOIN  "osr.scv.foundation.db.data::MatchResults.MatchGroupInfo" s1
                ON m."GROUP_ID" = s1.GROUP_ID
                -- Identicals
                LEFT OUTER JOIN :lt_identical_groups as gr_id
                ON m.GROUP_ID = gr_id.GROUP_ID
                -- Reviews
                LEFT OUTER JOIN :lt_review_groups as gr_rev
                ON m.GROUP_ID = gr_rev.GROUP_ID
                -- Excludes
                LEFT OUTER JOIN :lt_exclude_groups as gr_ex
                ON m.GROUP_ID = gr_ex.GROUP_ID
                -- Accepts
                LEFT OUTER JOIN :lt_accept_groups as gr_acc
                ON m.GROUP_ID = gr_acc.GROUP_ID
                -- Match strategy user overrides
                LEFT OUTER JOIN (
                                 SELECT a.ENTITY_ID, a.STRATEGY, a.ACTION, a.MATCH_ROW
                                 FROM "osr.scv.foundation.db.data::MatchResultsReview.Assessments" AS a
                                 INNER JOIN (
                                             -- Latest strategy
                                             SELECT ENTITY_ID, MAX(TIMESTAMP) as MAX_TIMESTAMP 
                                             FROM "osr.scv.foundation.db.data::MatchResultsReview.Assessments" 
                                             GROUP BY ENTITY_ID
                                            ) AS b
                                 ON a.ENTITY_ID = b.ENTITY_ID
                                	AND a.TIMESTAMP = b.MAX_TIMESTAMP
                                ) AS d
                ON d."ENTITY_ID" = m."ENTITY_ID" AND d.MATCH_ROW = m."Match_ROW_ID"                                        
--                WHERE m.SHOW_IN_REVIEW = 'X'
					AND (
						 -- Unique records from RMS
						 m."Match_ROW_ID" IN (SELECT "Match_ROW_ID" FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" WHERE GROUP_ID IS NULL AND SOURCE_SYSTEM = 'RMS')
						 OR
						 -- Only match groups which contains at least one record from RMS
						 m.GROUP_ID IN (SELECT GROUP_ID FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" WHERE GROUP_ID IS NOT NULL AND SOURCE_SYSTEM = 'RMS' GROUP BY GROUP_ID)	
						)
						
                	--AND (s.POLICY_NAME NOT LIKE '%CustSourceSystem%' OR s.POLICY_NAME IS NULL)
		)
		;
	
	return 
	
		-- Wrap to exclude business rules
		SELECT 
				  MATCH_ROW, 
				  SOURCE_SYSTEM,
			      SYSTEM_ID,
				  ENTITY_ID,
				  GROUP_ID,
				  REVIEW_GROUP,
				  GROUP_COUNT,
				  GROUP_ROW_COUNT,
				  GROUP_CATEGORY,
				  FIRST_NAME, 
				  MIDDLE_NAME, 
				  LAST_NAME,
				  RELATED_ROW, 
				  SCORE,
				  AVG_SCORE,
				  STRATEGY,
				  STRATEGY_RESOLVED,
				  STRATEGY_RESOLVED_STATUS,
				  PROMOTED_TO_SCV,
            	  PROMOTION_TIMESTAMP,
                  PROMOTED_BY,
                  RMS_DUPLICATES,
                  ACTION,
				  ACTION_RESOLVED,
				  MATCH_PERSON_FN,
				  ACTION_RESOLVED_STATUS,
				  SHOW_IN_REVIEW
		FROM (		  
		
			SELECT 
					  "Match_ROW_ID" as MATCH_ROW, 
					  SOURCE_SYSTEM,
				      SYSTEM_ID,
					  ENTITY_ID,
					  GROUP_ID,
					  REVIEW_GROUP,
					  GROUP_COUNT,
					  0 AS GROUP_ROW_COUNT,
					  GROUP_CATEGORY,
					  FNAME_ORIG as FIRST_NAME, 
					  MNAME_ORIG as MIDDLE_NAME, 
					  LNAME_ORIG as LAST_NAME,
					  RELATED_ROW_ID as RELATED_ROW, 
					  SCORE,
					  AVG_SCORE,
					  STRATEGY_BR_EXCLUDE,
					  STRATEGY_IDENTICAL,
					  STRATEGY_BR_ACCEPT,
					  STRATEGY_BR_REVIEW,
					  STRATEGY,
					  CASE 
						WHEN STRATEGY_BR_EXCLUDE = 'X' THEN 'System Exclude'
						WHEN STRATEGY_IDENTICAL = 'X' THEN 'Identical'
						WHEN STRATEGY_BR_REVIEW = 'X' THEN 'Review'
						ELSE 'System Accept'
					  END AS STRATEGY_RESOLVED,
					  CASE 
						WHEN STRATEGY_BR_EXCLUDE = 'X' THEN 'Error'
						WHEN STRATEGY_IDENTICAL = 'X' THEN 'Success'
						WHEN STRATEGY_BR_REVIEW = 'X' THEN 'Error'
						ELSE 'Success'
					  END AS STRATEGY_RESOLVED_STATUS,
					  '' AS PROMOTED_TO_SCV,
	            	  null AS PROMOTION_TIMESTAMP,
	                  '' AS PROMOTED_BY,
	                  RMS_DUPLICATES,
	                  ACTION,
					  CASE 
						WHEN STRATEGY_BR_EXCLUDE = 'X' THEN 'No Promotion'
						WHEN STRATEGY_IDENTICAL = 'X' THEN 'Auto-Promotion'
						WHEN STRATEGY_BR_REVIEW = 'X' THEN ''
						ELSE 'Auto-Promotion'
					  END AS ACTION_RESOLVED,
					  MATCH_PERSON_FN,
					  CASE 
						WHEN STRATEGY_BR_EXCLUDE = 'X' THEN 'Error'
						WHEN STRATEGY_IDENTICAL = 'X' THEN 'Success'
						WHEN STRATEGY_BR_REVIEW = 'X' THEN 'Error'
						ELSE 'Success'
					  END AS ACTION_RESOLVED_STATUS,
					  SHOW_IN_REVIEW
			FROM :lt_overview
		);
	
	-- TODO: Apply view filter here

END;
