/*
	Move entities from match results shadow table to SCV foundation
	
		This code will move all promoted match result entities from the match results shadow table to the SCV foundation. The entities will be split into the following tables:
			- SCV Master
			- SCV Person
			- SCV Address
			- SCV Contact
						
		SAP Australia, September 2017	
*/
PROCEDURE "osr.scv.foundation.db.Procedures::SP_MoveRowsToScvFoundation" (
	
	--IN i_entities		TABLE (ENTITY_ID NVARCHAR(10)),
--	IN i_user			NVARCHAR(20),
--	IN i_timestamp		TIMESTAMP,
--	OUT o_return_code	NVARCHAR(10),
--	OUT o_message		NVARCHAR(200)
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN

	DECLARE l_number_entities int default 0;
	
	-- Declare exception hander for all SQL exceptions. 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		
		DROP TABLE #lt_entity_mappingss;
		DROP TABLE #lt_scv_counters;
		
--		o_return_code :=  'ERROR';
--		o_message:=  'ERROR: ' || ::SQL_ERROR_CODE || ' ' || ::SQL_ERROR_MESSAGE;
	END;
	
	-- Temporary table to hold the SCV ID to Entity ID mapping
	CREATE LOCAL TEMPORARY TABLE #lt_entity_mappingss (
            SCV_ID_SEQ_CONTROL NVARCHAR(10),
            SCV_ID INTEGER,
            ENTITY_ID NVARCHAR(20),
            MATCH_ROW_ID INTEGER
    );
    
    CREATE LOCAL TEMPORARY TABLE #lt_scv_counters (
            SCV_ID_SEQ_CONTROL NVARCHAR(10),
            SCV_ID INTEGER
    );

	-- Truncate for test purposes
--	TRUNCATE TABLE "osr.scv.foundation.db.data::SCVFoundation.Master";
--	TRUNCATE TABLE "osr.scv.foundation.db.data::SCVFoundation.PersonRms";
--	TRUNCATE TABLE "osr.scv.foundation.db.data::SCVFoundation.PersonTmr";
--	TRUNCATE TABLE "osr.scv.foundation.db.data::SCVFoundation.AddressRms";
--	TRUNCATE TABLE "osr.scv.foundation.db.data::SCVFoundation.AddressTmr";
--	TRUNCATE TABLE "osr.scv.foundation.db.data::SCVFoundation.ContactNumber";
--	TRUNCATE TABLE "osr.scv.foundation.db.data::SCVFoundation.ContactEmail";
	
	-- ### SCV master ##############################################################################################################
	BEGIN
		

	
		-- Auto promotions
		
		
		-- With rejects i can group by System ID instead of Entity ID!!!---
		
		
		
		lt_auto_entity_ids = SELECT ENTITY_ID, "osr.scv.foundation.db.data::SEQ_ScvMaster".NEXTVAL as SCV_ID FROM (
							SELECT s.ENTITY_ID,  s."Match_ROW_ID" 
							FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" s
							INNER JOIN "osr.scv.foundation.db.data::MatchResultsReview.Promotions" a
							ON s.ENTITY_ID = a.ENTITY_ID
							WHERE a.Action = 'Auto-Promotion'
							ORDER BY s.ENTITY_ID ASC, s.SOURCE_SYSTEM ASC, s.SYSTEM_ID ASC, s."Match_ROW_ID" ASC
						  ) GROUP BY ENTITY_ID;
						  
    	lt_auto_entity_ids_detail = SELECT 'AUTO', b.SCV_ID, a.ENTITY_ID, a."Match_ROW_ID" FROM (
									SELECT s.ENTITY_ID,  s."Match_ROW_ID" 
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" s
									INNER JOIN "osr.scv.foundation.db.data::MatchResultsReview.Promotions" a
									ON s.ENTITY_ID = a.ENTITY_ID
									WHERE a.Action = 'Auto-Promotion'
									ORDER BY s.ENTITY_ID ASC, s.SOURCE_SYSTEM ASC, s.SYSTEM_ID ASC, s."Match_ROW_ID" ASC
								) a
								LEFT OUTER JOIN :lt_auto_entity_ids b
								ON a.ENTITY_ID = b.ENTITY_ID;						  
	
		INSERT INTO #lt_entity_mappingss (SELECT * FROM :lt_auto_entity_ids_detail);
		
		
		lt_reject_scv_ids = SELECT SYSTEM_ID, "osr.scv.foundation.db.data::SEQ_ScvMaster".NEXTVAL as SCV_ID FROM (
							SELECT s.SYSTEM_ID,  s."Match_ROW_ID" 
							FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" s
							INNER JOIN "osr.scv.foundation.db.data::MatchResultsReview.Assessments" a
							ON s."Match_ROW_ID" = a.MATCH_ROW
							WHERE a.Action = 'Reject'
							ORDER BY s.ENTITY_ID ASC, s.SOURCE_SYSTEM ASC, s.SYSTEM_ID ASC, s."Match_ROW_ID" ASC
						  ) GROUP BY SYSTEM_ID;


    	lt_reject_scv_ids_detail = SELECT 'REJECT', b.SCV_ID, a.ENTITY_ID, a."Match_ROW_ID" FROM (
									SELECT s.ENTITY_ID, s.SYSTEM_ID,  s."Match_ROW_ID" 
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" s
									INNER JOIN "osr.scv.foundation.db.data::MatchResultsReview.Assessments" a
									ON s."Match_ROW_ID" = a.MATCH_ROW
									WHERE a.Action = 'Reject'
									ORDER BY s.ENTITY_ID ASC, s.SOURCE_SYSTEM ASC, s.SYSTEM_ID ASC, s."Match_ROW_ID" ASC
								) a
								LEFT OUTER JOIN :lt_reject_scv_ids b
								ON a.SYSTEM_ID = b.SYSTEM_ID;
		
		INSERT INTO #lt_entity_mappingss (SELECT * FROM :lt_reject_scv_ids_detail);

		lt_accept_scv_ids = SELECT ENTITY_ID, "osr.scv.foundation.db.data::SEQ_ScvMaster".NEXTVAL as SCV_ID FROM (
							SELECT s.ENTITY_ID,  s."Match_ROW_ID" 
							FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" s
							INNER JOIN "osr.scv.foundation.db.data::MatchResultsReview.Assessments" a
							ON s."Match_ROW_ID" = a.MATCH_ROW
							WHERE a.Action = 'Accept'
							ORDER BY s.ENTITY_ID ASC, s.SOURCE_SYSTEM ASC, s.SYSTEM_ID ASC, s."Match_ROW_ID" ASC
						  ) GROUP BY ENTITY_ID;


		lt_accept_scv_ids_detail_zero = SELECT 'ACCEPT', b.SCV_ID, a.ENTITY_ID, a.MATCH_ROW_ID FROM (
									--SELECT 'ACCEPT', md.SCV_ID, s.ENTITY_ID, md.MATCH_ROW_ID 
									SELECT md.SCV_ID, ENTITY_ID, MATCH_ROW_ID
									FROM "osr.scv.foundation.db.data::MatchResultsReview.Assessments" s
									INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchDelta" md
									ON s.MATCH_ROW = md.MATCH_ROW_ID
									WHERE md.ACTION = 'Add' and s.ACTION = 'Accept' and md.SCV_ID = 0
									) a
									LEFT OUTER JOIN :lt_accept_scv_ids b
									ON a.ENTITY_ID = b.ENTITY_ID;
									
		INSERT INTO #lt_entity_mappingss (SELECT * FROM :lt_accept_scv_ids_detail_zero);
		
		INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.Master" (
				SELECT DISTINCT SCV_ID, CURRENT_DATE, null,CURRENT_USER, null, null, null FROM #lt_entity_mappingss
		);
		
		lt_accept_scv_ids_detail = SELECT 'ACCEPT', md.SCV_ID, s.ENTITY_ID, md.MATCH_ROW_ID 
									FROM "osr.scv.foundation.db.data::MatchResultsReview.Assessments" s
									INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchDelta" md
									ON s.MATCH_ROW = md.MATCH_ROW_ID
									WHERE md.ACTION = 'Add' and s.ACTION = 'Accept' and md.SCV_ID > 0;
		
		INSERT INTO #lt_entity_mappingss (SELECT * FROM :lt_accept_scv_ids_detail);
					
		
		
		
	END;
	
	-- ### SCV person ##############################################################################################################
	-- Aggregate match results for person domain (to remove BPs from RMS or any other source system with identical address records (address type XXX and LTX)
	
	lt_person_entities_rms = 
							SELECT SCV_ID, 
								   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO, SCV_NAME_FIRST, SCV_NAME_MIDDLE, SCV_NAME_LAST, BIRTH_DATE, DEATH_DATE,
								   STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, XDELE,
								   CHECKSUM,
								   STD_CHECKSUM
							FROM (
							SELECT ma.SCV_ID, mr.* FROM 
							(
								SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, CASE WHEN SUBSTRING(to_nvarchar(b.VALID_FROM),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.VALID_FROM),1,8)) END  AS VALID_FROM, CASE WHEN SUBSTRING(to_nvarchar(b.VALID_TO),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.VALID_TO),1,8)) END  AS VALID_TO, b.NAME_FIRST AS SCV_NAME_FIRST, b.NAMEMIDDLE AS SCV_NAME_MIDDLE, b.NAME_LAST AS SCV_NAME_LAST, BIRTHDT as BIRTH_DATE, DEATHDT as DEATH_DATE,
								                HASH_SHA256(TO_BINARY(TO_VARCHAR(b.NAME_FIRST)), TO_BINARY(TO_VARCHAR(b.NAMEMIDDLE)), TO_BINARY(TO_VARCHAR(b.NAME_LAST)), TO_BINARY(TO_VARCHAR(b.BIRTHDT)), TO_BINARY(TO_VARCHAR(b.DEATHDT))) as CHECKSUM,
								                b.STD_PERSON_GN, b.STD_PERSON_GN2, b.STD_PERSON_FN,
								                HASH_SHA256(TO_BINARY(TO_VARCHAR(STD_PERSON_GN)), TO_BINARY(TO_VARCHAR(STD_PERSON_GN2)), TO_BINARY(TO_VARCHAR(STD_PERSON_FN)), TO_BINARY(TO_VARCHAR(b.BIRTHDT)), TO_BINARY(TO_VARCHAR(b.DEATHDT))) as STD_CHECKSUM,
								                "Match_ROW_ID", XDELE
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
									LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::BUT000" b
									ON a."Cleanse_ROW_ID_BUT" = b."Z_RUN_SEQ_ID" 
									WHERE a.SOURCE_SYSTEM = 'RMS'--AND a.SYSTEM_ID = '107249237'
								ORDER BY a.ENTITY_ID
							) mr
							-- Add SCV ID
							INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mappingss) ma
							ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID
							) 
							GROUP BY
							SCV_ID, 
							ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO, SCV_NAME_FIRST, SCV_NAME_MIDDLE, SCV_NAME_LAST, BIRTH_DATE, DEATH_DATE,
							STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, XDELE,
							CHECKSUM,
							STD_CHECKSUM
						 ;
						 
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.PersonRms" (SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO, SCV_NAME_LAST, SCV_NAME_MIDDLE, SCV_NAME_FIRST, BIRTH_DATE, DEATH_DATE, CHECKSUM, STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, STD_CHECKSUM, XDELE FROM :lt_person_entities_rms);

	lt_person_entities_tmr = 
							
							SELECT SCV_ID,
								   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, SCV_NAME_LAST, SCV_NAME_MIDDLE, SCV_NAME_FIRST, 
								   BIRTH_DATE, DEATH_DATE,
								   CHECKSUM,
								   STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN,
								   STD_CHECKSUM
							FROM (
								SELECT ma.SCV_ID, mr.* FROM 
								(
									SELECT mr.ENTITY_ID, mr.SOURCE_SYSTEM, mr.SYSTEM_ID, (CASE WHEN (LOCATE(mr."UPDATED_AT",'|') < 1) THEN mr."UPDATED_AT" ELSE SUBSTRING(mr."UPDATED_AT",1,LOCATE(mr."UPDATED_AT",'|')-1) END) as UPDATED_AT, mr.SCV_NAME_LAST, mr.SCV_NAME_MIDDLE, mr.SCV_NAME_FIRST, 
	    								   mr.BIRTH_DATE, mr.DEATH_DATE,
	    								   -- Create checksum for TMR MD fields for domain PERSON
	    								   HASH_SHA256(TO_BINARY(TO_VARCHAR(mr.SCV_NAME_FIRST)), TO_BINARY(TO_VARCHAR(mr.SCV_NAME_MIDDLE)), TO_BINARY(TO_VARCHAR(mr.SCV_NAME_LAST)), TO_BINARY(TO_VARCHAR(mr.BIRTH_DATE)), TO_BINARY(TO_VARCHAR(''))) as CHECKSUM,
	    							       md.STD_PERSON_GN, md.STD_PERSON_GN2, md.STD_PERSON_FN,
	    								   -- Create checksum for TMR STD fields for domain PERSON
	    								   HASH_SHA256(TO_BINARY(TO_VARCHAR(STD_PERSON_GN)), TO_BINARY(TO_VARCHAR(STD_PERSON_GN2)), TO_BINARY(TO_VARCHAR(STD_PERSON_FN)), TO_BINARY(TO_VARCHAR(mr.BIRTH_DATE)), TO_BINARY(TO_VARCHAR(''))) as STD_CHECKSUM,
	    								   "Match_ROW_ID"
									FROM (
										-- Aggregation for domain PERSON
										SELECT ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, SCV_NAME_FIRST, SCV_NAME_MIDDLE, SCV_NAME_LAST, BIRTH_DATE, DEATH_DATE, 
		    							       STRING_AGG(UPDATED_AT,'|' ORDER BY UPDATED_AT DESC) as UPDATED_AT, 
									           STRING_AGG("Cleanse_ROW_ID_TMR",'|' ORDER BY "Cleanse_ROW_ID_TMR" ASC) as "Cleanse_ROW_ID_TMR",
									           STRING_AGG("Match_ROW_ID",'|' ORDER BY "Match_ROW_ID" ASC) as "Match_ROW_ID" 
										FROM (	
											-- Add master data and show only unique combinations of fields for domain PERSON
											SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.LAST_CONTACT_UPDATE_DT AS UPDATED_AT, b.FIRST_NAME AS SCV_NAME_FIRST, 
		    	            					   b.MIDDLE_NAME AS SCV_NAME_MIDDLE, b.FAMILY_ORG_NAME AS SCV_NAME_LAST, DATE_OF_BIRTH as BIRTH_DATE, '' as DEATH_DATE, a."Cleanse_ROW_ID_TMR", a."Match_ROW_ID"
											FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
											LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" b
											ON a."Cleanse_ROW_ID_TMR" = b."Z_RUN_SEQ_ID"
											WHERE a.SOURCE_SYSTEM = 'TMR'-- AND a.SYSTEM_ID = '107249237'
										) GROUP BY ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, SCV_NAME_FIRST, SCV_NAME_MIDDLE, SCV_NAME_LAST, BIRTH_DATE, DEATH_DATE
									) mr
									LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" md
									ON (CASE WHEN (LOCATE(mr."Cleanse_ROW_ID_TMR",'|') < 1) THEN mr."Cleanse_ROW_ID_TMR" ELSE SUBSTRING(mr."Cleanse_ROW_ID_TMR",1,LOCATE(mr."Cleanse_ROW_ID_TMR",'|')-1) END)  = md."Z_RUN_SEQ_ID"
								) mr
								
								-- Add SCV ID
								INNER JOIN #lt_entity_mappingss ma
								ON mr.ENTITY_ID = ma.ENTITY_ID AND 
								(CASE WHEN (LOCATE(mr."Match_ROW_ID",'|') < 1) THEN mr."Match_ROW_ID" ELSE SUBSTRING(mr."Match_ROW_ID",1,LOCATE(mr."Match_ROW_ID",'|')-1) END)  = ma.MATCH_ROW_ID
							)
							GROUP BY SCV_ID,
								   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, SCV_NAME_LAST, SCV_NAME_MIDDLE, SCV_NAME_FIRST, 
								   BIRTH_DATE, DEATH_DATE,
								   CHECKSUM,
								   STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN,
								   STD_CHECKSUM
							   
						 ;
						 
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.PersonTmr" (SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, SCV_NAME_LAST, SCV_NAME_MIDDLE, SCV_NAME_FIRST, BIRTH_DATE, DEATH_DATE, CHECKSUM, STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, STD_CHECKSUM FROM :lt_person_entities_tmr);						 
	
						
	-- TODO: Add master data, most importantly add VALID_FROM and VALID_TO for records with same SCV_ID, SOURCE_SYSTEM and SYSTEM_ID
	-- Question: Do we need to aggregate on first name, middle name and last name instead? Would we lose any information, we don't know what exactly triggered the duplication
    --           of records?
	
	-- ### SCV address ##############################################################################################################
	
	
	lt_address_entities_rms = 
								SELECT SCV_ID,
									   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, ADDRNUMBER, ADR_KIND, VALID_FROM, VALID_TO, CITY1, POST_CODE1, STREET, HOUSE_NUM1, COUNTRY, REGION, PERS_ADDR, MC_CITY1, MC_STREET, TIME_ZONE, ADRC_UUID,
									   CHECKSUM,
									   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS,
	                				   STD_ADDR_PRIM_NAME_FULL, STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	                				   ADDR_LATITUDE, ADDR_LONGITUDE,
	                				   STD_CHECKSUM
								FROM (
								SELECT ma.SCV_ID, mr.* FROM 
								(
									SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.ADDRNUMBER, b.ADR_KIND, CASE WHEN SUBSTRING(to_nvarchar(b.VALID_FROM),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.VALID_FROM),1,8)) END  AS VALID_FROM, CASE WHEN SUBSTRING(to_nvarchar(b.VALID_TO),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.VALID_TO),1,8)) END  AS VALID_TO, c.CITY1, c.POST_CODE1, c.STREET, c.HOUSE_NUM1, c.COUNTRY, c.REGION, c.PERS_ADDR, c.MC_CITY1, c.MC_STREET, c.TIME_ZONE, c.ADRC_UUID, 
	                							    -- Create checksum for RMS MD fields for domain ADDRESS
    												HASH_SHA256(TO_BINARY(TO_VARCHAR(c.CITY1)), TO_BINARY(TO_VARCHAR(c.POST_CODE1)), TO_BINARY(TO_VARCHAR(c.STREET)), TO_BINARY(TO_VARCHAR(c.HOUSE_NUM1)), TO_BINARY(TO_VARCHAR(c.COUNTRY)),
    												TO_BINARY(TO_VARCHAR(c.REGION)), TO_BINARY(TO_VARCHAR(c.PERS_ADDR)), TO_BINARY(TO_VARCHAR(c.MC_CITY1)), TO_BINARY(TO_VARCHAR(c.STREET)), TO_BINARY(TO_VARCHAR(c.TIME_ZONE)), TO_BINARY(TO_VARCHAR(c.ADRC_UUID))) as CHECKSUM,
	                							    STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS,
	                								STD_ADDR_PRIM_NAME_FULL, STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	                								ADDR_LATITUDE, ADDR_LONGITUDE,
	                								-- Create checksum for RMS STD MD fields for domain ADDRESS
	                								HASH_SHA256(TO_BINARY(TO_VARCHAR(c.STD_ADDR_COUNTRY_2CHAR)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_COUNTRY_NAME)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_BUILDING_NAME)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_ADDRESS_DELIVERY)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_PRIM_ADDRESS)),
    												TO_BINARY(TO_VARCHAR(c.STD_ADDR_PRIM_NAME_FULL)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_PRIM_NAME)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_PRIM_TYPE)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_PRIM_NUMBER)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_REGION)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_POSTCODE1))) as STD_CHECKSUM,
    												"Match_ROW_ID"
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
									LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::BUT021_FS" b
									ON a.SYSTEM_ID = b.PARTNER
									LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::ADRC" c
									ON b.ADDRNUMBER = c.ADDRNUMBER
									WHERE a.SOURCE_SYSTEM = 'RMS'
								) mr
							-- Add SCV ID
							INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mappingss) ma
							ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID
							) 
							GROUP BY SCV_ID,
									   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, ADDRNUMBER, ADR_KIND, VALID_FROM, VALID_TO, CITY1, POST_CODE1, STREET, HOUSE_NUM1, COUNTRY, REGION, PERS_ADDR, MC_CITY1, MC_STREET, TIME_ZONE, ADRC_UUID,
									   CHECKSUM,
									   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS,
	                				   STD_ADDR_PRIM_NAME_FULL, STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	                				   ADDR_LATITUDE, ADDR_LONGITUDE,
	                				   STD_CHECKSUM
						 ;
	
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.AddressRms" (
																		SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, ADDRNUMBER, ADR_KIND, VALID_FROM, VALID_TO, CITY1, POST_CODE1, STREET, HOUSE_NUM1, COUNTRY, REGION, PERS_ADDR, MC_CITY1, MC_STREET, TIME_ZONE, ADRC_UUID, CHECKSUM, 
																		        STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL, STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, 
																		        STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1, ADDR_LATITUDE, ADDR_LONGITUDE, STD_CHECKSUM
																		FROM :lt_address_entities_rms
																	  )
	;						 
	
	lt_address_entities_tmr = SELECT SCV_ID,
								   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, UPDATED_FROM, UPDATED_TO,
								   FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
								   CHECKSUM,
								   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            		   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	    						   ADDR_LATITUDE, ADDR_LONGITUDE,
	    						   STD_CHECKSUM
							FROM (
							SELECT ma.SCV_ID, mr.* FROM 
							(
									  SELECT mr.ENTITY_ID, mr.SOURCE_SYSTEM, mr.SYSTEM_ID, CASE WHEN LOCATE(mr.UPDATED_AT,'|') < 1 THEN mr.UPDATED_AT ELSE SUBSTRING(mr.UPDATED_AT,1,LOCATE(mr.UPDATED_AT,'|')-1) END as UPDATED_AT,
									   --mr."NAME",
									   UPDATED_FROM, UPDATED_TO,
	                                   mr.FLOOR, mr.UNIT, mr.BUILDING_NAME, mr.STREET_NO, mr.STREET_NAME, mr.STREET_TYPE, mr.STREET_SUFFIX, mr.SUBURB, mr.POSTCODE, mr.STATE, mr.COUNTRY,
	                                   -- Create checksum for TMR MD fields for domain ADDRESS
    								   HASH_SHA256(TO_BINARY(TO_VARCHAR(mr.FLOOR)), TO_BINARY(TO_VARCHAR(mr.UNIT)), TO_BINARY(TO_VARCHAR(mr.BUILDING_NAME)), TO_BINARY(TO_VARCHAR(mr.STREET_NO)), TO_BINARY(TO_VARCHAR(mr.STREET_NAME)),
    								   TO_BINARY(TO_VARCHAR(mr.STREET_TYPE)), TO_BINARY(TO_VARCHAR(mr.STREET_SUFFIX)), TO_BINARY(TO_VARCHAR(mr.SUBURB)), TO_BINARY(TO_VARCHAR(mr.POSTCODE)), TO_BINARY(TO_VARCHAR(mr.STATE)), TO_BINARY(TO_VARCHAR(mr.COUNTRY))
    								   ) as CHECKSUM,
    								   mr.STD_ADDR_COUNTRY_2CHAR, mr.STD_ADDR_COUNTRY_NAME, mr.STD_ADDR_BUILDING_NAME, mr.STD_ADDR_ADDRESS_DELIVERY, mr.STD_ADDR_PRIM_ADDRESS, mr.STD_ADDR_PRIM_NAME_FULL,
	    	            			   mr.STD_ADDR_PRIM_NAME, mr.STD_ADDR_PRIM_TYPE, mr.STD_ADDR_PRIM_NUMBER, mr.STD_ADDR_LOCALITY, mr.STD_ADDR_REGION, mr.STD_ADDR_POSTCODE1,
	    							   mr.ADDR_LATITUDE, mr.ADDR_LONGITUDE,
	    							   HASH_SHA256(TO_BINARY(TO_VARCHAR(mr.STD_ADDR_COUNTRY_2CHAR)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_COUNTRY_NAME)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_BUILDING_NAME)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_ADDRESS_DELIVERY)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_ADDRESS)),
	    							   TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_NAME_FULL)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_NAME)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_TYPE)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_NUMBER)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_LOCALITY)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_REGION)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_POSTCODE1))) as STD_CHECKSUM,
	    							 --  mr.LAST_CONTACT_UPDATE_DT,
	    							   mr."Match_ROW_ID"
								FROM (
									-- Aggregation for domain PERSON
									SELECT ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
	    							       STRING_AGG(UPDATED_AT,'|' ORDER BY UPDATED_AT DESC) as UPDATED_AT, 
								           STRING_AGG("Cleanse_ROW_ID_TMR",'|' ORDER BY "Cleanse_ROW_ID_TMR" DESC) as "Cleanse_ROW_ID_TMR",
								           STRING_AGG("Match_ROW_ID",'|' ORDER BY "Match_ROW_ID" DESC) as "Match_ROW_ID",
								           STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            				   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1, ADDR_LATITUDE, ADDR_LONGITUDE--, 
	    	            				   --"NAME",
	    	            				   --UPDATED_FROM , UPDATED_TO, 
	    	            			--	   LAST_CONTACT_UPDATE_DT
									FROM (	
										-- Add master data and show only unique combinations of fields for domain PERSON
										SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.LAST_CONTACT_UPDATE_DT AS UPDATED_AT,
	    	            					   b."FLOOR", b.UNIT, b.BUILDING_NAME, b.STREET_NO, b.STREET_NAME, b.STREET_TYPE, b.STREET_SUFFIX, b.SUBURB, b.POSTCODE, b.STATE, b.COUNTRY,
	    	            					   b.STD_ADDR_COUNTRY_2CHAR, b.STD_ADDR_COUNTRY_NAME, b.STD_ADDR_BUILDING_NAME, b.STD_ADDR_ADDRESS_DELIVERY, b.STD_ADDR_PRIM_ADDRESS, b.STD_ADDR_PRIM_NAME_FULL,
	    	            					   b.STD_ADDR_PRIM_NAME, b.STD_ADDR_PRIM_TYPE, b.STD_ADDR_PRIM_NUMBER, b.STD_ADDR_LOCALITY, b.STD_ADDR_REGION, b.STD_ADDR_POSTCODE1,
	    	            					   b.ADDR_LATITUDE, b.ADDR_LONGITUDE,
	    	            					   a."Cleanse_ROW_ID_TMR",
	    	            					   a."Match_ROW_ID"
	    	            					   --, b."NAME",
	    	            			--		   e.UPDATED_FROM , e.UPDATED_TO,
	    	            			--		   b.LAST_CONTACT_UPDATE_DT
										FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
										LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" b
										ON a."Cleanse_ROW_ID_TMR" = b."Z_RUN_SEQ_ID"
									--	LEFT OUTER JOIN (
									--	SELECT 
									--			MAX ("Z_RUN_SEQ_ID") AS "Z_RUN_SEQ_ID",
									--			CASE WHEN SUBSTRING (MIN ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-01-01' ELSE '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-07-01' END AS UPDATED_FROM, 
									--			CASE WHEN SUBSTRING (MAX ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-06-30' ELSE '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-12-31' END AS UPDATED_TO
									--			FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
									--			GROUP BY "CUSTOMER_REF","FIRST_NAME","MIDDLE_NAME","FAMILY_ORG_NAME","FLOOR","UNIT","BUILDING_NAME","STREET_NO","STREET_NAME","STREET_TYPE","STREET_SUFFIX","SUBURB","POSTCODE","STATE","COUNTRY") AS e
									--	ON  b."Z_RUN_SEQ_ID" = e."Z_RUN_SEQ_ID" 
										WHERE SOURCE_SYSTEM = 'TMR' --AND SYSTEM_ID = '100762476'-- AND (SYSTEM_ID = '100762476') --AND (SYSTEM_ID = '32254714' OR SYSTEM_ID = '13397929')
									) GROUP BY ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, "FLOOR", UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
									STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            				   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1, ADDR_LATITUDE, ADDR_LONGITUDE 
	    	            				   --"NAME", 
	    	            				  -- UPDATED_FROM , UPDATED_TO, 
	    	            				  -- LAST_CONTACT_UPDATE_DT
								) mr
								LEFT OUTER JOIN
								(SELECT 
												MAX ("Z_RUN_SEQ_ID") AS "Z_RUN_SEQ_ID",
												CASE WHEN SUBSTRING (MIN ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-01-01' ELSE '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-07-01' END AS UPDATED_FROM, 
												CASE WHEN SUBSTRING (MAX ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-06-30' ELSE '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-12-31' END AS UPDATED_TO
												FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
												--WHERE CUSTOMER_REF = '33892205'
												--WHERE CUSTOMER_REF =  '100762476'
												GROUP BY "CUSTOMER_REF","FIRST_NAME","MIDDLE_NAME","FAMILY_ORG_NAME","DATE_OF_BIRTH", "FLOOR", UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
												STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            						STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1, ADDR_LATITUDE, ADDR_LONGITUDE, LAST_CONTACT_UPDATE_DT) AS zdate
								ON zdate."Z_RUN_SEQ_ID" = (CASE WHEN (LOCATE(mr."Cleanse_ROW_ID_TMR",'|') < 1) THEN mr."Cleanse_ROW_ID_TMR" ELSE SUBSTRING(mr."Cleanse_ROW_ID_TMR",1,LOCATE(mr."Cleanse_ROW_ID_TMR",'|')-1) END) 
								
								LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" md
								ON (CASE WHEN (LOCATE(mr."Cleanse_ROW_ID_TMR",'|') < 1) THEN mr."Cleanse_ROW_ID_TMR" ELSE SUBSTRING(mr."Cleanse_ROW_ID_TMR",1,LOCATE(mr."Cleanse_ROW_ID_TMR",'|')-1) END)  = md."Z_RUN_SEQ_ID"   
								
							) mr
							-- Add SCV ID
							INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mappingss) ma
							ON mr.ENTITY_ID = ma.ENTITY_ID1 AND
							(CASE WHEN (LOCATE(mr."Match_ROW_ID",'|') < 1) THEN mr."Match_ROW_ID" ELSE SUBSTRING(mr."Match_ROW_ID",1,LOCATE(mr."Match_ROW_ID",'|')-1) END)  = ma.MATCH_ROW_ID
						    ) 
						    GROUP BY SCV_ID,
								   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, UPDATED_FROM, UPDATED_TO,
								   FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
								   CHECKSUM,
								   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            		   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	    						   ADDR_LATITUDE, ADDR_LONGITUDE,
	    						   STD_CHECKSUM
						    
						 






/*						SELECT SCV_ID,
								   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, UPDATED_FROM, UPDATED_TO,
								   FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
								   CHECKSUM,
								   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            		   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	    						   ADDR_LATITUDE, ADDR_LONGITUDE,
	    						   LAST_CONTACT_UPDATE_DT,
	    						   STD_CHECKSUM
							FROM (
							SELECT ma.SCV_ID, mr.* FROM 
							(
										SELECT mr.ENTITY_ID, mr.SOURCE_SYSTEM, mr.SYSTEM_ID, CASE WHEN LOCATE(mr.UPDATED_AT,'|') < 1 THEN mr.UPDATED_AT ELSE SUBSTRING(mr.UPDATED_AT,1,LOCATE(mr.UPDATED_AT,'|')-1) END as UPDATED_AT,
									   --mr."NAME",
									   UPDATED_FROM, UPDATED_TO,
	                                   mr.FLOOR, mr.UNIT, mr.BUILDING_NAME, mr.STREET_NO, mr.STREET_NAME, mr.STREET_TYPE, mr.STREET_SUFFIX, mr.SUBURB, mr.POSTCODE, mr.STATE, mr.COUNTRY,
	                                   -- Create checksum for TMR MD fields for domain ADDRESS
    								   HASH_SHA256(TO_BINARY(TO_VARCHAR(mr.FLOOR)), TO_BINARY(TO_VARCHAR(mr.UNIT)), TO_BINARY(TO_VARCHAR(mr.BUILDING_NAME)), TO_BINARY(TO_VARCHAR(mr.STREET_NO)), TO_BINARY(TO_VARCHAR(mr.STREET_NAME)),
    								   TO_BINARY(TO_VARCHAR(mr.STREET_TYPE)), TO_BINARY(TO_VARCHAR(mr.STREET_SUFFIX)), TO_BINARY(TO_VARCHAR(mr.SUBURB)), TO_BINARY(TO_VARCHAR(mr.POSTCODE)), TO_BINARY(TO_VARCHAR(mr.STATE)), TO_BINARY(TO_VARCHAR(mr.COUNTRY))
    								   ) as CHECKSUM,
    								   mr.STD_ADDR_COUNTRY_2CHAR, mr.STD_ADDR_COUNTRY_NAME, mr.STD_ADDR_BUILDING_NAME, mr.STD_ADDR_ADDRESS_DELIVERY, mr.STD_ADDR_PRIM_ADDRESS, mr.STD_ADDR_PRIM_NAME_FULL,
	    	            			   mr.STD_ADDR_PRIM_NAME, mr.STD_ADDR_PRIM_TYPE, mr.STD_ADDR_PRIM_NUMBER, mr.STD_ADDR_LOCALITY, mr.STD_ADDR_REGION, mr.STD_ADDR_POSTCODE1,
	    							   mr.ADDR_LATITUDE, mr.ADDR_LONGITUDE,
	    							   HASH_SHA256(TO_BINARY(TO_VARCHAR(mr.STD_ADDR_COUNTRY_2CHAR)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_COUNTRY_NAME)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_BUILDING_NAME)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_ADDRESS_DELIVERY)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_ADDRESS)),
	    							   TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_NAME_FULL)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_NAME)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_TYPE)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_NUMBER)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_LOCALITY)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_REGION)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_POSTCODE1))) as STD_CHECKSUM,
	    							   mr.LAST_CONTACT_UPDATE_DT,
	    							   mr."Match_ROW_ID"
								FROM (
									-- Aggregation for domain PERSON
									SELECT ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
	    							       STRING_AGG(UPDATED_AT,'|' ORDER BY UPDATED_AT DESC) as UPDATED_AT, 
								           STRING_AGG("Cleanse_ROW_ID_TMR",'|' ORDER BY "Cleanse_ROW_ID_TMR" ASC) as "Cleanse_ROW_ID_TMR",
								           STRING_AGG("Match_ROW_ID",'|' ORDER BY "Match_ROW_ID" ASC) as "Match_ROW_ID",
								           STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            				   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1, ADDR_LATITUDE, ADDR_LONGITUDE, 
	    	            				   --"NAME",
	    	            				   UPDATED_FROM , UPDATED_TO, LAST_CONTACT_UPDATE_DT
									FROM (	
										-- Add master data and show only unique combinations of fields for domain PERSON
										SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.LAST_CONTACT_UPDATE_DT AS UPDATED_AT,
	    	            					   b."FLOOR", b.UNIT, b.BUILDING_NAME, b.STREET_NO, b.STREET_NAME, b.STREET_TYPE, b.STREET_SUFFIX, b.SUBURB, b.POSTCODE, b.STATE, b.COUNTRY,
	    	            					   b.STD_ADDR_COUNTRY_2CHAR, b.STD_ADDR_COUNTRY_NAME, b.STD_ADDR_BUILDING_NAME, b.STD_ADDR_ADDRESS_DELIVERY, b.STD_ADDR_PRIM_ADDRESS, b.STD_ADDR_PRIM_NAME_FULL,
	    	            					   b.STD_ADDR_PRIM_NAME, b.STD_ADDR_PRIM_TYPE, b.STD_ADDR_PRIM_NUMBER, b.STD_ADDR_LOCALITY, b.STD_ADDR_REGION, b.STD_ADDR_POSTCODE1,
	    	            					   b.ADDR_LATITUDE, b.ADDR_LONGITUDE,
	    	            					   a."Cleanse_ROW_ID_TMR",
	    	            					   a."Match_ROW_ID", b."NAME",
	    	            					   e.UPDATED_FROM , e.UPDATED_TO,
	    	            					   b.LAST_CONTACT_UPDATE_DT
										FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
										LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" b
										ON a."Cleanse_ROW_ID_TMR" = b."Z_RUN_SEQ_ID"
										LEFT OUTER JOIN (
										SELECT 
												MAX ("Z_RUN_SEQ_ID") AS "Z_RUN_SEQ_ID",
												CASE WHEN SUBSTRING (MIN ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-01-01' ELSE '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-07-01' END AS UPDATED_FROM, 
												CASE WHEN SUBSTRING (MAX ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-06-30' ELSE '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-12-31' END AS UPDATED_TO
												FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
												GROUP BY "CUSTOMER_REF","FIRST_NAME","MIDDLE_NAME","FAMILY_ORG_NAME","FLOOR","UNIT","BUILDING_NAME","STREET_NO","STREET_NAME","STREET_TYPE","STREET_SUFFIX","SUBURB","POSTCODE","STATE","COUNTRY") AS e
										ON  b."Z_RUN_SEQ_ID" = e."Z_RUN_SEQ_ID" 
										WHERE SOURCE_SYSTEM = 'TMR' -- AND (SYSTEM_ID = '100762476') --AND (SYSTEM_ID = '32254714' OR SYSTEM_ID = '13397929')
									) GROUP BY ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, "FLOOR", UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
									STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            				   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1, ADDR_LATITUDE, ADDR_LONGITUDE, "NAME", UPDATED_FROM , UPDATED_TO, LAST_CONTACT_UPDATE_DT
								) mr
								LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" md
								ON (CASE WHEN (LOCATE(mr."Cleanse_ROW_ID_TMR",'|') < 1) THEN mr."Cleanse_ROW_ID_TMR" ELSE SUBSTRING(mr."Cleanse_ROW_ID_TMR",1,LOCATE(mr."Cleanse_ROW_ID_TMR",'|')-1) END)  = md."Z_RUN_SEQ_ID"
						) mr
							-- Add SCV ID
							INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mappingss) ma
							ON mr.ENTITY_ID = ma.ENTITY_ID1 AND
							(CASE WHEN (LOCATE(mr."Match_ROW_ID",'|') < 1) THEN mr."Match_ROW_ID" ELSE SUBSTRING(mr."Match_ROW_ID",1,LOCATE(mr."Match_ROW_ID",'|')-1) END)  = ma.MATCH_ROW_ID
						    ) 
						    GROUP BY SCV_ID, 
								   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, UPDATED_FROM, UPDATED_TO,
								   FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
								   CHECKSUM,
								   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            		   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	    						   ADDR_LATITUDE, ADDR_LONGITUDE, 
	    						   LAST_CONTACT_UPDATE_DT,
	    						   STD_CHECKSUM
							
*/						 
	
	
	
	
	
/*							SELECT SCV_ID,
								   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, 
								   FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
								   CHECKSUM,
								   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            		   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	    						   ADDR_LATITUDE, ADDR_LONGITUDE,
	    						   STD_CHECKSUM
							FROM (
							SELECT ma.SCV_ID, mr.* FROM 
							(
								SELECT mr.ENTITY_ID, mr.SOURCE_SYSTEM, mr.SYSTEM_ID, CASE WHEN LOCATE(mr.UPDATED_AT,'|') < 1 THEN mr.UPDATED_AT ELSE SUBSTRING(mr.UPDATED_AT,1,LOCATE(mr.UPDATED_AT,'|')-1) END as UPDATED_AT, 
	                                   mr.FLOOR, mr.UNIT, mr.BUILDING_NAME, mr.STREET_NO, mr.STREET_NAME, mr.STREET_TYPE, mr.STREET_SUFFIX, mr.SUBURB, mr.POSTCODE, mr.STATE, mr.COUNTRY,
    								   -- Create checksum for TMR MD fields for domain ADDRESS
    								   HASH_SHA256(TO_BINARY(TO_VARCHAR(mr.FLOOR)), TO_BINARY(TO_VARCHAR(mr.UNIT)), TO_BINARY(TO_VARCHAR(mr.BUILDING_NAME)), TO_BINARY(TO_VARCHAR(mr.STREET_NO)), TO_BINARY(TO_VARCHAR(mr.STREET_NAME)),
    								   TO_BINARY(TO_VARCHAR(mr.STREET_TYPE)), TO_BINARY(TO_VARCHAR(mr.STREET_SUFFIX)), TO_BINARY(TO_VARCHAR(mr.SUBURB)), TO_BINARY(TO_VARCHAR(mr.POSTCODE)), TO_BINARY(TO_VARCHAR(mr.STATE)), TO_BINARY(TO_VARCHAR(mr.COUNTRY))
    								   ) as CHECKSUM,
    								   mr.STD_ADDR_COUNTRY_2CHAR, mr.STD_ADDR_COUNTRY_NAME, mr.STD_ADDR_BUILDING_NAME, mr.STD_ADDR_ADDRESS_DELIVERY, mr.STD_ADDR_PRIM_ADDRESS, mr.STD_ADDR_PRIM_NAME_FULL,
	    	            			   mr.STD_ADDR_PRIM_NAME, mr.STD_ADDR_PRIM_TYPE, mr.STD_ADDR_PRIM_NUMBER, mr.STD_ADDR_LOCALITY, mr.STD_ADDR_REGION, mr.STD_ADDR_POSTCODE1,
	    							   mr.ADDR_LATITUDE, mr.ADDR_LONGITUDE,
	    							   -- Create checksum for TMR STD fields for domain ADDRESS
    								   HASH_SHA256(TO_BINARY(TO_VARCHAR(mr.STD_ADDR_COUNTRY_2CHAR)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_COUNTRY_NAME)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_BUILDING_NAME)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_ADDRESS_DELIVERY)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_ADDRESS)),
	    							   TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_NAME_FULL)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_NAME)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_TYPE)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_PRIM_NUMBER)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_LOCALITY)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_REGION)), TO_BINARY(TO_VARCHAR(mr.STD_ADDR_POSTCODE1))) as STD_CHECKSUM,
	    							   mr."Match_ROW_ID"
								FROM (
									-- Aggregation for domain PERSON
									SELECT ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
	    							       STRING_AGG(UPDATED_AT,'|' ORDER BY UPDATED_AT DESC) as UPDATED_AT, 
								           STRING_AGG("Cleanse_ROW_ID_TMR",'|' ORDER BY "Cleanse_ROW_ID_TMR" ASC) as "Cleanse_ROW_ID_TMR",
								           STRING_AGG("Match_ROW_ID",'|' ORDER BY "Match_ROW_ID" ASC) as "Match_ROW_ID",
								           STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            				   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1, ADDR_LATITUDE, ADDR_LONGITUDE
									FROM (	
										-- Add master data and show only unique combinations of fields for domain PERSON
										SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.LAST_CONTACT_UPDATE_DT AS UPDATED_AT,
	    	            					   b."FLOOR", b.UNIT, b.BUILDING_NAME, b.STREET_NO, b.STREET_NAME, b.STREET_TYPE, b.STREET_SUFFIX, b.SUBURB, b.POSTCODE, b.STATE, b.COUNTRY,
	    	            					   b.STD_ADDR_COUNTRY_2CHAR, b.STD_ADDR_COUNTRY_NAME, b.STD_ADDR_BUILDING_NAME, b.STD_ADDR_ADDRESS_DELIVERY, b.STD_ADDR_PRIM_ADDRESS, b.STD_ADDR_PRIM_NAME_FULL,
	    	            					   b.STD_ADDR_PRIM_NAME, b.STD_ADDR_PRIM_TYPE, b.STD_ADDR_PRIM_NUMBER, b.STD_ADDR_LOCALITY, b.STD_ADDR_REGION, b.STD_ADDR_POSTCODE1,
	    	            					   b.ADDR_LATITUDE, b.ADDR_LONGITUDE,
	    	            					   a."Cleanse_ROW_ID_TMR",
	    	            					   a."Match_ROW_ID"
										FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
										LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" b
										ON a."Cleanse_ROW_ID_TMR" = b."Z_RUN_SEQ_ID"
										WHERE SOURCE_SYSTEM = 'TMR'
									) GROUP BY ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, "FLOOR", UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
									STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            				   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1, ADDR_LATITUDE, ADDR_LONGITUDE
								) mr
								LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" md
								ON (CASE WHEN (LOCATE(mr."Cleanse_ROW_ID_TMR",'|') < 1) THEN mr."Cleanse_ROW_ID_TMR" ELSE SUBSTRING(mr."Cleanse_ROW_ID_TMR",1,LOCATE(mr."Cleanse_ROW_ID_TMR",'|')-1) END)  = md."Z_RUN_SEQ_ID"
							) mr
							-- Add SCV ID
							INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mappingss) ma
							ON mr.ENTITY_ID = ma.ENTITY_ID1 AND
							(CASE WHEN (LOCATE(mr."Match_ROW_ID",'|') < 1) THEN mr."Match_ROW_ID" ELSE SUBSTRING(mr."Match_ROW_ID",1,LOCATE(mr."Match_ROW_ID",'|')-1) END)  = ma.MATCH_ROW_ID
						    ) 
						    GROUP BY SCV_ID,
								   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, 
								   FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
								   CHECKSUM,
								   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            		   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	    						   ADDR_LATITUDE, ADDR_LONGITUDE,
	    						   STD_CHECKSUM
*/						    
						 ;
						 
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.AddressTmr" (SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, '', UPDATED_FROM, UPDATED_TO, FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE , STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY, '','','','', CHECKSUM,
	                                                                           STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
	    	            					                                   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	    	            					                                   ADDR_LATITUDE, ADDR_LONGITUDE, STD_CHECKSUM, UPDATED_AT
																		FROM :lt_address_entities_tmr);						 
	
	
	
	-- ### SCV contact ##############################################################################################################
	
	lt_contact_entities_rms_number = 
								SELECT SCV_ID,
									   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO,
									   CONTACT_NUMBER, NUMBER_EXT, NUMBER_TYPE,
									   CHECKSUM
								FROM (
								SELECT ma.SCV_ID, mr.* FROM 
								(
									SELECT * FROM (
	                            	SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, CASE WHEN SUBSTRING(to_nvarchar(b.DATE_FROM),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.DATE_FROM),1,8)) END  AS VALID_FROM, 
	                            	                CASE WHEN SUBSTRING(to_nvarchar(b.DATE_TO),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.DATE_TO),1,8)) END AS VALID_TO, 
	                            	                b.TEL_NUMBER AS CONTACT_NUMBER, b.TEL_EXTENS as NUMBER_EXT, 'PHO' as NUMBER_TYPE,
									                HASH_SHA256(TO_BINARY(TO_VARCHAR(b.TEL_NUMBER)), TO_BINARY(TO_VARCHAR(b.TEL_EXTENS))) as CHECKSUM,
									                a."Match_ROW_ID"
									    FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
										LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::ADRC" b
										ON a."Cleanse_ROW_ID_ADRC" = b."Z_RUN_SEQ_ID" 
										WHERE SOURCE_SYSTEM = 'RMS' AND ( LENGTH(TEL_NUMBER) > 0)
									ORDER BY a.ENTITY_ID
	                            	)
									UNION ALL
									SELECT * FROM (
									SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, CASE WHEN SUBSTRING(to_nvarchar(b.DATE_FROM),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.DATE_FROM),1,8)) END  AS VALID_FROM, 
									                CASE WHEN SUBSTRING(to_nvarchar(b.DATE_TO),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.DATE_TO),1,8)) END  AS VALID_TO, 
									                b.FAX_NUMBER as CONTACT_NUMBER, b.FAX_EXTENS as NUMBER_EXT, 'FAX' as NUMBER_TYPE,
									                HASH_SHA256(TO_BINARY(TO_VARCHAR(b.FAX_NUMBER)), TO_BINARY(TO_VARCHAR(b.FAX_EXTENS))) as CHECKSUM,
									                a."Match_ROW_ID"
										FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
										LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::ADRC" b
										ON a."Cleanse_ROW_ID_ADRC" = b."Z_RUN_SEQ_ID" 
										WHERE SOURCE_SYSTEM = 'RMS' AND ( LENGTH(FAX_NUMBER) > 0)
									ORDER BY a.ENTITY_ID
									) u
								) mr
								-- Add SCV ID
								INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mappingss) ma
								ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID
								) GROUP BY SCV_ID,
								           ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO,
									       CONTACT_NUMBER, NUMBER_EXT, NUMBER_TYPE,
									       CHECKSUM
							 ;
	
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.ContactNumber" (SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO, CONTACT_NUMBER, NUMBER_EXT, NUMBER_TYPE, '', CHECKSUM, ''
																		   FROM :lt_contact_entities_rms_number
																		   );						 
	
	-- Are there any email addresses coming from RMS?
	
	lt_contact_entities_tmr_custMain_number = 
							SELECT SCV_ID,
							       ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, NUMBER_TYPE, 
							       CHECKSUM
							FROM (
							SELECT ma.SCV_ID, mr.* FROM 
							(
								SELECT mr.ENTITY_ID, mr.SOURCE_SYSTEM, mr.SYSTEM_ID, CASE WHEN LOCATE(mr.UPDATED_AT,'|') < 1 THEN mr.UPDATED_AT ELSE SUBSTRING(mr.UPDATED_AT,1,LOCATE(mr.UPDATED_AT,'|')-1) END as UPDATED_AT, mr.CONTACT_PHONE_NO, 'PHO' as NUMBER_TYPE,
	    							   -- Create checksum for TMR CUSTMAIN contacts
    								   HASH_SHA256(TO_BINARY(TO_VARCHAR(mr.UPDATED_AT)), TO_BINARY(TO_VARCHAR(mr.CONTACT_PHONE_NO))) as CHECKSUM,
    								   mr."Match_ROW_ID"
								FROM (
									-- Aggregation for domain PERSON
									SELECT ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, CONTACT_PHONE_NO,
	    							       STRING_AGG(UPDATED_AT,'|' ORDER BY UPDATED_AT DESC) as UPDATED_AT, 
								           STRING_AGG("Cleanse_ROW_ID_TMR",'|' ORDER BY "Cleanse_ROW_ID_TMR" ASC) as "Cleanse_ROW_ID_TMR",
								           "Match_ROW_ID"
								           --STRING_AGG("Match_ROW_ID",'|' ORDER BY "Match_ROW_ID" ASC) as "Match_ROW_ID"
									FROM (	
										-- Add master data and show only unique combinations of fields for domain PERSON
										SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.CONTACT_PHONE_EFFECT_DT AS UPDATED_AT, b.CONTACT_PHONE_NO,
	    	            					   a."Cleanse_ROW_ID_TMR",
	    	            					   a."Match_ROW_ID"
										FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
										LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" b
										ON a."Cleanse_ROW_ID_TMR" = b."Z_RUN_SEQ_ID"
										WHERE SOURCE_SYSTEM = 'TMR'
									) GROUP BY ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, CONTACT_PHONE_NO, "Match_ROW_ID"
								) mr
								LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" md
								ON CASE WHEN (LOCATE(mr."Cleanse_ROW_ID_TMR",'|') < 1) THEN mr."Cleanse_ROW_ID_TMR" ELSE SUBSTRING(mr."Cleanse_ROW_ID_TMR",1,LOCATE(mr."Cleanse_ROW_ID_TMR",'|')-1) END  = md."Z_RUN_SEQ_ID"			
							) mr
							-- Add SCV ID
							INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mappingss) ma
							ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID
						   )
						   GROUP BY SCV_ID,
									ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, NUMBER_TYPE,
							        CHECKSUM
						 ;
	
	
	lt_contact_entities_tmr_custContact_number = 
										SELECT SCV_ID,
										       ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, NUMBER_TYPE,
										       CHECKSUM
										FROM (
											SELECT ma.SCV_ID, mr.* FROM 
											(			
												SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.LAST_UPDATED AS UPDATED_AT, b.SMS_CONTACT_NUMBER as CONTACT_PHONE_NO, 'SMS' as NUMBER_TYPE,
			    	            				HASH_SHA256(TO_BINARY(TO_VARCHAR(b.LAST_UPDATED)), TO_BINARY(TO_VARCHAR(SMS_CONTACT_NUMBER))) as CHECKSUM,
			    	            				a."Match_ROW_ID"
												FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
												INNER JOIN "osr.scv.foundation.db.synonyms::TMR_CustContact" b
												ON a."SYSTEM_ID" = b."CUSTOMER_REF"
												WHERE SOURCE_SYSTEM = 'TMR' and b.SMS_CONTACT_NUMBER <> ''
											) mr	
											-- Add SCV ID
											INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mappingss) ma
											ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID
										) 
										GROUP BY SCV_ID, 
										         ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, NUMBER_TYPE,
										         CHECKSUM
										;
	
	
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.ContactNumber" (
																			SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, '', '', CONTACT_PHONE_NO, '', NUMBER_TYPE, DESC, CHECKSUM, UPDATED_AT 
																			FROM (
																				SELECT DISTINCT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, '',NUMBER_TYPE,  '' as DESC, CHECKSUM
																				FROM :lt_contact_entities_tmr_custMain_number
																				UNION ALL
																				SELECT DISTINCT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, '',NUMBER_TYPE,  '' as DESC, CHECKSUM
																				FROM :lt_contact_entities_tmr_custContact_number
																			) 
																			GROUP BY SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, '','', CONTACT_PHONE_NO, '', NUMBER_TYPE, DESC, CHECKSUM, UPDATED_AT
																		   )
	;							 
	
	lt_contact_entities_tmr_custContact_email =
										SELECT SCV_ID, ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, EMAIL_ADDRESS, STD_EMAIL, CHECKSUM, STD_CHECKSUM
										FROM (
											SELECT ma.SCV_ID, mr.* FROM 
											(			
												SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.LAST_UPDATED AS UPDATED_AT, b.EMAIL_ADDRESS, STD_EMAIL,
			    	            				HASH_SHA256(TO_BINARY(TO_VARCHAR(b.LAST_UPDATED)), TO_BINARY(TO_VARCHAR(EMAIL_ADDRESS))) as CHECKSUM,
			    	            				a."Match_ROW_ID",
												HASH_SHA256(TO_BINARY(TO_VARCHAR(b.LAST_UPDATED)), TO_BINARY(TO_VARCHAR(STD_EMAIL))) as STD_CHECKSUM
												FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
												INNER JOIN "osr.scv.foundation.db.synonyms::TMR_CustContact" b
												ON a."SYSTEM_ID" = b."CUSTOMER_REF"
												WHERE SOURCE_SYSTEM = 'TMR' and b.EMAIL_ADDRESS <> ''
											) mr	
											-- Add SCV ID
											INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mappingss) ma
											ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID
										)
										GROUP BY SCV_ID, ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, EMAIL_ADDRESS, STD_EMAIL, CHECKSUM, STD_CHECKSUM
	;
						 
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.ContactEmail" (
																		  SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, '', '', EMAIL_ADDRESS, '', 'TMR: Customer main table', CHECKSUM, STD_EMAIL, STD_CHECKSUM, UPDATED_AT
																		  FROM :lt_contact_entities_tmr_custContact_email
																		  GROUP BY SCV_ID, SOURCE_SYSTEM, SYSTEM_ID,'','', EMAIL_ADDRESS, '', 'TMR: Customer main table', CHECKSUM, STD_EMAIL, STD_CHECKSUM, UPDATED_AT
																		 )
	;		
	
	
	-- ### Clean-up ##############################################################################################################
	DROP TABLE #lt_entity_mappingss;
	DROP TABLE #lt_scv_counters;
	
--    o_return_code := 'SUCCESS';
--    o_message := 'Entites moved successfully';


END