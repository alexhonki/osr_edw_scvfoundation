/*
	Move entities from match results shadow table to SCV foundation
	
		This code will move all promoted match result entities from the match results shadow table to the SCV foundation. The entities will be split into the following tables:
			- SCV Master
			- SCV Person
			- SCV Address
			- SCV Contact
			
		Note: This script supports both FULL and DELTA loads into the SCV Foundation.
						
		SAP Australia, September 2017	
*/
PROCEDURE "osr.scv.foundation.db.Procedures::SP_MoveRowsToScvFoundation" (
	
	-- OUT o_return_code		NVARCHAR(10),
	-- OUT o_message			NVARCHAR(200)
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN

	DECLARE l_number_entities int default 0;
	DECLARE l_load_id int;
	DECLARE l_num_scv_created int default 0;
	DECLARE l_num_scv_updated int default 0;

	-- Declare exception hander for all SQL exceptions. 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		
		DROP TABLE #lt_entity_mapping;
		DROP TABLE #lt_scv_counters;
		
--		o_return_code :=  'ERROR';
--		o_message:=  'ERROR: ' || ::SQL_ERROR_CODE || ' ' || ::SQL_ERROR_MESSAGE;
	END;
	
	-- Temporary table to hold the SCV ID to Entity ID mapping
	CREATE LOCAL TEMPORARY TABLE #lt_entity_mapping (
            SCV_ID_SEQ_CONTROL NVARCHAR(10),
            SCV_ID INTEGER,
            ENTITY_ID NVARCHAR(20),
            MATCH_ROW_ID INTEGER
            --ACTION_RMS NVARCHAR(10)
    );
    
    CREATE LOCAL TEMPORARY TABLE #lt_scv_counters (
            SCV_ID_SEQ_CONTROL NVARCHAR(10),
            SCV_ID INTEGER
    );
    
    -- ### SCV Statistics ##########################################################################################################
    
    -- Get the latest load ID from history
    SELECT MAX(SCV_LOAD_ID) into l_load_id FROM "osr.scv.foundation.db.data::SCVFoundation.LoadHistory";
    IF :l_load_id is null OR :l_load_id <= 0 THEN
    	-- Nothing loaded, ID is 1
    	l_load_id = 1;
    ELSE
    	-- History exists, get new load ID
    	l_load_id = :l_load_id + 1;
    END IF;

	-- ### SCV master ##############################################################################################################
	BEGIN
		
		-- Auto promotions
		lt_auto_entity_ids =	SELECT ENTITY_ID, "osr.scv.foundation.db.data::SEQ_ScvMaster".NEXTVAL as SCV_ID 
								FROM (
									SELECT s.ENTITY_ID,  s."Match_ROW_ID" 
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" s
									INNER JOIN "osr.scv.foundation.db.data::MatchResultsReview.Promotions" a
									ON s.ENTITY_ID = a.ENTITY_ID
									WHERE a.Action = 'Auto-Promotion' 
									ORDER BY s.ENTITY_ID ASC, s.SOURCE_SYSTEM ASC, s.SYSTEM_ID ASC, s."Match_ROW_ID" ASC
								) GROUP BY ENTITY_ID;
						  
    	lt_auto_entity_ids_detail = SELECT 'AUTO', b.SCV_ID, a.ENTITY_ID, a."Match_ROW_ID" FROM (
    								SELECT s.ENTITY_ID,  s."Match_ROW_ID" , md.SCV_ID
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" s
									INNER JOIN "osr.scv.foundation.db.data::MatchResultsReview.Promotions" a
									ON s.ENTITY_ID = a.ENTITY_ID
									INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchDelta" md
									ON s."Match_ROW_ID" = md.MATCH_ROW_ID
									WHERE (a.Action = 'Auto-Promotion') AND md.SCV_ID = 0 
									ORDER BY s.ENTITY_ID ASC, s.SOURCE_SYSTEM ASC, s.SYSTEM_ID ASC, s."Match_ROW_ID" ASC
								) a
								LEFT OUTER JOIN :lt_auto_entity_ids b
								ON a.ENTITY_ID = b.ENTITY_ID;						  
	
		-- Insert into mapping table
		INSERT INTO #lt_entity_mapping (SELECT * FROM :lt_auto_entity_ids_detail);
		
		lt_reject_scv_ids = SELECT  "STD_PERSON_GN",  "STD_PERSON_GN2", "STD_PERSON_FN", "osr.scv.foundation.db.data::SEQ_ScvMaster".NEXTVAL as SCV_ID FROM (
						SELECT s.SYSTEM_ID,  s."Match_ROW_ID" ,
						COALESCE (bu."STD_PERSON_GN", cm."STD_PERSON_GN") AS "STD_PERSON_GN",
						COALESCE (bu."STD_PERSON_GN2", cm."STD_PERSON_GN2") AS "STD_PERSON_GN2",
						COALESCE (bu."STD_PERSON_FN", cm."STD_PERSON_FN") AS "STD_PERSON_FN"
						FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" s
						INNER JOIN "osr.scv.foundation.db.data::MatchResultsReview.Assessments" a
						ON s."Match_ROW_ID" = a.MATCH_ROW
							LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::BUT000" bu
							ON s."Cleanse_ROW_ID_BUT" = bu.Z_RUN_SEQ_ID
								LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" cm
								ON s."Cleanse_ROW_ID_TMR" = cm.Z_RUN_SEQ_ID
						WHERE a.Action = 'Reject'
				  ) GROUP BY  "STD_PERSON_GN",  "STD_PERSON_GN2", "STD_PERSON_FN";
	
    	lt_reject_scv_ids_detail = SELECT 'REJECT', b.SCV_ID, a.ENTITY_ID, a."Match_ROW_ID" FROM (
									SELECT s.ENTITY_ID, s.SYSTEM_ID,  s."Match_ROW_ID", 
									COALESCE (bu."STD_PERSON_GN", cm."STD_PERSON_GN") AS "STD_PERSON_GN",
									COALESCE (bu."STD_PERSON_GN2", cm."STD_PERSON_GN2") AS "STD_PERSON_GN2",
									COALESCE (bu."STD_PERSON_FN", cm."STD_PERSON_FN") AS "STD_PERSON_FN"
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" s
									INNER JOIN "osr.scv.foundation.db.data::MatchResultsReview.Assessments" a
									ON s."Match_ROW_ID" = a.MATCH_ROW
										LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::BUT000" bu
										ON s."Cleanse_ROW_ID_BUT" = bu.Z_RUN_SEQ_ID
											LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" cm
											ON s."Cleanse_ROW_ID_TMR" = cm.Z_RUN_SEQ_ID									
									WHERE a.Action = 'Reject'
									ORDER BY s.ENTITY_ID ASC, s.SOURCE_SYSTEM ASC, s.SYSTEM_ID ASC, s."Match_ROW_ID" ASC
								) a
								LEFT OUTER JOIN :lt_reject_scv_ids b
								ON a."STD_PERSON_GN" = b."STD_PERSON_GN" AND  
								a."STD_PERSON_GN2" = b."STD_PERSON_GN2" AND 
								a."STD_PERSON_FN" = b."STD_PERSON_FN";

		-- Insert into mapping table
		INSERT INTO #lt_entity_mapping (SELECT * FROM :lt_reject_scv_ids_detail);

		lt_accept_scv_ids = SELECT ENTITY_ID, "osr.scv.foundation.db.data::SEQ_ScvMaster".NEXTVAL as SCV_ID FROM (
							SELECT s.ENTITY_ID,  s."Match_ROW_ID" 
							FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" s
							INNER JOIN "osr.scv.foundation.db.data::MatchResultsReview.Assessments" a
							ON s."Match_ROW_ID" = a.MATCH_ROW
							WHERE a.Action = 'Accept'
							ORDER BY s.ENTITY_ID ASC, s.SOURCE_SYSTEM ASC, s.SYSTEM_ID ASC, s."Match_ROW_ID" ASC
						  ) GROUP BY ENTITY_ID;

		lt_accept_scv_ids_detail_zero = SELECT 'ACCEPT', b.SCV_ID, a.ENTITY_ID, a.MATCH_ROW_ID FROM (
									--SELECT 'ACCEPT', md.SCV_ID, s.ENTITY_ID, md.MATCH_ROW_ID 
									SELECT DISTINCT md.SCV_ID, ENTITY_ID, MATCH_ROW_ID
									FROM "osr.scv.foundation.db.data::MatchResultsReview.Assessments" s
									INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchDelta" md
									ON s.MATCH_ROW = md.MATCH_ROW_ID
									WHERE md.ACTION = 'Add' and s.ACTION = 'Accept' and md.SCV_ID = 0
									) a
									INNER JOIN :lt_accept_scv_ids b
									ON a.ENTITY_ID = b.ENTITY_ID;
									
		-- Insert into mapping table
		INSERT INTO #lt_entity_mapping (SELECT * FROM :lt_accept_scv_ids_detail_zero);
		
		-- Fill auto-promotions, rejects and accepts into SCV master table
		INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.Master" (
				SELECT DISTINCT SCV_ID, CURRENT_DATE, null,CURRENT_USER, null, null, null FROM (
				SELECT a.SCV_ID FROM #lt_entity_mapping a
				LEFT OUTER JOIN (SELECT MATCH_ROW_ID, ACTION_RMS FROM "osr.scv.foundation.db.data::MatchResults.MatchDelta") md
				ON a.MATCH_ROW_ID = md.MATCH_ROW_ID
				WHERE md.ACTION_RMS = 'Add'
				)
		);
		
		lt_accept_scv_ids_detail = SELECT 'ACCEPT', md.SCV_ID, s.ENTITY_ID, md.MATCH_ROW_ID 
									FROM "osr.scv.foundation.db.data::MatchResultsReview.Assessments" s
									INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchDelta" md
									ON s.MATCH_ROW = md.MATCH_ROW_ID
									WHERE md.ACTION = 'Add' and s.ACTION = 'Accept' 
									and md.SCV_ID > 0;
		
		-- Insert into mapping table
		INSERT INTO #lt_entity_mapping (SELECT * FROM :lt_accept_scv_ids_detail);
		
		lt_auto_scv_ids_detail =	SELECT 'ACCEPT', md.SCV_ID, s.ENTITY_ID, md.MATCH_ROW_ID 
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" s
									INNER JOIN "osr.scv.foundation.db.data::MatchResultsReview.Promotions" a
									ON s.ENTITY_ID = a.ENTITY_ID
									INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchDelta" md
									ON s."Match_ROW_ID" = md.MATCH_ROW_ID
									WHERE (a.Action = 'Auto-Promotion') AND md.SCV_ID > 0 
									ORDER BY s.ENTITY_ID ASC, s.SOURCE_SYSTEM ASC, s.SYSTEM_ID ASC, s."Match_ROW_ID" ASC;	
					
		INSERT INTO #lt_entity_mapping (SELECT * FROM :lt_auto_scv_ids_detail);
		
	END;
	
	-- ### SCV person ##############################################################################################################
	-- Aggregate match results for person domain (to remove BPs from RMS or any other source system with identical address records (address type XXX and LTX)
	
	lt_person_entities_rms = 
							SELECT SCV_ID, 
								   Z_RUN_SEQ_ID, ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO, SCV_NAME_FIRST, SCV_NAME_MIDDLE, SCV_NAME_LAST, BIRTH_DATE, DEATH_DATE,
								   STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, XBLCK,-- XDELE,
								   CHECKSUM,
								   STD_CHECKSUM
							FROM (
							SELECT ma.SCV_ID, mr.* FROM 
							(
								SELECT DISTINCT  b.Z_RUN_SEQ_ID ,a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, CASE WHEN SUBSTRING(to_nvarchar(b.VALID_FROM),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.VALID_FROM),1,8)) END  AS VALID_FROM, CASE WHEN SUBSTRING(to_nvarchar(b.VALID_TO),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.VALID_TO),1,8)) END  AS VALID_TO, b.NAME_FIRST AS SCV_NAME_FIRST, b.NAMEMIDDLE AS SCV_NAME_MIDDLE, b.NAME_LAST AS SCV_NAME_LAST, BIRTHDT as BIRTH_DATE, DEATHDT as DEATH_DATE,
								                HASH_SHA256(TO_BINARY(TO_VARCHAR(b.NAME_FIRST)), TO_BINARY(TO_VARCHAR(b.NAMEMIDDLE)), TO_BINARY(TO_VARCHAR(b.NAME_LAST)), TO_BINARY(TO_VARCHAR(b.BIRTHDT)), TO_BINARY(TO_VARCHAR(b.DEATHDT))) as CHECKSUM,
								                b.STD_PERSON_GN, b.STD_PERSON_GN2, b.STD_PERSON_FN,
								                HASH_SHA256(TO_BINARY(TO_VARCHAR(STD_PERSON_GN)), TO_BINARY(TO_VARCHAR(STD_PERSON_GN2)), TO_BINARY(TO_VARCHAR(STD_PERSON_FN)), TO_BINARY(TO_VARCHAR(b.BIRTHDT)), TO_BINARY(TO_VARCHAR(b.DEATHDT))) as STD_CHECKSUM,
								                "Match_ROW_ID",XBLCK-- XDELE
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
									LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::BUT000" b
									ON a."Cleanse_ROW_ID_BUT" = b."Z_RUN_SEQ_ID" 
									LEFT OUTER JOIN "osr.scv.foundation.db.data::MatchResults.MatchDelta" c
									ON a."Match_ROW_ID" = c.MATCH_ROW_ID 
									WHERE a.SOURCE_SYSTEM = 'RMS' AND c.ACTION_RMS = 'Add'
								--	WHERE a.SOURCE_SYSTEM = 'RMS'--AND a.SYSTEM_ID = '107249237' --AND ACTION_RMS = 'Add'
								ORDER BY a.ENTITY_ID
							) mr
							-- Add SCV ID
							INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mapping) ma
							ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID 
							-- Only adds a new record if it does not exist in the SCV group
							WHERE mr.CHECKSUM NOT IN (SELECT "CHECKSUM"
															FROM "osr.scv.foundation.db.data::SCVFoundation.PersonRms"
															WHERE SCV_ID = ma.SCV_ID)
							) 
							GROUP BY
							SCV_ID, 
							Z_RUN_SEQ_ID, ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO, SCV_NAME_FIRST, SCV_NAME_MIDDLE, SCV_NAME_LAST, BIRTH_DATE, DEATH_DATE,
							STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, XBLCK,--XDELE,
							CHECKSUM,
							STD_CHECKSUM
						 ;
						 
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.PersonRms" (SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO,Z_RUN_SEQ_ID, SCV_NAME_LAST, SCV_NAME_MIDDLE, SCV_NAME_FIRST, BIRTH_DATE, DEATH_DATE, CHECKSUM, STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, STD_CHECKSUM, XBLCK, :l_load_id--XDELE 
	FROM :lt_person_entities_rms);

	lt_person_entities_rms_update = 
							SELECT SCV_ID, 
								   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO, SCV_NAME_FIRST, SCV_NAME_MIDDLE, SCV_NAME_LAST, BIRTH_DATE, DEATH_DATE,
								   STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, XBLCK,--XDELE,
								   CHECKSUM,
								   STD_CHECKSUM
							FROM (
							SELECT ma.SCV_ID, mr.* FROM 
							(
								SELECT DISTINCT a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, CASE WHEN SUBSTRING(to_nvarchar(b.VALID_FROM),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.VALID_FROM),1,8)) END  AS VALID_FROM, CASE WHEN SUBSTRING(to_nvarchar(b.VALID_TO),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.VALID_TO),1,8)) END  AS VALID_TO, b.NAME_FIRST AS SCV_NAME_FIRST, b.NAMEMIDDLE AS SCV_NAME_MIDDLE, b.NAME_LAST AS SCV_NAME_LAST, BIRTHDT as BIRTH_DATE, DEATHDT as DEATH_DATE,
								                HASH_SHA256(TO_BINARY(TO_VARCHAR(b.NAME_FIRST)), TO_BINARY(TO_VARCHAR(b.NAMEMIDDLE)), TO_BINARY(TO_VARCHAR(b.NAME_LAST)), TO_BINARY(TO_VARCHAR(b.BIRTHDT)), TO_BINARY(TO_VARCHAR(b.DEATHDT))) as CHECKSUM,
								                b.STD_PERSON_GN, b.STD_PERSON_GN2, b.STD_PERSON_FN,
								                HASH_SHA256(TO_BINARY(TO_VARCHAR(STD_PERSON_GN)), TO_BINARY(TO_VARCHAR(STD_PERSON_GN2)), TO_BINARY(TO_VARCHAR(STD_PERSON_FN)), TO_BINARY(TO_VARCHAR(b.BIRTHDT)), TO_BINARY(TO_VARCHAR(b.DEATHDT))) as STD_CHECKSUM,
								                "Match_ROW_ID", XBLCK--XDELE
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
									LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::BUT000" b
									ON a."Cleanse_ROW_ID_BUT" = b."Z_RUN_SEQ_ID" 
									LEFT OUTER JOIN "osr.scv.foundation.db.data::MatchResults.MatchDelta" c
									ON a."Match_ROW_ID" = c.MATCH_ROW_ID 
									WHERE a.SOURCE_SYSTEM = 'RMS' AND c.ACTION_RMS = 'Existing'
								--	WHERE a.SOURCE_SYSTEM = 'RMS'--AND a.SYSTEM_ID = '107249237' --AND ACTION_RMS = 'Existing'
								ORDER BY a.ENTITY_ID
							) mr
							-- Add SCV ID
							INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mapping) ma
							ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID 
							) 
							GROUP BY
							SCV_ID, 
							ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO, SCV_NAME_FIRST, SCV_NAME_MIDDLE, SCV_NAME_LAST, BIRTH_DATE, DEATH_DATE,
							STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, XBLCK,--XDELE,
							CHECKSUM,
							STD_CHECKSUM
						 ;
	
	UPDATE "osr.scv.foundation.db.data::SCVFoundation.PersonRms" a SET  a.INACTIVE = b.XBLCK--b.XDELE
	FROM "osr.scv.foundation.db.data::SCVFoundation.PersonRms" a , :lt_person_entities_rms_update b
	WHERE a.SOURCE_ID = b.SYSTEM_ID;	
	
	lt_person_entities_tmr = 
								SELECT ma.SCV_ID, mr.* FROM 
								(
								SELECT 	zdate.Z_RUN_SEQ_ID, ms.ENTITY_ID as ENTITY_ID, ms.SOURCE_SYSTEM as SOURCE_SYSTEM, ms.SYSTEM_ID as SYSTEM_ID,  UPDATED_FROM, UPDATED_TO, UPDATE_AT2 as UPDATED_AT, zdate."FAMILY_ORG_NAME" as SCV_NAME_LAST, zdate."MIDDLE_NAME" as SCV_NAME_MIDDLE, zdate."FIRST_NAME"as SCV_NAME_FIRST,zdate."DATE_OF_BIRTH" as BIRTH_DATE, '' as DEATH_DATE,
									HASH_SHA256(TO_BINARY(TO_VARCHAR(zdate."FIRST_NAME")), TO_BINARY(TO_VARCHAR(zdate."MIDDLE_NAME")), TO_BINARY(TO_VARCHAR(zdate."FAMILY_ORG_NAME")), TO_BINARY(TO_VARCHAR(zdate."DATE_OF_BIRTH")), TO_BINARY(TO_VARCHAR(''))) as CHECKSUM,
									zdate.STD_PERSON_GN as STD_PERSON_GN, zdate.STD_PERSON_GN2 as STD_PERSON_GN2, zdate.STD_PERSON_FN as STD_PERSON_FN,
									HASH_SHA256(TO_BINARY(TO_VARCHAR(zdate.STD_PERSON_GN)), TO_BINARY(TO_VARCHAR(zdate.STD_PERSON_GN2)), TO_BINARY(TO_VARCHAR(zdate. STD_PERSON_FN)), TO_BINARY(TO_VARCHAR(zdate."DATE_OF_BIRTH")), TO_BINARY(TO_VARCHAR(''))) as STD_CHECKSUM,
									ms."Match_ROW_ID" as MATCH_ROW_ID
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" ms
									INNER JOIN
											(	SELECT MAX (m.Z_RUN_SEQ_ID) AS Z_RUN_SEQ_ID , m."CUSTOMER_REF",m."FIRST_NAME",m."MIDDLE_NAME",m."FAMILY_ORG_NAME",m."DATE_OF_BIRTH",m.STD_PERSON_GN, m.STD_PERSON_GN2, m.STD_PERSON_FN, UPDATED_FROM, UPDATED_TO, UPDATE_AT2
												FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" t
												INNER JOIN (
															SELECT a.Z_RUN_SEQ_ID, a."CUSTOMER_REF",a."FIRST_NAME",a."MIDDLE_NAME",a."FAMILY_ORG_NAME",a."DATE_OF_BIRTH",a.STD_PERSON_GN, a.STD_PERSON_GN2, a.STD_PERSON_FN, UPDATED_FROM, UPDATED_TO, UPDATE_AT2
															FROM "osr.scv.foundation.db.synonyms::TMR_CustMain" a
															LEFT OUTER JOIN(
																			 SELECT "Z_RUN_SEQ_ID", "CUSTOMER_REF","FIRST_NAME","MIDDLE_NAME","FAMILY_ORG_NAME","DATE_OF_BIRTH",STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, 
																				UPDATED_FROM, UPDATE_AT2,
																				COALESCE (a.UPDATED_TO, b.UPDATED_TO) AS UPDATED_TO
																				FROM (	
																					SELECT 
																					"CUSTOMER_REF","FIRST_NAME","MIDDLE_NAME","FAMILY_ORG_NAME","DATE_OF_BIRTH",  STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN,
																					MAX ("Z_RUN_SEQ_ID") AS "Z_RUN_SEQ_ID",MAX (LAST_CONTACT_UPDATE_DT) AS UPDATE_AT2,
																					CASE WHEN SUBSTRING (MIN ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-01-01' ELSE '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-07-01' END AS UPDATED_FROM,
																					CASE WHEN SUBSTRING (MAX ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-06-30' ELSE '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-12-31' END AS UPDATED_TO
																					FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
																					
																					GROUP BY "CUSTOMER_REF","FIRST_NAME","MIDDLE_NAME","FAMILY_ORG_NAME","DATE_OF_BIRTH",  STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN
																				) b
																				LEFT OUTER JOIN (
																					            SELECT 
																					            MAX ("Z_RUN_SEQ_ID") as MAXID,
																					            '9999-12-31' AS UPDATED_TO
																					   --         MAX (LAST_CONTACT_UPDATE_DT) AS UPDATE_AT2
																					            FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
									-- DELETE AFTER TESTING
									--												            WHERE NAME = 'TMR_CUST_MAIN_FY1602.txt'												            
																					            --WHERE CUSTOMER_REF = '100762476' and DATE_OF_BIRTH != '1900-01-01'
																					            GROUP BY "CUSTOMER_REF"
																					            ) a
																								ON "Z_RUN_SEQ_ID" = a."MAXID"
																				--WHERE CUSTOMER_REF = '101188623' and DATE_OF_BIRTH != '1900-01-01'
																) f
																ON a."CUSTOMER_REF" = f."CUSTOMER_REF" AND 
																a."FIRST_NAME"		= f."FIRST_NAME" AND 
																a."MIDDLE_NAME" 	= f."MIDDLE_NAME" AND 
																a."FAMILY_ORG_NAME" = f."FAMILY_ORG_NAME" AND 
																a."DATE_OF_BIRTH"	= f."DATE_OF_BIRTH" AND 
																a.STD_PERSON_GN 	= f."STD_PERSON_GN" AND 
																a.STD_PERSON_GN2	= f."STD_PERSON_GN2" AND 
																a.STD_PERSON_FN 	= f."STD_PERSON_FN"  
					-- DELETE AFTER TESTING
					--								            WHERE NAME = 'TMR_CUST_MAIN_FY1602.txt'											
														) m
												ON t."Cleanse_ROW_ID_TMR" = m.Z_RUN_SEQ_ID
												WHERE m.DATE_OF_BIRTH != '1900-01-01'
												--	WHERE m.CUSTOMER_REF = '101188623' and m.DATE_OF_BIRTH != '1900-01-01'
												--	WHERE m.CUSTOMER_REF = '100762476' and m.DATE_OF_BIRTH != '1900-01-01'
													GROUP BY m."CUSTOMER_REF",m."FIRST_NAME",m."MIDDLE_NAME",m."FAMILY_ORG_NAME",m."DATE_OF_BIRTH",m.STD_PERSON_GN, m.STD_PERSON_GN2, m.STD_PERSON_FN, UPDATED_FROM, UPDATED_TO, UPDATE_AT2
			
									) AS zdate
									ON zdate."Z_RUN_SEQ_ID" = ms."Cleanse_ROW_ID_TMR" 
								
								) mr
							
								
									-- Add SCV ID
									INNER JOIN #lt_entity_mapping ma
									ON mr.ENTITY_ID = ma.ENTITY_ID AND mr.MATCH_ROW_ID  = ma.MATCH_ROW_ID
									WHERE mr.CHECKSUM NOT IN (SELECT "CHECKSUM"
															FROM "osr.scv.foundation.db.data::SCVFoundation.PersonTmr"
															WHERE SCV_ID = ma.SCV_ID)
								 ;

INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.PersonTmr" (SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_FROM, UPDATED_TO ,Z_RUN_SEQ_ID, UPDATED_AT, SCV_NAME_LAST, SCV_NAME_MIDDLE, SCV_NAME_FIRST, BIRTH_DATE, DEATH_DATE, CHECKSUM, STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, STD_CHECKSUM, :l_load_id FROM :lt_person_entities_tmr
	GROUP BY Z_RUN_SEQ_ID, SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_FROM ,UPDATED_TO ,UPDATED_AT, SCV_NAME_LAST, SCV_NAME_MIDDLE, SCV_NAME_FIRST, BIRTH_DATE, DEATH_DATE, CHECKSUM, STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN, STD_CHECKSUM);						 


	
/*
Calculate the correct Valid To and From dates and update the SCV foudation with the correct values.
*/

lt_person_entities_date_tmr = 
							SELECT f.SCV_ID, "Z_RUN_SEQ_ID", "CUSTOMER_REF",b."FIRST_NAME",b."MIDDLE_NAME","FAMILY_ORG_NAME","DATE_OF_BIRTH",b.STD_PERSON_GN, b.STD_PERSON_GN2, b.STD_PERSON_FN, 
							UPDATED_FROM, UPDATE_AT2,
							COALESCE (a.UPDATED_TO, b.UPDATED_TO) AS UPDATED_TO
							FROM (	
								SELECT 
								"CUSTOMER_REF","FIRST_NAME","MIDDLE_NAME","FAMILY_ORG_NAME","DATE_OF_BIRTH",  STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN,
								MAX ("Z_RUN_SEQ_ID") AS "Z_RUN_SEQ_ID",MAX (LAST_CONTACT_UPDATE_DT) AS UPDATE_AT2,
								CASE WHEN SUBSTRING (MIN ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-01-01' ELSE '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-07-01' END AS UPDATED_FROM,
								CASE WHEN SUBSTRING (MAX ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-06-30' ELSE '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-12-31' END AS UPDATED_TO
								FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
								
								GROUP BY "CUSTOMER_REF","FIRST_NAME","MIDDLE_NAME","FAMILY_ORG_NAME","DATE_OF_BIRTH",  STD_PERSON_GN, STD_PERSON_GN2, STD_PERSON_FN
							) b
							LEFT OUTER JOIN (
								            SELECT 
								            MAX ("Z_RUN_SEQ_ID") as MAXID,
								            '9999-12-31' AS UPDATED_TO
								   --         MAX (LAST_CONTACT_UPDATE_DT) AS UPDATE_AT2
								            FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
-- DELETE AFTER TESTING
--								            WHERE NAME = 'TMR_CUST_MAIN_FY1602.txt'								            
								            --WHERE CUSTOMER_REF = '100762476' and DATE_OF_BIRTH != '1900-01-01'
								            GROUP BY "CUSTOMER_REF"
								            ) a
											ON "Z_RUN_SEQ_ID" = a."MAXID"
							INNER JOIN "osr.scv.foundation.db.data::SCVFoundation.PersonTmr" f
							ON 
							b."CUSTOMER_REF" = f."SOURCE_ID" AND 
							b."FIRST_NAME"		= f."FIRST_NAME" AND 
							b."MIDDLE_NAME" 	= f."MIDDLE_NAME" AND 
							b."FAMILY_ORG_NAME" = f."LAST_NAME" AND 
							b."DATE_OF_BIRTH"	= f."BIRTH_DATE" AND 
							b.STD_PERSON_GN 	= f."STD_PERSON_GN" AND 
							b.STD_PERSON_GN2	= f."STD_PERSON_GN2" AND 
							b.STD_PERSON_FN 	= f."STD_PERSON_FN"  
-- DELETE AFTER TESTING
--												            						
							WHERE DATE_OF_BIRTH != '1900-01-01'; --and NAME = 'TMR_CUST_MAIN_FY1602.txt;
							
		UPDATE "osr.scv.foundation.db.data::SCVFoundation.PersonTmr" a 
		SET 	a.VALID_TO = b.UPDATED_TO,
				a.VALID_FROM = b.UPDATED_FROM
		FROM "osr.scv.foundation.db.data::SCVFoundation.PersonTmr" a , :lt_person_entities_date_tmr b
		WHERE 
		a."SCV_ID" = b."SCV_ID" AND
	--	b."SOURCE" = 'TMR' AND
		a."SOURCE_ID" =  b."CUSTOMER_REF" AND
		a."UPDATED_AT" = b.UPDATE_AT2 AND
		a."LAST_NAME" = b."FAMILY_ORG_NAME" AND
		a."MIDDLE_NAME" = b."MIDDLE_NAME" AND
		a."FIRST_NAME" = b."FIRST_NAME" AND
		a."BIRTH_DATE" = b."DATE_OF_BIRTH" AND
		a.STD_PERSON_GN = b."STD_PERSON_GN" AND 
		a.STD_PERSON_GN2 = b."STD_PERSON_GN2" AND 
		a.STD_PERSON_FN = b."STD_PERSON_FN"  
	;



	
						
	-- TODO: Add master data, most importantly add VALID_FROM and VALID_TO for records with same SCV_ID, SOURCE_SYSTEM and SYSTEM_ID
	-- Question: Do we need to aggregate on first name, middle name and last name instead? Would we lose any information, we don't know what exactly triggered the duplication
    --           of records?
	
	-- ### SCV address ##############################################################################################################
	
		lt_address_entities_rms = 
								SELECT ADDRESS_RMS_ID, SCV_ID,
									   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, ADDRNUMBER, ADR_KIND, VALID_FROM, VALID_TO, CITY1, POST_CODE1, STREET, HOUSE_NUM1, COUNTRY, REGION, PERS_ADDR, MC_CITY1, MC_STREET, TIME_ZONE, ADRC_UUID,
									   CHECKSUM,
									   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS,
	                				   STD_ADDR_PRIM_NAME_FULL, STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	                				   ADDR_LATITUDE, ADDR_LONGITUDE,
	                				   STD_CHECKSUM
								FROM (
								SELECT ma.SCV_ID, mr.* FROM 
								(
									SELECT mk.*, lt.ADDR_LATITUDE, lt.ADDR_LONGITUDE FROM 
													(SELECT DISTINCT  b.Z_RUN_SEQ_ID||'|'||c.Z_RUN_SEQ_ID as ADDRESS_RMS_ID, a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.ADDRNUMBER, b.ADR_KIND, CASE WHEN SUBSTRING(to_nvarchar(b.VALID_FROM),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.VALID_FROM),1,8)) END  AS VALID_FROM, CASE WHEN SUBSTRING(to_nvarchar(b.VALID_TO),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.VALID_TO),1,8)) END  AS VALID_TO, c.CITY1, c.POST_CODE1, c.STREET, c.HOUSE_NUM1, c.COUNTRY, c.REGION, c.PERS_ADDR, c.MC_CITY1, c.MC_STREET, c.TIME_ZONE, c.ADRC_UUID, 
	                							    -- Create checksum for RMS MD fields for domain ADDRESS
    												HASH_SHA256(TO_BINARY(TO_VARCHAR(c.CITY1)), TO_BINARY(TO_VARCHAR(c.POST_CODE1)), TO_BINARY(TO_VARCHAR(c.STREET)), TO_BINARY(TO_VARCHAR(c.HOUSE_NUM1)), TO_BINARY(TO_VARCHAR(c.COUNTRY)),
    												TO_BINARY(TO_VARCHAR(c.REGION)), TO_BINARY(TO_VARCHAR(c.PERS_ADDR)), TO_BINARY(TO_VARCHAR(c.MC_CITY1)), TO_BINARY(TO_VARCHAR(c.STREET)), TO_BINARY(TO_VARCHAR(c.TIME_ZONE)), TO_BINARY(TO_VARCHAR(c.ADRC_UUID))) as CHECKSUM,
	                							    STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS,
	                								STD_ADDR_PRIM_NAME_FULL, STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	                								--ADDR_LATITUDE, ADDR_LONGITUDE,  
	                								-- Create checksum for RMS STD MD fields for domain ADDRESS
	                								HASH_SHA256(TO_BINARY(TO_VARCHAR(c.STD_ADDR_COUNTRY_2CHAR)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_COUNTRY_NAME)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_BUILDING_NAME)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_ADDRESS_DELIVERY)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_PRIM_ADDRESS)),
    												TO_BINARY(TO_VARCHAR(c.STD_ADDR_PRIM_NAME_FULL)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_PRIM_NAME)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_PRIM_TYPE)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_PRIM_NUMBER)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_REGION)), TO_BINARY(TO_VARCHAR(c.STD_ADDR_POSTCODE1))) as STD_CHECKSUM,
    												"Match_ROW_ID"
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
									LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::ADRC" c
									ON a."Cleanse_ROW_ID_ADRC" = c.Z_RUN_SEQ_ID
									LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::BUT021_FS" b
									ON c.ADDRNUMBER = b.ADDRNUMBER
									LEFT OUTER JOIN "osr.scv.foundation.db.data::MatchResults.MatchDelta" e
									ON a."Match_ROW_ID" = e.MATCH_ROW_ID 
								--	WHERE e.ACTION_RMS = 'Add'
--									WHERE a.SOURCE_SYSTEM = 'RMS' AND e.ACTION_RMS = 'Add' AND b.PARTNER = '0001639368'
									) mk
									LEFT OUTER JOIN 
													(SELECT ADDRNUMBER, 
															(SELECT ADDR_LATITUDE FROM "osr.scv.foundation.db.synonyms::ADRC" WHERE MAX(c.Z_RUN_SEQ_ID) = Z_RUN_SEQ_ID) as ADDR_LATITUDE,
															(SELECT ADDR_LONGITUDE FROM "osr.scv.foundation.db.synonyms::ADRC" WHERE MAX(c.Z_RUN_SEQ_ID) = Z_RUN_SEQ_ID) as ADDR_LONGITUDE 
													FROM "osr.scv.foundation.db.synonyms::ADRC" c
													GROUP BY ADDRNUMBER) lt
									ON	mk.ADDRNUMBER = lt.ADDRNUMBER			
									WHERE mk.SOURCE_SYSTEM = 'RMS'  
									--AND mk.SYSTEM_ID = '0001639368'	
								--	WHERE a.SOURCE_SYSTEM = 'RMS'
								) mr
							-- Add SCV ID
							INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mapping) ma
							ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID
							WHERE mr.CHECKSUM NOT IN (SELECT "CHECKSUM"
															FROM "osr.scv.foundation.db.data::SCVFoundation.AddressRms"
															WHERE SCV_ID = ma.SCV_ID)
							) 
							GROUP BY ADDRESS_RMS_ID, SCV_ID,
									   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, ADDRNUMBER, ADR_KIND, VALID_FROM, VALID_TO, CITY1, POST_CODE1, STREET, HOUSE_NUM1, COUNTRY, REGION, PERS_ADDR, MC_CITY1, MC_STREET, TIME_ZONE, ADRC_UUID,
									   CHECKSUM,
									   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS,
	                				   STD_ADDR_PRIM_NAME_FULL, STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
	                				   ADDR_LATITUDE, ADDR_LONGITUDE,
	                				   STD_CHECKSUM 
						 ;
	
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.AddressRms" (
																		SELECT  SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, ADDRNUMBER, ADR_KIND, VALID_FROM, VALID_TO, ADDRESS_RMS_ID, CITY1, POST_CODE1, STREET, HOUSE_NUM1, COUNTRY, REGION, PERS_ADDR, MC_CITY1, MC_STREET, TIME_ZONE, ADRC_UUID, CHECKSUM, 
																		        STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL, STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, 
																		        STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1, ADDR_LATITUDE, ADDR_LONGITUDE, STD_CHECKSUM, :l_load_id
																		FROM :lt_address_entities_rms
																	  )
	;	
	
	
	


		lt_address_entities_tmr =
		
							SELECT ma.SCV_ID, mr.* FROM 
								(
								SELECT 	zdate.Z_RUN_SEQ_ID, ms.ENTITY_ID, ms.SOURCE_SYSTEM, ms.SYSTEM_ID,  UPDATED_FROM, UPDATED_TO, UPDATE_AT2 as UPDATED_AT, zdate.FLOOR, zdate.UNIT, zdate.BUILDING_NAME, zdate.STREET_NO, zdate.STREET_NAME, zdate.STREET_TYPE, zdate.STREET_SUFFIX, zdate.SUBURB, zdate.POSTCODE, zdate.STATE, zdate.COUNTRY,
									HASH_SHA256(TO_BINARY(TO_VARCHAR(zdate.FLOOR)), TO_BINARY(TO_VARCHAR(zdate.UNIT)), TO_BINARY(TO_VARCHAR(zdate.BUILDING_NAME)), TO_BINARY(TO_VARCHAR(zdate.STREET_NO)), TO_BINARY(TO_VARCHAR(zdate.STREET_NAME)),
    								   TO_BINARY(TO_VARCHAR(zdate.STREET_TYPE)), TO_BINARY(TO_VARCHAR(zdate.STREET_SUFFIX)), TO_BINARY(TO_VARCHAR(zdate.SUBURB)), TO_BINARY(TO_VARCHAR(zdate.POSTCODE)), TO_BINARY(TO_VARCHAR(zdate.STATE)), TO_BINARY(TO_VARCHAR(zdate.COUNTRY))
    								   ) as CHECKSUM,
									zdate.STD_ADDR_COUNTRY_2CHAR, zdate.STD_ADDR_COUNTRY_NAME, zdate.STD_ADDR_BUILDING_NAME, zdate.STD_ADDR_ADDRESS_DELIVERY, zdate.STD_ADDR_PRIM_ADDRESS, zdate.STD_ADDR_PRIM_NAME_FULL,
	    	            			zdate.STD_ADDR_PRIM_NAME, zdate.STD_ADDR_PRIM_TYPE, zdate.STD_ADDR_PRIM_NUMBER, zdate.STD_ADDR_LOCALITY, zdate.STD_ADDR_REGION, zdate.STD_ADDR_POSTCODE1, ADDR_LATITUDE2 as ADDR_LATITUDE, ADDR_LONGITUDE2 as ADDR_LONGITUDE,
									HASH_SHA256(TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_COUNTRY_2CHAR)), TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_COUNTRY_NAME)), TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_BUILDING_NAME)), TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_ADDRESS_DELIVERY)), TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_PRIM_ADDRESS)),
	    							   TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_PRIM_NAME_FULL)), TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_PRIM_NAME)), TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_PRIM_TYPE)), TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_PRIM_NUMBER)), TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_LOCALITY)), TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_REGION)), TO_BINARY(TO_VARCHAR(zdate.STD_ADDR_POSTCODE1))) as STD_CHECKSUM,
									ms."Match_ROW_ID" as MATCH_ROW_ID
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" ms
									INNER JOIN
									(	SELECT MAX (m.Z_RUN_SEQ_ID) AS Z_RUN_SEQ_ID , m."CUSTOMER_REF",m."FLOOR", m.UNIT, m.BUILDING_NAME, m.STREET_NO, m.STREET_NAME, m.STREET_TYPE, m.STREET_SUFFIX, m.SUBURB, m.POSTCODE, m.STATE, m.COUNTRY,
											    m.STD_ADDR_COUNTRY_2CHAR, m.STD_ADDR_COUNTRY_NAME, m.STD_ADDR_BUILDING_NAME, m.STD_ADDR_ADDRESS_DELIVERY, m.STD_ADDR_PRIM_ADDRESS, m.STD_ADDR_PRIM_NAME_FULL,
											    m.STD_ADDR_PRIM_NAME, m.STD_ADDR_PRIM_TYPE, m.STD_ADDR_PRIM_NUMBER, m.STD_ADDR_LOCALITY, m.STD_ADDR_REGION, m.STD_ADDR_POSTCODE1, UPDATED_FROM, UPDATED_TO, UPDATE_AT2, ADDR_LATITUDE2, ADDR_LONGITUDE2
										FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" t
										INNER JOIN (
										SELECT a."Z_RUN_SEQ_ID", a."CUSTOMER_REF",a."FLOOR", a.UNIT, a.BUILDING_NAME, a.STREET_NO, a.STREET_NAME, a.STREET_TYPE, a.STREET_SUFFIX, a.SUBURB, a.POSTCODE, a.STATE, a.COUNTRY,
											    a.STD_ADDR_COUNTRY_2CHAR, a.STD_ADDR_COUNTRY_NAME, a.STD_ADDR_BUILDING_NAME, a.STD_ADDR_ADDRESS_DELIVERY, a.STD_ADDR_PRIM_ADDRESS, a.STD_ADDR_PRIM_NAME_FULL,
											    a.STD_ADDR_PRIM_NAME, a.STD_ADDR_PRIM_TYPE, a.STD_ADDR_PRIM_NUMBER, a.STD_ADDR_LOCALITY, a.STD_ADDR_REGION, a.STD_ADDR_POSTCODE1, UPDATED_FROM, UPDATED_TO, UPDATE_AT2, ADDR_LATITUDE2, ADDR_LONGITUDE2
										FROM "osr.scv.foundation.db.synonyms::TMR_CustMain" a
										LEFT OUTER JOIN(
										 SELECT "Z_RUN_SEQ_ID", "CUSTOMER_REF","FLOOR", UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
											    STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
											    STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1, 
											UPDATED_FROM, UPDATE_AT2, ADDR_LATITUDE2, ADDR_LONGITUDE2,
											COALESCE (a.UPDATED_TO, b.UPDATED_TO) AS UPDATED_TO
											FROM (	
												SELECT 
												"CUSTOMER_REF", "FLOOR", UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
									    		STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
									    		STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
												MAX ("Z_RUN_SEQ_ID") AS "Z_RUN_SEQ_ID",MAX (LAST_CONTACT_UPDATE_DT) AS UPDATE_AT2, MAX(ADDR_LATITUDE) AS ADDR_LATITUDE2,MAX(ADDR_LONGITUDE) AS ADDR_LONGITUDE2,
												CASE WHEN SUBSTRING (MIN ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-01-01' ELSE '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-07-01' END AS UPDATED_FROM,
												CASE WHEN SUBSTRING (MAX ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-06-30' ELSE '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-12-31' END AS UPDATED_TO
												FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
												
												GROUP BY "CUSTOMER_REF", "FLOOR", UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
													    STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
													    STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1
											) b
											LEFT OUTER JOIN (
												            SELECT 
												            MAX ("Z_RUN_SEQ_ID") as MAXID,
												            '9999-12-31' AS UPDATED_TO
												            --MAX (LAST_CONTACT_UPDATE_DT) AS UPDATE_AT2,
												            --MAX(ADDR_LATITUDE) AS ADDR_LATITUDE2,
												            --MAX(ADDR_LONGITUDE) AS ADDR_LONGITUDE2
												            FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
-- DELETE AFTER TESTING
--												            WHERE NAME = 'TMR_CUST_MAIN_FY1602.txt'												            
												            --WHERE CUSTOMER_REF = '100762476' and DATE_OF_BIRTH != '1900-01-01'
												            GROUP BY "CUSTOMER_REF"
												            ) a
															ON "Z_RUN_SEQ_ID" = a."MAXID"
										--	WHERE CUSTOMER_REF = '101386631' --and DATE_OF_BIRTH != '1900-01-01'
											) f
											ON 
											a."CUSTOMER_REF" = f."CUSTOMER_REF" AND
											a."FLOOR" = f."FLOOR"  AND 
											a.UNIT = f."UNIT"  AND  
											a.BUILDING_NAME = f."BUILDING_NAME"  AND  
											a.STREET_NO = f."STREET_NO"  AND  
											a.STREET_NAME = f."STREET_NAME"  AND  
											a.STREET_TYPE = f."STREET_TYPE"  AND  
											a.STREET_SUFFIX = f."STREET_SUFFIX"  AND 
											a.SUBURB = f."SUBURB"  AND 
											a.POSTCODE = f."POSTCODE"  AND 
											a.STATE = f."STATE"  AND  
											a.COUNTRY = f."COUNTRY"  AND 
											a.STD_ADDR_COUNTRY_2CHAR = f."STD_ADDR_COUNTRY_2CHAR"  AND  
											a.STD_ADDR_COUNTRY_NAME = f."STD_ADDR_COUNTRY_NAME"  AND  
											a.STD_ADDR_BUILDING_NAME = f."STD_ADDR_BUILDING_NAME"  AND 
											a.STD_ADDR_ADDRESS_DELIVERY = f."STD_ADDR_ADDRESS_DELIVERY"  AND 
											a.STD_ADDR_PRIM_ADDRESS = f."STD_ADDR_PRIM_ADDRESS"  AND 
											a.STD_ADDR_PRIM_NAME_FULL = f."STD_ADDR_PRIM_NAME_FULL"  AND 
											a.STD_ADDR_PRIM_NAME = f."STD_ADDR_PRIM_NAME"  AND 
											a.STD_ADDR_PRIM_TYPE = f."STD_ADDR_PRIM_TYPE"  AND 
											a.STD_ADDR_PRIM_NUMBER = f."STD_ADDR_PRIM_NUMBER"  AND 
											a.STD_ADDR_LOCALITY = f."STD_ADDR_LOCALITY"  AND 
											a.STD_ADDR_REGION = f."STD_ADDR_REGION"  AND 
											a.STD_ADDR_POSTCODE1 = f."STD_ADDR_POSTCODE1" 
-- DELETE AFTER TESTING
--							            WHERE NAME = 'TMR_CUST_MAIN_FY1602.txt'
										) m
										ON t."Cleanse_ROW_ID_TMR" = m.Z_RUN_SEQ_ID
										--WHERE m.DATE_OF_BIRTH != '1900-01-01'
										--	WHERE m.CUSTOMER_REF = '101188623' and m.DATE_OF_BIRTH != '1900-01-01'
										--	WHERE m.CUSTOMER_REF = '100762476' and m.DATE_OF_BIRTH != '1900-01-01'
											GROUP BY m."CUSTOMER_REF", m."FLOOR", m.UNIT, m.BUILDING_NAME, m.STREET_NO, m.STREET_NAME, m.STREET_TYPE, m.STREET_SUFFIX, m.SUBURB, m.POSTCODE, m.STATE, m.COUNTRY,
													    m.STD_ADDR_COUNTRY_2CHAR, m.STD_ADDR_COUNTRY_NAME, m.STD_ADDR_BUILDING_NAME, m.STD_ADDR_ADDRESS_DELIVERY, m.STD_ADDR_PRIM_ADDRESS, m.STD_ADDR_PRIM_NAME_FULL,
													    m.STD_ADDR_PRIM_NAME, m.STD_ADDR_PRIM_TYPE, m.STD_ADDR_PRIM_NUMBER, m.STD_ADDR_LOCALITY, m.STD_ADDR_REGION, m.STD_ADDR_POSTCODE1, UPDATED_FROM, UPDATED_TO, UPDATE_AT2, ADDR_LATITUDE2, ADDR_LONGITUDE2
									
										
									) AS zdate
									ON zdate."Z_RUN_SEQ_ID" = ms."Cleanse_ROW_ID_TMR" 
							) mr
									-- Add SCV ID
									INNER JOIN #lt_entity_mapping ma
									ON mr.ENTITY_ID = ma.ENTITY_ID AND mr.MATCH_ROW_ID  = ma.MATCH_ROW_ID
									-- Only adds a new record if it does not exist in the SCV group
									WHERE mr.CHECKSUM NOT IN (SELECT "CHECKSUM"
															FROM "osr.scv.foundation.db.data::SCVFoundation.AddressTmr"
															WHERE SCV_ID = ma.SCV_ID)
								 ;
								 
	 	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.AddressTmr" (SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, '', UPDATED_FROM, UPDATED_TO, Z_RUN_SEQ_ID, FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE , STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY, '','','','', CHECKSUM,
                                                   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
				                                   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
				                                   ADDR_LATITUDE, ADDR_LONGITUDE, STD_CHECKSUM, UPDATED_AT, :l_load_id
											FROM :lt_address_entities_tmr
											GROUP BY Z_RUN_SEQ_ID,SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, '', UPDATED_FROM, UPDATED_TO, FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE , STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY, '','','','', CHECKSUM,
                                                   STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
				                                   STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
				                                   ADDR_LATITUDE, ADDR_LONGITUDE, STD_CHECKSUM, UPDATED_AT);			


/*
Calculate the correct Valid To and From dates and update the SCV foudation with the correct values.
*/

lt_address_entities_date_tmr = 
								SELECT f.SCV_ID, "Z_RUN_SEQ_ID", "CUSTOMER_REF",b."FLOOR", b.UNIT, b.BUILDING_NAME, b.STREET_NO, b.STREET_NAME, b.STREET_TYPE, b.STREET_SUFFIX, b.SUBURB, b.POSTCODE, b.STATE, b.COUNTRY,
											    b.STD_ADDR_COUNTRY_2CHAR, b.STD_ADDR_COUNTRY_NAME, b.STD_ADDR_BUILDING_NAME, b.STD_ADDR_ADDRESS_DELIVERY, b.STD_ADDR_PRIM_ADDRESS, b.STD_ADDR_PRIM_NAME_FULL,
											    b.STD_ADDR_PRIM_NAME, b.STD_ADDR_PRIM_TYPE, b.STD_ADDR_PRIM_NUMBER, b.STD_ADDR_LOCALITY, b.STD_ADDR_REGION, b.STD_ADDR_POSTCODE1, 
											 UPDATE_AT2, ADDR_LATITUDE2, ADDR_LONGITUDE2, UPDATED_FROM,
											COALESCE (a.UPDATED_TO, b.UPDATED_TO) AS UPDATED_TO
											FROM (	
												SELECT 
												"CUSTOMER_REF", "FLOOR", UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
									    		STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
									    		STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1,
												MAX ("Z_RUN_SEQ_ID") AS "Z_RUN_SEQ_ID",MAX (LAST_CONTACT_UPDATE_DT) AS UPDATE_AT2, MAX(ADDR_LATITUDE) AS ADDR_LATITUDE2,MAX(ADDR_LONGITUDE) AS ADDR_LONGITUDE2,
												CASE WHEN SUBSTRING (MIN ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-01-01' ELSE '20'||SUBSTRING (MIN ("NAME"), 17,2)||'-07-01' END AS UPDATED_FROM,
												CASE WHEN SUBSTRING (MAX ("NAME"), 19,2) = '01' THEN '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-06-30' ELSE '20'||SUBSTRING (MAX ("NAME"), 17,2)||'-12-31' END AS UPDATED_TO
												FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
												
												GROUP BY "CUSTOMER_REF", "FLOOR", UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
													    STD_ADDR_COUNTRY_2CHAR, STD_ADDR_COUNTRY_NAME, STD_ADDR_BUILDING_NAME, STD_ADDR_ADDRESS_DELIVERY, STD_ADDR_PRIM_ADDRESS, STD_ADDR_PRIM_NAME_FULL,
													    STD_ADDR_PRIM_NAME, STD_ADDR_PRIM_TYPE, STD_ADDR_PRIM_NUMBER, STD_ADDR_LOCALITY, STD_ADDR_REGION, STD_ADDR_POSTCODE1
											) b
											LEFT OUTER JOIN (
												            SELECT 
												            MAX ("Z_RUN_SEQ_ID") as MAXID,
												            '9999-12-31' AS UPDATED_TO
												            --MAX (LAST_CONTACT_UPDATE_DT) AS UPDATE_AT2,
												            --MAX(ADDR_LATITUDE) AS ADDR_LATITUDE2,
												            --MAX(ADDR_LONGITUDE) AS ADDR_LONGITUDE2
												            FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
-- DELETE AFTER TESTING
--															WHERE NAME = 'TMR_CUST_MAIN_FY1602.txt'
												            --WHERE CUSTOMER_REF = '100762476' and DATE_OF_BIRTH != '1900-01-01'
												            GROUP BY "CUSTOMER_REF"
												            ) a
															ON "Z_RUN_SEQ_ID" = a."MAXID"
										--	WHERE CUSTOMER_REF = '62183274' --and DATE_OF_BIRTH != '1900-01-01'
											INNER JOIN "osr.scv.foundation.db.data::SCVFoundation.AddressTmr" f
											ON 
											b."CUSTOMER_REF" = f."SOURCE_ID" AND
											b."FLOOR" = f."FLOOR"  AND 
											b.UNIT = f."UNIT"  AND  
											b.BUILDING_NAME = f."BUILDING_NAME"  AND  
											b.STREET_NO = f."STREET_NO"  AND  
											b.STREET_NAME = f."STREET_NAME"  AND  
											b.STREET_TYPE = f."STREET_TYPE"  AND  
											b.STREET_SUFFIX = f."STREET_SUFFIX"  AND 
											b.SUBURB = f."SUBURB"  AND 
											b.POSTCODE = f."POSTCODE"  AND 
											b.STATE = f."STATE"  AND  
											b.COUNTRY = f."COUNTRY"  AND 
											b.STD_ADDR_COUNTRY_2CHAR = f."STD_ADDR_COUNTRY_2CHAR"  AND  
											b.STD_ADDR_COUNTRY_NAME = f."STD_ADDR_COUNTRY_NAME"  AND  
											b.STD_ADDR_BUILDING_NAME = f."STD_ADDR_BUILDING_NAME"  AND 
											b.STD_ADDR_ADDRESS_DELIVERY = f."STD_ADDR_ADDRESS_DELIVERY"  AND 
											b.STD_ADDR_PRIM_ADDRESS = f."STD_ADDR_PRIM_ADDRESS"  AND 
											b.STD_ADDR_PRIM_NAME_FULL = f."STD_ADDR_PRIM_NAME_FULL"  AND 
											b.STD_ADDR_PRIM_NAME = f."STD_ADDR_PRIM_NAME"  AND 
											b.STD_ADDR_PRIM_TYPE = f."STD_ADDR_PRIM_TYPE"  AND 
											b.STD_ADDR_PRIM_NUMBER = f."STD_ADDR_PRIM_NUMBER"  AND 
											b.STD_ADDR_LOCALITY = f."STD_ADDR_LOCALITY"  AND 
											b.STD_ADDR_REGION = f."STD_ADDR_REGION"  AND 
											b.STD_ADDR_POSTCODE1 = f."STD_ADDR_POSTCODE1" 
-- DELETE AFTER TESTING
--											WHERE NAME = 'TMR_CUST_MAIN_FY1602.txt'
											;							 
	
	UPDATE "osr.scv.foundation.db.data::SCVFoundation.AddressTmr" a 
		SET 	a.VALID_TO = b.UPDATED_TO,
				a.VALID_FROM = b.UPDATED_FROM
		FROM "osr.scv.foundation.db.data::SCVFoundation.AddressTmr" a , :lt_address_entities_date_tmr b
		WHERE 
		a."SCV_ID" = b."SCV_ID" AND
	--	b."SOURCE" = 'TMR' AND
		a."SOURCE_ID" =  b."CUSTOMER_REF" AND
		a."LAST_CONTACT_DATE" = b.UPDATE_AT2 AND
		a."FLOOR" = b."FLOOR"  AND 
		a.UNIT = b."UNIT"  AND  
		a.BUILDING_NAME = b."BUILDING_NAME"  AND  
		a.STREET_NO = b."STREET_NO"  AND  
		a.STREET_NAME = b."STREET_NAME"  AND  
		a.STREET_TYPE = b."STREET_TYPE"  AND  
		a.STREET_SUFFIX = b."STREET_SUFFIX"  AND 
		a.SUBURB = b."SUBURB"  AND 
		a.POSTCODE = b."POSTCODE"  AND 
		a.STATE = b."STATE"  AND  
		a.COUNTRY = b."COUNTRY" AND 
		a.STD_ADDR_COUNTRY_2CHAR = b."STD_ADDR_COUNTRY_2CHAR"  AND  
		a.STD_ADDR_COUNTRY_NAME = b."STD_ADDR_COUNTRY_NAME"  AND  
		a.STD_ADDR_BUILDING_NAME = b."STD_ADDR_BUILDING_NAME"  AND 
		a.STD_ADDR_ADDRESS_DELIVERY = b."STD_ADDR_ADDRESS_DELIVERY"  AND 
		a.STD_ADDR_PRIM_ADDRESS = b."STD_ADDR_PRIM_ADDRESS"  AND 
		a.STD_ADDR_PRIM_NAME_FULL = b."STD_ADDR_PRIM_NAME_FULL"  AND 
		a.STD_ADDR_PRIM_NAME = b."STD_ADDR_PRIM_NAME"  AND 
		a.STD_ADDR_PRIM_TYPE = b."STD_ADDR_PRIM_TYPE"  AND 
		a.STD_ADDR_PRIM_NUMBER = b."STD_ADDR_PRIM_NUMBER"  AND 
		a.STD_ADDR_LOCALITY = b."STD_ADDR_LOCALITY"  AND 
		a.STD_ADDR_REGION = b."STD_ADDR_REGION"  AND 
		a.STD_ADDR_POSTCODE1 = b."STD_ADDR_POSTCODE1" ;
							 

	-- ### SCV contact ##############################################################################################################
	
	lt_contact_entities_rms_number = 
								SELECT SCV_ID, CONTACT_ID,
									   ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO,
									   CONTACT_NUMBER, NUMBER_EXT, NUMBER_TYPE,
									   CHECKSUM
								FROM (
								SELECT ma.SCV_ID, mr.* FROM 
								(
									SELECT * FROM (
	                            	SELECT DISTINCT b."Z_RUN_SEQ_ID"||'|'||'PHO' as CONTACT_ID, a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, CASE WHEN SUBSTRING(to_nvarchar(b.DATE_FROM),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.DATE_FROM),1,8)) END  AS VALID_FROM, 
	                            	                CASE WHEN SUBSTRING(to_nvarchar(b.DATE_TO),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.DATE_TO),1,8)) END AS VALID_TO, 
	                            	                b.TEL_NUMBER AS CONTACT_NUMBER, b.TEL_EXTENS as NUMBER_EXT, 'PHO' as NUMBER_TYPE,
									                HASH_SHA256(TO_BINARY(TO_VARCHAR(b.TEL_NUMBER)), TO_BINARY(TO_VARCHAR(b.TEL_EXTENS))) as CHECKSUM,
									                a."Match_ROW_ID"
									    FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
										LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::ADRC" b
										ON a."Cleanse_ROW_ID_ADRC" = b."Z_RUN_SEQ_ID" 
										LEFT OUTER JOIN "osr.scv.foundation.db.data::MatchResults.MatchDelta" c
										ON a."Match_ROW_ID" = c.MATCH_ROW_ID 
										WHERE a.SOURCE_SYSTEM = 'RMS' AND c.ACTION_RMS = 'Add' AND ( LENGTH(TEL_NUMBER) > 0)
									--	WHERE SOURCE_SYSTEM = 'RMS' AND ( LENGTH(TEL_NUMBER) > 0)
									ORDER BY a.ENTITY_ID
	                            	)
									UNION ALL
									SELECT * FROM (
									SELECT DISTINCT b."Z_RUN_SEQ_ID"||'|'||'FAX' as CONTACT_ID, a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, CASE WHEN SUBSTRING(to_nvarchar(b.DATE_FROM),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.DATE_FROM),1,8)) END  AS VALID_FROM, 
									                CASE WHEN SUBSTRING(to_nvarchar(b.DATE_TO),1,4) < 1900 THEN DATS_TO_DATE('19000101') ELSE DATS_TO_DATE(SUBSTRING(to_nvarchar(b.DATE_TO),1,8)) END  AS VALID_TO, 
									                b.FAX_NUMBER as CONTACT_NUMBER, b.FAX_EXTENS as NUMBER_EXT, 'FAX' as NUMBER_TYPE,
									                HASH_SHA256(TO_BINARY(TO_VARCHAR(b.FAX_NUMBER)), TO_BINARY(TO_VARCHAR(b.FAX_EXTENS))) as CHECKSUM,
									                a."Match_ROW_ID"
										FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
										LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::ADRC" b
										ON a."Cleanse_ROW_ID_ADRC" = b."Z_RUN_SEQ_ID" 
										LEFT OUTER JOIN "osr.scv.foundation.db.data::MatchResults.MatchDelta" c
										ON a."Match_ROW_ID" = c.MATCH_ROW_ID 
										WHERE a.SOURCE_SYSTEM = 'RMS' AND c.ACTION_RMS = 'Add' AND ( LENGTH(FAX_NUMBER) > 0)
								--		WHERE SOURCE_SYSTEM = 'RMS' AND ( LENGTH(FAX_NUMBER) > 0)
									ORDER BY a.ENTITY_ID
									) u
								) mr
								-- Add SCV ID
								INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mapping) ma
								ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID
								-- Only adds a new record if it does not exist in the SCV group
									WHERE mr.CHECKSUM NOT IN (SELECT "CHECKSUM"
															FROM "osr.scv.foundation.db.data::SCVFoundation.ContactNumber"
															WHERE SCV_ID = ma.SCV_ID)
								) GROUP BY CONTACT_ID, SCV_ID, 
								           ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO,
									       CONTACT_NUMBER, NUMBER_EXT, NUMBER_TYPE,
									       CHECKSUM
							 ;
	
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.ContactNumber" (SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, VALID_FROM, VALID_TO, CONTACT_ID, CONTACT_NUMBER, NUMBER_EXT, NUMBER_TYPE, '', CHECKSUM, '', :l_load_id
																		   FROM :lt_contact_entities_rms_number
																		   );						 
	
	-- Are there any email addresses coming from RMS?
	
	lt_contact_entities_tmr_custMain_number = 
							SELECT CONTACT_ID, SCV_ID,
							       ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, NUMBER_TYPE, 
							       CHECKSUM
							FROM (
							SELECT ma.SCV_ID, mr.* FROM 
							(
								SELECT CONTACT_ID, mr.ENTITY_ID, mr.SOURCE_SYSTEM, mr.SYSTEM_ID, CASE WHEN LOCATE(mr.UPDATED_AT,'|') < 1 THEN mr.UPDATED_AT ELSE SUBSTRING(mr.UPDATED_AT,1,LOCATE(mr.UPDATED_AT,'|')-1) END as UPDATED_AT, mr.CONTACT_PHONE_NO, 'PHO' as NUMBER_TYPE,
	    							   -- Create checksum for TMR CUSTMAIN contacts
    								   HASH_SHA256(TO_BINARY(TO_VARCHAR(mr.UPDATED_AT)), TO_BINARY(TO_VARCHAR(mr.CONTACT_PHONE_NO))) as CHECKSUM,
    								   mr."Match_ROW_ID"
								FROM (
									-- Aggregation for domain PERSON
									SELECT Z_RUN_SEQ_ID||'|'||'PHO' as CONTACT_ID, ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, CONTACT_PHONE_NO,
	    							       STRING_AGG(UPDATED_AT,'|' ORDER BY UPDATED_AT DESC) as UPDATED_AT, 
								           STRING_AGG("Cleanse_ROW_ID_TMR",'|' ORDER BY "Cleanse_ROW_ID_TMR" ASC) as "Cleanse_ROW_ID_TMR",
								           "Match_ROW_ID"
								           --STRING_AGG("Match_ROW_ID",'|' ORDER BY "Match_ROW_ID" ASC) as "Match_ROW_ID"
									FROM (	
										-- Add master data and show only unique combinations of fields for domain PERSON
										SELECT DISTINCT b.Z_RUN_SEQ_ID, a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.CONTACT_PHONE_EFFECT_DT AS UPDATED_AT, b.CONTACT_PHONE_NO,
	    	            					   a."Cleanse_ROW_ID_TMR",
	    	            					   a."Match_ROW_ID"
										FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
										LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" b
										ON a."Cleanse_ROW_ID_TMR" = b."Z_RUN_SEQ_ID"
										WHERE SOURCE_SYSTEM = 'TMR' AND LENGTH (b.CONTACT_PHONE_NO) >= 8
									) GROUP BY Z_RUN_SEQ_ID, ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, CONTACT_PHONE_NO, "Match_ROW_ID"
								) mr
								LEFT OUTER JOIN "osr.scv.foundation.db.synonyms::TMR_CustMain" md
								ON CASE WHEN (LOCATE(mr."Cleanse_ROW_ID_TMR",'|') < 1) THEN mr."Cleanse_ROW_ID_TMR" ELSE SUBSTRING(mr."Cleanse_ROW_ID_TMR",1,LOCATE(mr."Cleanse_ROW_ID_TMR",'|')-1) END  = md."Z_RUN_SEQ_ID"			
							) mr
							-- Add SCV ID
							INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mapping) ma
							ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID
							-- Only adds a new record if it does not exist in the SCV group
							WHERE mr.CHECKSUM NOT IN (SELECT "CHECKSUM"
													FROM "osr.scv.foundation.db.data::SCVFoundation.ContactNumber"
													WHERE SCV_ID = ma.SCV_ID)
						   )
						   GROUP BY CONTACT_ID, SCV_ID,
									ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, NUMBER_TYPE,
							        CHECKSUM
						 ;
	
	
	lt_contact_entities_tmr_custContact_number = 
										SELECT CONTACT_ID, SCV_ID,
										       ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, NUMBER_TYPE,
										       CHECKSUM
										FROM (
											SELECT ma.SCV_ID, mr.* FROM 
											(			
												SELECT DISTINCT a."Cleanse_ROW_ID_TMR"||'|'||b.Z_RUN_SEQ_ID||'|'||'SMS' as CONTACT_ID, a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.LAST_UPDATED AS UPDATED_AT, b.SMS_CONTACT_NUMBER as CONTACT_PHONE_NO, 'SMS' as NUMBER_TYPE,
			    	            				HASH_SHA256(TO_BINARY(TO_VARCHAR(b.LAST_UPDATED)), TO_BINARY(TO_VARCHAR(SMS_CONTACT_NUMBER))) as CHECKSUM,
			    	            				a."Match_ROW_ID"
												FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
												INNER JOIN "osr.scv.foundation.db.synonyms::TMR_CustContact" b
												ON a."SYSTEM_ID" = b."CUSTOMER_REF"
												WHERE SOURCE_SYSTEM = 'TMR' and LENGTH (b.SMS_CONTACT_NUMBER) >= 8
											) mr	
											-- Add SCV ID
											INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mapping) ma
											ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID
											-- Only adds a new record if it does not exist in the SCV group
											WHERE mr.CHECKSUM NOT IN (SELECT "CHECKSUM"
															FROM "osr.scv.foundation.db.data::SCVFoundation.ContactNumber"
															WHERE SCV_ID = ma.SCV_ID)
										) 
										GROUP BY CONTACT_ID, SCV_ID, 
										         ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, NUMBER_TYPE,
										         CHECKSUM
										;
	
	
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.ContactNumber" (
																			SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, '', '',CONTACT_ID, CONTACT_PHONE_NO, '', NUMBER_TYPE, DESC, CHECKSUM, UPDATED_AT, :l_load_id 
																			FROM (
																				SELECT DISTINCT CONTACT_ID, SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, '',NUMBER_TYPE,  '' as DESC, CHECKSUM
																				FROM :lt_contact_entities_tmr_custMain_number
																				UNION ALL
																				SELECT DISTINCT CONTACT_ID, SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, CONTACT_PHONE_NO, '',NUMBER_TYPE,  '' as DESC, CHECKSUM
																				FROM :lt_contact_entities_tmr_custContact_number
																			) 
																			GROUP BY CONTACT_ID, SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, '','', CONTACT_PHONE_NO, '', NUMBER_TYPE, DESC, CHECKSUM, UPDATED_AT
																		   )
	;							 
	
	lt_contact_entities_tmr_custContact_email =
										SELECT CONTACT_EMAIL_ID, SCV_ID, ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, EMAIL_ADDRESS, STD_EMAIL, CHECKSUM, STD_CHECKSUM
										FROM (
											SELECT ma.SCV_ID, mr.* FROM 
											(			
												SELECT DISTINCT b.Z_RUN_SEQ_ID as CONTACT_EMAIL_ID, a.ENTITY_ID, a.SOURCE_SYSTEM, a.SYSTEM_ID, b.LAST_UPDATED AS UPDATED_AT, b.EMAIL_ADDRESS, STD_EMAIL,
			    	            				HASH_SHA256(TO_BINARY(TO_VARCHAR(b.LAST_UPDATED)), TO_BINARY(TO_VARCHAR(EMAIL_ADDRESS))) as CHECKSUM,
			    	            				a."Match_ROW_ID",
												HASH_SHA256(TO_BINARY(TO_VARCHAR(b.LAST_UPDATED)), TO_BINARY(TO_VARCHAR(STD_EMAIL))) as STD_CHECKSUM
												FROM "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow" a
												INNER JOIN "osr.scv.foundation.db.synonyms::TMR_CustContact" b
												ON a."SYSTEM_ID" = b."CUSTOMER_REF"
												WHERE SOURCE_SYSTEM = 'TMR' and LENGTH(b.EMAIL_ADDRESS) > 5
											) mr	
											-- Add SCV ID
											INNER JOIN (SELECT SCV_ID, ENTITY_ID AS ENTITY_ID1, MATCH_ROW_ID FROM #lt_entity_mapping) ma
											ON mr.ENTITY_ID = ma.ENTITY_ID1 AND mr."Match_ROW_ID" = ma.MATCH_ROW_ID
											-- Only adds a new record if it does not exist in the SCV group
											WHERE mr.CHECKSUM NOT IN (SELECT "CHECKSUM"
															FROM "osr.scv.foundation.db.data::SCVFoundation.ContactEmail"
															WHERE SCV_ID = ma.SCV_ID)
										)
										GROUP BY CONTACT_EMAIL_ID, SCV_ID, ENTITY_ID, SOURCE_SYSTEM, SYSTEM_ID, UPDATED_AT, EMAIL_ADDRESS, STD_EMAIL, CHECKSUM, STD_CHECKSUM
	;
						 
	INSERT INTO "osr.scv.foundation.db.data::SCVFoundation.ContactEmail" (
																		  SELECT SCV_ID, SOURCE_SYSTEM, SYSTEM_ID, '', '', CONTACT_EMAIL_ID, EMAIL_ADDRESS, '', 'TMR: Customer main table', CHECKSUM, STD_EMAIL, STD_CHECKSUM, UPDATED_AT, :l_load_id
																		  FROM :lt_contact_entities_tmr_custContact_email
																		  GROUP BY CONTACT_EMAIL_ID, SCV_ID, SOURCE_SYSTEM, SYSTEM_ID,'','', EMAIL_ADDRESS, '', 'TMR: Customer main table', CHECKSUM, STD_EMAIL, STD_CHECKSUM, UPDATED_AT
																		 )
	;
	
	lt_entity_mapping = SELECT * FROM #lt_entity_mapping;
	
	/*
		TODO: Curtis to provide table for SCV load details
			- Number of SCV IDs created (new records for non-existing SCV IDs)
			- Number of SCV IDs updated (new records for existing SCV IDs)
	*/
	
	-- ### Write statistics ######################################################################################################

	CALL "osr.scv.foundation.db.Procedures::SP_WriteScvLoadStatistics"(:l_load_id, :l_num_scv_created, :l_num_scv_created, :lt_entity_mapping);
	
	-- ### Clean-up ##############################################################################################################
	DROP TABLE #lt_entity_mapping;
	DROP TABLE #lt_scv_counters;
	
	-- o_return_code := 'SUCCESS';
	-- o_message := 'Entites moved successfully';


END
