PROCEDURE "osr.scv.foundation.db.Procedures::SP_GenerateScvDelta" (
	OUT o_return_code		NVARCHAR(128), 															-- 0 = execution successful; 1 = execution raised exception.
	OUT o_message			NVARCHAR(1000) 	
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   	
   	DECLARE l_size INTEGER DEFAULT 0;
   	
   	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		
		DROP TABLE #lt_delta_scv_ids;
	
		o_return_code :=  'ERROR';
		o_message:=  'ERROR: ' || ::SQL_ERROR_CODE || ' ' || ::SQL_ERROR_MESSAGE;
	END;
	
	-- Temporary table
	CREATE LOCAL TEMPORARY TABLE #lt_delta_scv_ids (MATCH_ROW INTEGER, RELATED_ROW INTEGER, POLICY_NAME NVARCHAR(256), SCORE INTEGER, SCV_ID NVARCHAR(20));      
	
	lt_master = 
		SELECT "Match_ROW_ID", RELATED_ROW_ID, POLICY_NAME, SCORE, SCV_ID FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" AS a
		LEFT OUTER JOIN (SELECT * 
	    				 FROM "osr.scv.foundation.db.data::MatchResults.MatchTracing"
	                    ) AS b
	    ON a."Match_ROW_ID" = b.ROW_ID
	    INNER JOIN (
	    SELECT DISTINCT mh.MATCH_ROW_ID, sh.SCV_ID AS SCV_ID FROM "osr.scv.foundation.db.data::HashResults.MatchResultsHash" as mh
		LEFT OUTER JOIN (
					SELECT SCV_ID, "MATCH_ROW_CHECKSUM"  FROM "osr.scv.foundation.db.data::SCVFoundation.EntityMappingHistory"
					) as sh
		ON mh."HASH" = sh."MATCH_ROW_CHECKSUM"
	    ) c
	    ON a."Match_ROW_ID" = c.MATCH_ROW_ID
	    --WHERE a.GROUP_ID = 52164
	    ;
	
	-- Add match rows with existing SCV IDs    
	INSERT INTO #lt_delta_scv_ids (SELECT * FROM :lt_master);
	
	-- Scan 1
	lt_rows_with_missing_scv_ids_s1 = SELECT MATCH_ROW, RELATED_ROW FROM #lt_delta_scv_ids WHERE SCV_ID is null;
	lt_first_level_matches = SELECT MATCH_ROW, RELATED_ROW, SCV_ID FROM #lt_delta_scv_ids WHERE MATCH_ROW IN (SELECT RELATED_ROW FROM :lt_rows_with_missing_scv_ids_s1) AND SCV_ID IS NOT NULL;
    
    SELECT COUNT(*) INTO l_size FROM :lt_first_level_matches;
    
    IF :l_size > 0 THEN
    	
    	-- Use match row and related row as a key in delta table
    	lt_write_first_level_matches = SELECT m.MATCH_ROW, m.RELATED_ROW, s.SCV_ID FROM :lt_rows_with_missing_scv_ids_s1 m
    						  INNER JOIN :lt_first_level_matches s
    						  ON m.RELATED_ROW = s.MATCH_ROW;
    	
    	-- Update delta table with first level matches
    	UPDATE #lt_delta_scv_ids d SET SCV_ID = w.SCV_ID 
    	FROM #lt_delta_scv_ids d , :lt_write_first_level_matches w 
    	WHERE d.MATCH_ROW = w.MATCH_ROW and d.RELATED_ROW = w.MATCH_ROW;
    
    END IF;
    
    -- Check if there are any match rows left where SCV ID is null
    SELECT COUNT(*) INTO l_size FROM  #lt_delta_scv_ids WHERE SCV_ID IS NULL OR SCV_ID = 0;
    IF ( :l_size > 0) THEN
    
    	-- Scan 2
    	lt_rows_with_missing_scv_ids_s2 = SELECT MATCH_ROW, RELATED_ROW FROM #lt_delta_scv_ids WHERE SCV_ID is null;
	
		-- Get all related row IDs for first level matches where SCV ID is null
		lt_join_scan_2 = SELECT b.RELATED_ROW FROM :lt_rows_with_missing_scv_ids_s2 a LEFT OUTER JOIN :lt_first_level_matches b on a.RELATED_ROW = b.MATCH_ROW;
		
		-- Use these IDs as a join link between 1st and 2nd level degree matches
		lt_second_level_matches = SELECT MATCH_ROW, SCV_ID FROM #lt_delta_scv_ids WHERE MATCH_ROW IN (SELECT RELATED_ROW FROM :lt_join_scan_2) AND SCV_ID IS NOT NULL;
		
		SELECT COUNT(*) INTO l_size FROM :lt_second_level_matches;
    
	    IF :l_size > 0 THEN
	    
	    	lt_write_second_level_matches = SELECT m.MATCH_ROW, m.RELATED_ROW, s.SCV_ID FROM :lt_rows_with_missing_scv_ids_s2 m
	    						  INNER JOIN :lt_second_level_matches s
	    						  ON m.RELATED_ROW = s.MATCH_ROW;
	    	
	    	UPDATE #lt_delta_scv_ids d SET SCV_ID = w.SCV_ID 
	    	FROM #lt_delta_scv_ids d , :lt_write_second_level_matches w 
	    	WHERE d.MATCH_ROW = w.MATCH_ROW and d.RELATED_ROW = w.MATCH_ROW;
	    
	    END IF;
    
    END IF;
    
    -- Write into delta table
    INSERT INTO "osr.scv.foundation.db.data::MatchResults.Delta" (
    	SELECT MATCH_ROW, RELATED_ROW, POLICY_NAME, SCORE, SCV_ID,
    	ROW_NUMBER() OVER (PARTITION BY MATCH_ROW ORDER BY POLICY_NAME, SCORE DESC) AS GROUP_INDEX
    	FROM #lt_delta_scv_ids
    );
    
    
    -- Check result and assign SCV ID if found
	
	-- ### Clean-up ##############################################################################################################
	--DROP TABLE #lt_delta_scv_ids;
   
END