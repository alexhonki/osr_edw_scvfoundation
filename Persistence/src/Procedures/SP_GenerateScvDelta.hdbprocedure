PROCEDURE "osr.scv.foundation.db.Procedures::SP_GenerateScvDelta" (
	OUT o_return_code		NVARCHAR(128), 															-- 0 = execution successful; 1 = execution raised exception.
	OUT o_message			NVARCHAR(1000) 	
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   	
   	DECLARE l_size INTEGER DEFAULT 0;
   	
   	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		
		--DROP TABLE #lt_delta_scv_ids;
	
		o_return_code :=  'ERROR';
		o_message:=  'ERROR: ' || ::SQL_ERROR_CODE || ' ' || ::SQL_ERROR_MESSAGE;
	END;
	
	-- Temporary table
	--CREATE LOCAL TEMPORARY TABLE #lt_delta_scv_ids (MATCH_ROW INTEGER, RELATED_ROW INTEGER, POLICY_NAME NVARCHAR(256), SCORE INTEGER, SCV_ID NVARCHAR(20));      
	
	TRUNCATE TABLE "osr.scv.foundation.db.data::MatchResults.Delta";
	
	lt_master = 
		SELECT "Match_ROW_ID" as MATCH_ROW, RELATED_ROW_ID as RELATED_ROW, POLICY_NAME, SCORE, SCV_ID FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" AS a
		LEFT OUTER JOIN (SELECT * 
	    				 FROM "osr.scv.foundation.db.data::MatchResults.MatchTracing"
	                    ) AS b
	    ON a."Match_ROW_ID" = b.ROW_ID
	    INNER JOIN (
	    SELECT DISTINCT mh.MATCH_ROW_ID, sh.SCV_ID AS SCV_ID FROM "osr.scv.foundation.db.data::HashResults.MatchResultsHash" as mh
		LEFT OUTER JOIN (
					SELECT DISTINCT SCV_ID, "MATCH_ROW_CHECKSUM"  FROM "osr.scv.foundation.db.data::SCVFoundation.EntityMappingHistory"
					) as sh
		ON mh."HASH" = sh."MATCH_ROW_CHECKSUM"
	    ) c
	    ON a."Match_ROW_ID" = c.MATCH_ROW_ID
	    --WHERE a.GROUP_ID = 52164
	    ;
	
	
	lt_master = SELECT abc.MATCH_ROW, abc.RELATED_ROW, abc.POLICY_NAME, abc.SCORE, CASE WHEN SCV_ID IS NULL THEN (SELECT SCV_ID FROM :lt_master WHERE MATCH_ROW = abc.RELATED_ROW AND SCV_ID IS NOT NULL)  ELSE SCV_ID END AS SCV_ID
	            FROM :lt_master abc;
	
	lt_master1 = SELECT abc.MATCH_ROW, abc.RELATED_ROW, abc.POLICY_NAME, abc.SCORE, CASE WHEN SCV_ID IS NULL THEN (SELECT SCV_ID FROM :lt_master WHERE MATCH_ROW = abc.RELATED_ROW AND SCV_ID IS NOT NULL)  ELSE SCV_ID END AS SCV_ID
	            FROM :lt_master abc;
	            
	lt_master2 = SELECT abc.MATCH_ROW, abc.RELATED_ROW, abc.POLICY_NAME, abc.SCORE, CASE WHEN SCV_ID IS NULL THEN (SELECT SCV_ID FROM :lt_master WHERE MATCH_ROW = abc.RELATED_ROW AND SCV_ID IS NOT NULL)  ELSE SCV_ID END AS SCV_ID
	            FROM :lt_master1 abc;
	
	lt_master3 = SELECT abc.MATCH_ROW, abc.RELATED_ROW, abc.POLICY_NAME, abc.SCORE, CASE WHEN SCV_ID IS NULL THEN (SELECT SCV_ID FROM :lt_master WHERE MATCH_ROW = abc.RELATED_ROW AND SCV_ID IS NOT NULL)  ELSE SCV_ID END AS SCV_ID
	            FROM :lt_master2 abc;	
	            
	lt_master4 = SELECT abc.MATCH_ROW, abc.RELATED_ROW, abc.POLICY_NAME, abc.SCORE, CASE WHEN SCV_ID IS NULL THEN (SELECT SCV_ID FROM :lt_master WHERE MATCH_ROW = abc.RELATED_ROW AND SCV_ID IS NOT NULL)  ELSE SCV_ID END AS SCV_ID
	            FROM :lt_master3 abc;
	
	INSERT INTO "osr.scv.foundation.db.data::MatchResults.Delta" (
    	SELECT MATCH_ROW, RELATED_ROW, POLICY_NAME, SCORE, SCV_ID,
    	ROW_NUMBER() OVER (PARTITION BY MATCH_ROW ORDER BY POLICY_NAME, SCORE DESC) AS GROUP_INDEX
    	FROM :lt_master4
    );
	
	
	
	-- ### Clean-up ##############################################################################################################
	--DROP TABLE #lt_delta_scv_ids;
   
END