PROCEDURE "osr.scv.foundation.db.Procedures::SP_DetectScvRecords" ( 

	--	OUT o_return_code	NVARCHAR(10),
	--	OUT o_message		NVARCHAR(500)
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS

BEGIN	
	-- Declare exception hander for all SQL exceptions. 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		
	-- o_message:=  'ERROR: ' || ::SQL_ERROR_CODE || ' ' || ::SQL_ERROR_MESSAGE;
	-- o_return_code :=  'ERROR';
	END;
	
	TRUNCATE TABLE "osr.scv.foundation.db.data::MatchResults.MatchDelta";
	
	lt_existing_records = SELECT mh.ENTITY_ID, mh.MATCH_ROW_ID, sh.SCV_ID AS SCV_ID, 'Existing' AS ACTION  FROM "osr.scv.foundation.db.data::HashResults.MatchResultsHash" as mh
		INNER JOIN (
--					SELECT SCV_ID, "HASH"  FROM "osr.scv.foundation.db.data::HashResults.SCVRecordHash"
					SELECT SCV_ID, "MATCH_ROW_CHECKSUM"  FROM "osr.scv.foundation.db.data::SCVFoundation.EntityMappingHistory"
					) as sh
		ON mh."HASH" = sh."MATCH_ROW_CHECKSUM";

	-- Person RMS Hash without the xdele field	
--	lt_exisitng_RMSPerson_records = SELECT mh.ENTITY_ID, mh.MATCH_ROW_ID, sh.SCV_ID AS SCV_ID, 'Existing' AS ACTION  FROM "osr.scv.foundation.db.data::HashResults.MatchResultsHashRMS" as mh
--		INNER JOIN (
--					SELECT SCV_ID, "HASH"  FROM "osr.scv.foundation.db.data::HashResults.SCVRecordHashRMS"
--					) as sh
--		ON mh."HASH" = sh."HASH";
/*
    lt_add_new_records = SELECT mh.ENTITY_ID, mh.MATCH_ROW_ID, 0 AS SCV_ID , 'Add' AS ACTION 
						FROM   "osr.scv.foundation.db.data::HashResults.MatchResultsHash" as mh
						WHERE NOT EXISTS (SELECT SCV_ID, "HASH"  FROM "osr.scv.foundation.db.data::HashResults.SCVRecordHash" as sh
                						WHERE mh."HASH" = sh."HASH");            						
*/
	lt_add_new_records = SELECT DISTINCT "Match_ROW_ID" as MATCH_ROW_ID, SCV_ID, ACTION  FROM (SELECT mh.ENTITY_ID, mh."Match_ROW_ID", 0 AS SCV_ID , 'Add' AS ACTION 
											FROM  "osr.scv.foundation.db.data::MatchResults.MatchResults" as mh
											WHERE "Match_ROW_ID" NOT IN (SELECT DISTINCT MATCH_ROW_ID FROM :lt_existing_records as sh
											WHERE mh."Match_ROW_ID" = sh."MATCH_ROW_ID")) as a	;
	
	
	lt_total_records = ( SELECT DISTINCT MATCH_ROW_ID, SCV_ID, ACTION  FROM :lt_existing_records
							UNION ALL
						SELECT DISTINCT MATCH_ROW_ID, SCV_ID, ACTION  FROM :lt_add_new_records);
						
/*	-- List of entities with only 1 SCV ID in the group
	lt_one_scv_id = SELECT ENTITY_ID FROM (
											SELECT b.ENTITY_ID, b.SYSTEM_ID, MATCH_ROW_ID, SCV_ID, a.ACTION FROM :lt_total_records as a
													INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchResults" as b
													ON a.MATCH_ROW_ID = b."Match_ROW_ID"
											) WHERE SCV_ID > 0 GROUP BY ENTITY_ID HaVING COUNT (DISTINCT SCV_ID) = 1 ;
											
	-- List of entities with greater than 1 SCV ID in the group
	lt_more_scv_id = SELECT ENTITY_ID FROM (
											SELECT b.ENTITY_ID, b.SYSTEM_ID, MATCH_ROW_ID, SCV_ID, a.ACTION FROM :lt_total_records as a
													INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchResults" as b
													ON a.MATCH_ROW_ID = b."Match_ROW_ID"
											) WHERE SCV_ID > 0 GROUP BY ENTITY_ID HaVING COUNT (DISTINCT SCV_ID) > 1 ;										
											
	-- List of entities that have exisitng records in the SCV
	lt_scv_id = SELECT ENTITY_ID FROM (
											SELECT b.ENTITY_ID, b.SYSTEM_ID, MATCH_ROW_ID, SCV_ID, a.ACTION FROM :lt_total_records as a
													INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchResults" as b
													ON a.MATCH_ROW_ID = b."Match_ROW_ID"
											) WHERE SCV_ID > 0 GROUP BY ENTITY_ID;										
						
	-- Process the entities with just 1 SCV ID in the group				
	INSERT INTO "osr.scv.foundation.db.data::MatchResults.MatchDelta" ( SELECT f.MATCH_ROW_ID, g.SCV_ID, f.ACTION, 'Add' FROM (
																		SELECT b.ENTITY_ID, MATCH_ROW_ID, SCV_ID, a.ACTION FROM :lt_total_records as a
																		INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchResults" as b
																		ON a.MATCH_ROW_ID = b."Match_ROW_ID"
																		WHERE ENTITY_ID IN (SELECT ENTITY_ID FROM :lt_one_scv_id)
																		)f
																		LEFT OUTER JOIN (
																						SELECT e.ENTITY_ID, MAX (c.SCV_ID) AS SCV_ID FROM :lt_total_records as c
																						INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchResults" as e
																						ON c.MATCH_ROW_ID = e."Match_ROW_ID"
																						GROUP BY e.ENTITY_ID
																		)g
																		ON f.ENTITY_ID = g.ENTITY_ID);
																		
	-- Process the entities with greater than 1 SCV ID in the group
	INSERT INTO "osr.scv.foundation.db.data::MatchResults.MatchDelta" ( SELECT f.MATCH_ROW_ID, f.SCV_ID, f.ACTION, 'Add' FROM (
																		SELECT b.ENTITY_ID, MATCH_ROW_ID, SCV_ID, a.ACTION FROM :lt_total_records as a
																		INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchResults" as b
																		ON a.MATCH_ROW_ID = b."Match_ROW_ID"
																		WHERE SCV_ID != 0 AND ENTITY_ID NOT IN (SELECT ENTITY_ID FROM :lt_more_scv_id)
																		)f);	
																		
																		  
	-- Process the entities with greater than 1 SCV ID in the group calculate the missing SCV ID																		                		
	INSERT INTO "osr.scv.foundation.db.data::MatchResults.MatchDelta" (SELECT DISTINCT RELATED_ROW_ID, SCV_ID, ACTION, 'Add'  FROM (
																			SELECT DISTINCT RELATED_ROW_ID, MAX(h.SCV_ID) as SCV_ID, p.ACTION, 'Add' , MAX(SCORE) as MAXSCORE FROM :lt_total_records as  h
																			INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchResults" as b
																			ON h.MATCH_ROW_ID = b."Match_ROW_ID"
																				INNER JOIN ( SELECT ROW_ID, RELATED_ROW_ID, MAX (SCORE) as SCORE from "osr.scv.foundation.db.data::MatchResults.MatchTracing" GROUP BY ROW_ID, RELATED_ROW_ID ) as j
																				ON h.MATCH_ROW_ID = j.ROW_ID
																					INNER JOIN (SELECT DISTINCT MATCH_ROW_ID, SCV_ID, ACTION  FROM :lt_add_new_records) p
																					ON p.MATCH_ROW_ID = RELATED_ROW_ID	
																			WHERE ENTITY_ID IN (SELECT ENTITY_ID FROM :lt_more_scv_id)
																			GROUP BY RELATED_ROW_ID, p.ACTION
																			ORDER BY MAXSCORE)
																			)
																			;
																		
																		
																		
*/																		
/*	-- Process the entities with no SCV ID in the group
	INSERT INTO "osr.scv.foundation.db.data::MatchResults.MatchDelta" ( SELECT f.MATCH_ROW_ID, f.SCV_ID, f.ACTION, 'Add' FROM (
																		SELECT b.ENTITY_ID, MATCH_ROW_ID, SCV_ID, a.ACTION FROM :lt_total_records as a
																		INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchResults" as b
																		ON a.MATCH_ROW_ID = b."Match_ROW_ID"
																	--	WHERE ENTITY_ID NOT IN (SELECT ENTITY_ID FROM :lt_total_records)
																		)f);
*/

INSERT INTO "osr.scv.foundation.db.data::MatchResults.MatchDelta"(

																	SELECT b.MATCH_ROW_ID,  c.SCV_ID, ACTION , NULL--, a.GROUP_TAG 
																	FROM "osr.scv.foundation.db.data::MatchResults.SubGroups" a
																	LEFT OUTER JOIN (
																					SELECT DISTINCT MATCH_ROW_ID, SCV_ID, ACTION  FROM :lt_total_records
																					) b
																					ON a.MATCH_ROW = b.MATCH_ROW_ID
																					LEFT OUTER JOIN (				
																									SELECT GROUP_TAG, MAX(SCV_ID) as SCV_ID
																									FROM "osr.scv.foundation.db.data::MatchResults.SubGroups" a
																									LEFT OUTER JOIN (
																													SELECT DISTINCT MATCH_ROW_ID, SCV_ID, ACTION  FROM :lt_total_records
																													) b
																													ON a.MATCH_ROW = b.MATCH_ROW_ID
																													WHERE SCV_ID != 0 
																													GROUP BY GROUP_TAG
																									)  c
																									ON a.GROUP_TAG = c.GROUP_TAG
																	)			
																	;				



 --Run here --Second highest record
 UPDATE "osr.scv.foundation.db.data::MatchResults.MatchDelta" a SET a.SCV_ID = b.SCV_ID
 FROM "osr.scv.foundation.db.data::MatchResults.MatchDelta" a ,(
 
 SELECT DISTINCT RELATED_ROW_ID, SCV_ID FROM "osr.scv.foundation.db.data::MatchResults.MatchDelta" a
 INNER JOIN (
 SELECT ROW_ID, RELATED_ROW_ID FROM (
 SELECT tr1.ROW_ID, RELATED_ROW_ID, tr1."SCORE" from "osr.scv.foundation.db.data::MatchResults.MatchTracing" tr1
 INNER JOIN (SELECT ROW_ID, MAX (SCORE) as SCORE from "osr.scv.foundation.db.data::MatchResults.MatchTracing"
 WHERE SCORE < (SELECT MAX (SCORE) as SCORE from "osr.scv.foundation.db.data::MatchResults.MatchTracing")
 GROUP BY ROW_ID ) tr2
 ON tr1.ROW_ID = tr2.ROW_ID and tr1."SCORE" = tr2."SCORE"
	
) tr3
 LEFT OUTER JOIN 
(
SELECT DISTINCT MATCH_ROW_ID, SCV_ID, ACTION  FROM :lt_total_records
				
) tr4
ON tr3.RELATED_ROW_ID = tr4.MATCH_ROW_ID
) b
ON a.MATCH_ROW_ID = b.ROW_ID
) b
WHERE a.MATCH_ROW_ID = b.RELATED_ROW_ID AND a.SCV_ID IS NULL
;


--- STEP 3 
 UPDATE "osr.scv.foundation.db.data::MatchResults.MatchDelta" a SET a.SCV_ID = b.SCV_ID
 FROM "osr.scv.foundation.db.data::MatchResults.MatchDelta" a ,(

SELECT MATCH_ROW, c.SCV_ID FROM "osr.scv.foundation.db.data::MatchResults.MatchDelta" a
LEFT OUTER JOIN  "osr.scv.foundation.db.data::MatchResults.SubGroups" b
ON a.MATCH_ROW_ID = b.MATCH_ROW
LEFT OUTER JOIN (
			SELECT GROUP_TAG, MAX(SCV_ID) as SCV_ID FROM "osr.scv.foundation.db.data::MatchResults.MatchDelta" a
			LEFT OUTER JOIN  "osr.scv.foundation.db.data::MatchResults.SubGroups" b
			ON a.MATCH_ROW_ID = b.MATCH_ROW
			GROUP BY GROUP_TAG
			) c
ON 	b.GROUP_TAG = c.GROUP_TAG	) b

WHERE a.SCV_ID IS NULL AND  a.MATCH_ROW_ID = b.MATCH_ROW;


UPDATE "osr.scv.foundation.db.data::MatchResults.MatchDelta" a SET a.SCV_ID = 0
FROM "osr.scv.foundation.db.data::MatchResults.MatchDelta" a
WHERE a.SCV_ID IS NULL;
			
			
--	UPDATE "osr.scv.foundation.db.data::MatchResults.MatchDelta" a SET  a.ACTION_RMS = b.ACTION
--	FROM "osr.scv.foundation.db.data::MatchResults.MatchDelta" a , :lt_exisitng_RMSPerson_records b
--	WHERE a.MATCH_ROW_ID = b.MATCH_ROW_ID;																	
	
	--	o_return_code := 'Success' ;
	--	o_message := 'Entites moved successfully';
END;