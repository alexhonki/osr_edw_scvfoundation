PROCEDURE "osr.scv.foundation.db.Procedures::SP_DetectScvRecords" ( 
--	IN i_user			NVARCHAR(20),
--	IN i_timestamp		TIMESTAMP,
--	OUT o_return_code	NVARCHAR(10),
--	OUT o_message		NVARCHAR(500)
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS

BEGIN	
	-- Declare exception hander for all SQL exceptions. 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		
--		o_message:=  'ERROR: ' || ::SQL_ERROR_CODE || ' ' || ::SQL_ERROR_MESSAGE;
--		o_return_code :=  'ERROR';
	END;
	
	-- Temporary table to hold the SCV ID to Entity ID mapping
--	CREATE LOCAL TEMPORARY TABLE #lt_entity_list (
--            lt_entity NVARCHAR(10)
--    );
    
--    CREATE LOCAL TEMPORARY TABLE #lv_scv_id (
--            lv_scv_id NVARCHAR(10)
--    );
    
/*
	lt_matchresults_hash = SELECT 
		            	--ROW_NUMBER() OVER (ORDER BY a.ENTITY_ID ASC) as ROW_COUNT,
		            	--a.GROUP_ID,
					--	a.ENTITY_ID,PERSON_RMS, PERSON_TMR,	ADDR_RMS, ADDR_TMR,	TEL_RMS,FAX_RMS,TEL_TMR, SMS_TMR, EMAIL_TMR,a.SOURCE_SYSTEM,
		            	a.ENTITY_ID, a."Match_ROW_ID" as MATCH_ROW ,
					
	
						HASH_SHA256(TO_BINARY(TO_VARCHAR(CASE WHEN PERSON_RMS IS NULL THEN '' ELSE PERSON_RMS END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN PERSON_TMR IS NULL THEN '' ELSE PERSON_TMR END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN ADDR_RMS IS NULL THEN '' ELSE ADDR_RMS END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN ADDR_TMR IS NULL THEN '' ELSE ADDR_TMR END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN TEL_RMS IS NULL THEN '' ELSE TEL_RMS END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN FAX_RMS IS NULL THEN '' ELSE FAX_RMS END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN TEL_TMR IS NULL THEN '' ELSE TEL_TMR END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN SMS_TMR IS NULL THEN '' ELSE SMS_TMR END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN EMAIL_TMR IS NULL THEN '' ELSE EMAIL_TMR END))
							
						) AS HASH_MATCH
						
		            	

		                FROM   "osr.scv.foundation.db.data::MatchResults.MatchResults" AS a 
		                -- Add original fields
		                --BUT000-RMS
		                LEFT OUTER JOIN ( 
		                			      SELECT BIRTHDT , NAME_FIRST, NAMEMIDDLE, NAME_LAST, DEATHDT, "Cleanse_TABLE_ID", "Z_RUN_SEQ_ID", "PARTNER", "XDELE",
		                			      (NAME_FIRST || NAMEMIDDLE || NAME_LAST || (CASE WHEN BIRTHDT = ' ' THEN TO_DATE('19990101', 'YYYYMMDD') ELSE TO_DATE(BIRTHDT, 'YYYYMMDD') END) || XDELE || PARTNER ) as PERSON_RMS
		                			      FROM "osr.scv.foundation.db.synonyms::BUT000"
		                					
		                				) as prms
		                ON a."Cleanse_ROW_ID_BUT" = prms."Z_RUN_SEQ_ID" AND a."Cleanse_TABLE_ID_BUT" = prms."Cleanse_TABLE_ID" AND a."SYSTEM_ID" = prms."PARTNER" and a."SOURCE_SYSTEM" = 'RMS'
		                --ADRC-RMS
		                LEFT OUTER JOIN (
		                				 SELECT TEL_NUMBER, TEL_EXTENS, ADDRNUMBER, COUNTRY as COUNTRY_ORIG_ADRC, REGION AS REGION_ORIG_ADRC, CITY1 AS CITY_ORIG_ADRC, STREET AS STREET_ORIG_ADRC, HOUSE_NUM1 AS STREET_NUMBER_ORIG_ADRC, POST_CODE1 as POSTCODE_ORIG_ADRC, "Cleanse_TABLE_ID", "Z_RUN_SEQ_ID",
	--	                				 HASH_SHA256(TO_BINARY(TO_VARCHAR(CITY1)), TO_BINARY(TO_VARCHAR(POST_CODE1)), TO_BINARY(TO_VARCHAR(STREET)), TO_BINARY(TO_VARCHAR(HOUSE_NUM1)), TO_BINARY(TO_VARCHAR(COUNTRY)),
    --									 TO_BINARY(TO_VARCHAR(REGION)), TO_BINARY(TO_VARCHAR(PERS_ADDR)), TO_BINARY(TO_VARCHAR(MC_CITY1)), TO_BINARY(TO_VARCHAR(STREET)), TO_BINARY(TO_VARCHAR(TIME_ZONE)), TO_BINARY(TO_VARCHAR(ADRC_UUID))) as CHECKSUM_ADDR_RMS
    									 (CITY1 || POST_CODE1 || STREET || HOUSE_NUM1 || COUNTRY || REGION || PERS_ADDR || MC_CITY1 || MC_STREET || TIME_ZONE || ADRC_UUID) as ADDR_RMS

		                				 FROM "osr.scv.foundation.db.synonyms::ADRC"
		                				) as e1
		                ON a."Cleanse_TABLE_ID_ADRC" = e1."Cleanse_TABLE_ID" AND a."Cleanse_ROW_ID_ADRC" = e1."Z_RUN_SEQ_ID" AND a."SOURCE_SYSTEM" = 'RMS'
		                --Phone number-RMS
		                LEFT OUTER JOIN(
		                				SELECT TEL_NUMBER, TEL_EXTENS, "Cleanse_TABLE_ID", "Z_RUN_SEQ_ID",
		                				(TEL_NUMBER || TEL_EXTENS) as TEL_RMS
		                				FROM "osr.scv.foundation.db.synonyms::ADRC"
		                				WHERE ( LENGTH(TEL_NUMBER) > 0)
		                				) e2
		                ON a."Cleanse_TABLE_ID_ADRC" = e2."Cleanse_TABLE_ID" AND a."Cleanse_ROW_ID_ADRC" = e2."Z_RUN_SEQ_ID" AND a."SOURCE_SYSTEM" = 'RMS'
		                --Fax number-RMS
		                LEFT OUTER JOIN(
		                				SELECT FAX_NUMBER, FAX_EXTENS, "Cleanse_TABLE_ID", "Z_RUN_SEQ_ID",
		                				(FAX_NUMBER || FAX_EXTENS) as FAX_RMS
		                				FROM "osr.scv.foundation.db.synonyms::ADRC"
		                				WHERE ( LENGTH(FAX_NUMBER) > 0)
		                				) e3
		                ON a."Cleanse_TABLE_ID_ADRC" = e3."Cleanse_TABLE_ID" AND a."Cleanse_ROW_ID_ADRC" = e3."Z_RUN_SEQ_ID" AND a."SOURCE_SYSTEM" = 'RMS'
		                
		                --Name and Address-TMR
		                LEFT OUTER JOIN ( 
		                			      SELECT DATE_OF_BIRTH, FIRST_NAME, MIDDLE_NAME, FAMILY_ORG_NAME, COUNTRY, STATE, SUBURB, STREET_NAME, STREET_NO, POSTCODE, "Cleanse_TABLE_ID", "Z_RUN_SEQ_ID", "CUSTOMER_REF",
		                			      (FIRST_NAME || MIDDLE_NAME || FAMILY_ORG_NAME || DATE_OF_BIRTH) as PERSON_TMR,
		                			      (FLOOR || UNIT || BUILDING_NAME || STREET_NO || STREET_NAME || STREET_TYPE || STREET_SUFFIX || SUBURB || POSTCODE || STATE || COUNTRY) as ADDR_TMR
		                			      FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
		                				) as ptmr
		                ON a."Cleanse_ROW_ID_TMR" = ptmr."Z_RUN_SEQ_ID" AND a."Cleanse_TABLE_ID_TMR" = ptmr."Cleanse_TABLE_ID" AND a."SYSTEM_ID" = ptmr."CUSTOMER_REF" AND a."SOURCE_SYSTEM" = 'TMR'			
		                --Phone number-TMR
		                LEFT OUTER JOIN(
		                				SELECT CONTACT_PHONE_EFFECT_DT,CONTACT_PHONE_NO,"Z_RUN_SEQ_ID","Cleanse_TABLE_ID","CUSTOMER_REF",
		                				(CONTACT_PHONE_EFFECT_DT || CONTACT_PHONE_NO) as TEL_TMR
		                				FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
		                				) as f1
		                ON a."Cleanse_ROW_ID_TMR" = f1."Z_RUN_SEQ_ID" AND a."Cleanse_TABLE_ID_TMR" = f1."Cleanse_TABLE_ID" AND a."SYSTEM_ID" = f1."CUSTOMER_REF" AND a."SOURCE_SYSTEM" = 'TMR'	
		                --SMS number-TMR
		                LEFT OUTER JOIN(
		                				SELECT LAST_UPDATED,SMS_CONTACT_NUMBER,CUSTOMER_REF,
		                				(LAST_UPDATED || SMS_CONTACT_NUMBER) as SMS_TMR
										FROM "osr.scv.foundation.db.synonyms::TMR_CustContact" 
										WHERE SMS_CONTACT_NUMBER <> ''
										) as f2
		                ON a."SYSTEM_ID" = f2."CUSTOMER_REF" AND  a.SOURCE_SYSTEM = 'TMR'
		                --Email address-TMR
		                LEFT OUTER JOIN(
		                				SELECT LAST_UPDATED,EMAIL_ADDRESS,CUSTOMER_REF,
		                				(LAST_UPDATED || EMAIL_ADDRESS) as EMAIL_TMR
		                				FROM "osr.scv.foundation.db.synonyms::TMR_CustContact" 
										WHERE EMAIL_ADDRESS <> ''
		                		   )f3
		                ON a."SYSTEM_ID" = f3."CUSTOMER_REF" AND a.SOURCE_SYSTEM = 'TMR'
		                
		                ORDER  BY ENTITY_ID ASC
		                		  --SOURCE_SYSTEM ASC, 
		                          --SYSTEM_ID DESC,
		                          --MATCH_ROW ASC
					    ;
					    
-- Person RMS Hash without the xdele field						    
	lt_matchresults_RMSPerson_hash  = SELECT
					            	a.ENTITY_ID, a."Match_ROW_ID" as MATCH_ROW ,
									HASH_SHA256(TO_BINARY(TO_VARCHAR(CASE WHEN PERSON_RMS IS NULL THEN '' ELSE PERSON_RMS END))
									) AS HASH_MATCH
					                FROM   "osr.scv.foundation.db.data::MatchResults.MatchResults" AS a 
					                -- Add original fields
					                --BUT000-RMS Person details without the XDELE field
					                LEFT OUTER JOIN ( 
					                			      SELECT BIRTHDT , NAME_FIRST, NAMEMIDDLE, NAME_LAST, DEATHDT, "Cleanse_TABLE_ID", "Z_RUN_SEQ_ID", "PARTNER",
					                			     -- (NAME_FIRST || NAMEMIDDLE || NAME_LAST || (CASE WHEN BIRTHDT = ' ' THEN TO_DATE('19990101', 'YYYYMMDD') ELSE TO_DATE(BIRTHDT, 'YYYYMMDD') END) || PARTNER) as PERSON_RMS
					                			     ((CASE WHEN BIRTHDT = ' ' THEN TO_DATE('19990101', 'YYYYMMDD') ELSE TO_DATE(BIRTHDT, 'YYYYMMDD') END) || PARTNER) as PERSON_RMS
					                			      FROM "osr.scv.foundation.db.synonyms::BUT000"
					                			     
					                				) as prms
					                ON a."Cleanse_ROW_ID_BUT" = prms."Z_RUN_SEQ_ID" AND a."Cleanse_TABLE_ID_BUT" = prms."Cleanse_TABLE_ID" AND a."SYSTEM_ID" = prms."PARTNER" and a."SOURCE_SYSTEM" = 'RMS'
					                ;
	
	
	
	lt_scvrms_hash =  SELECT 
		            	DISTINCT a.SCV_ID,
		            --	PERSON_RMS, ADDR_RMS, TEL_RMS,FAX_RMS,
		            	HASH_SHA256(TO_BINARY(TO_VARCHAR(CASE WHEN PERSON_RMS IS NULL THEN '' ELSE PERSON_RMS END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN ADDR_RMS IS NULL THEN '' ELSE ADDR_RMS END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN TEL_RMS IS NULL THEN '' ELSE TEL_RMS END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN FAX_RMS IS NULL THEN '' ELSE FAX_RMS END))
						) AS HASH_SCV

						
		                FROM  "osr.scv.foundation.db.data::SCVFoundation.Master" AS a
		                --RMS Name
		                LEFT OUTER JOIN (
		                				SELECT SCV_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, BIRTH_DATE, DEATH_DATE, SOURCE_ID, 
		                				--(FIRST_NAME || MIDDLE_NAME || LAST_NAME || TO_VARCHAR (TO_DATE(BIRTH_DATE), 'YYYY-MM-DD') || DEATH_DATE) as PERSON_RMS,
		                				(FIRST_NAME || MIDDLE_NAME || LAST_NAME || BIRTH_DATE|| SOURCE_ID || INACTIVE ) as PERSON_RMS
		                				--HASH_SHA256(TO_BINARY(TO_VARCHAR(FIRST_NAME)), TO_BINARY(TO_VARCHAR(MIDDLE_NAME)), TO_BINARY(TO_VARCHAR(LAST_NAME)), TO_BINARY(TO_VARCHAR(BIRTH_DATE)), TO_BINARY(TO_VARCHAR(DEATH_DATE)), TO_BINARY(TO_VARCHAR(SOURCE_ID)), TO_BINARY(TO_VARCHAR(INACTIVE))) as CHECKSUM_PERSON_RMS
		                				FROM "osr.scv.foundation.db.data::SCVFoundation.PersonRms"
		                ) as pr
		                ON a.SCV_ID = pr.SCV_ID
		                --RMS Address
		                LEFT OUTER JOIN(
		                				SELECT SCV_ID, CITY1, POST_CODE1, STREET, HOUSE_NUM1, COUNTRY, REGION, PERS_ADDR, MC_CITY1, MC_STREET, TIME_ZONE, ADRC_UUID, SOURCE_ID,
		                				(CITY1 || POST_CODE1 || STREET || HOUSE_NUM1 || COUNTRY || REGION || PERS_ADDR || MC_CITY1 || MC_STREET || TIME_ZONE || ADRC_UUID) as ADDR_RMS
		                				FROM "osr.scv.foundation.db.data::SCVFoundation.AddressRms"
		                ) as ar
		                 ON pr.SCV_ID = ar.SCV_ID AND pr.SOURCE_ID = ar.SOURCE_ID
		                --RMS Tel Phone
		                LEFT OUTER JOIN(
		                				SELECT SCV_ID, CONTACT_NUMBER AS NUMBER_RMS, NUMBER_EXT, NUMBER_TYPE, SOURCE, 
		                				(CONTACT_NUMBER || NUMBER_EXT) as TEL_RMS
		                				FROM "osr.scv.foundation.db.data::SCVFoundation.ContactNumber"
		        	     				WHERE SOURCE = 'RMS' and NUMBER_TYPE = 'PHO'
		                ) as telr
		                 ON ar.SCV_ID = telr.SCV_ID
		                 --RMS Fax Phone
		                 LEFT OUTER JOIN(
		                				SELECT SCV_ID, CONTACT_NUMBER AS FAX_RMS_NUM, NUMBER_EXT, NUMBER_TYPE, SOURCE	,
		                				(CONTACT_NUMBER || NUMBER_EXT) as FAX_RMS
		                				FROM "osr.scv.foundation.db.data::SCVFoundation.ContactNumber"
		        	     				WHERE SOURCE = 'RMS' and NUMBER_TYPE = 'FAX'
		                ) as faxr
		                 ON ar.SCV_ID = faxr.SCV_ID
		                ;
		                
-- Person RMS Hash without the xdele field	
	lt_scvrms_RMSPerson_hash =  SELECT 
				            	DISTINCT a.SCV_ID,
				            	HASH_SHA256(TO_BINARY(TO_VARCHAR(CASE WHEN PERSON_RMS IS NULL THEN '' ELSE PERSON_RMS END))
								) AS HASH_SCV
				                FROM  "osr.scv.foundation.db.data::SCVFoundation.Master" AS a
				                --RMS Name
				                LEFT OUTER JOIN (
				                				SELECT SCV_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, BIRTH_DATE, DEATH_DATE, SOURCE_ID, 
				                				--(FIRST_NAME || MIDDLE_NAME || LAST_NAME || BIRTH_DATE || SOURCE_ID) as PERSON_RMS
				                				( BIRTH_DATE || SOURCE_ID) as PERSON_RMS
				                			--	HASH_SHA256(TO_BINARY(TO_VARCHAR(FIRST_NAME)), TO_BINARY(TO_VARCHAR(MIDDLE_NAME)), TO_BINARY(TO_VARCHAR(LAST_NAME)), TO_BINARY(TO_VARCHAR(BIRTH_DATE)), TO_BINARY(TO_VARCHAR(DEATH_DATE)), TO_BINARY(TO_VARCHAR(SOURCE_ID))) as CHECKSUM_PERSON_RMS
				                				FROM "osr.scv.foundation.db.data::SCVFoundation.PersonRms"
				                ) as pr
				                ON a.SCV_ID = pr.SCV_ID;
	
	lt_scvtmr_hash = SELECT 
		            	a.SCV_ID,
		            --	PERSON_TMR, ADDR_TMR, TEL_TMR, SMS_TMR, EMAIL_TMR,
						HASH_SHA256(
									TO_BINARY(TO_VARCHAR(CASE WHEN PERSON_TMR IS NULL THEN '' ELSE PERSON_TMR END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN ADDR_TMR IS NULL THEN '' ELSE ADDR_TMR END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN TEL_TMR IS NULL THEN '' ELSE TEL_TMR END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN SMS_TMR IS NULL THEN '' ELSE SMS_TMR END)),
									TO_BINARY(TO_VARCHAR(CASE WHEN EMAIL_TMR IS NULL THEN '' ELSE EMAIL_TMR END))
						) AS HASH_SCV
		                FROM  "osr.scv.foundation.db.data::SCVFoundation.Master" AS a
						LEFT OUTER JOIN (
		                				SELECT SCV_ID, FIRST_NAME, MIDDLE_NAME, LAST_NAME, BIRTH_DATE, DEATH_DATE,
		                				(FIRST_NAME || MIDDLE_NAME || LAST_NAME || BIRTH_DATE) as PERSON_TMR
		                				FROM "osr.scv.foundation.db.data::SCVFoundation.PersonTmr"
		                ) as ptmr
		                ON a.SCV_ID = ptmr.SCV_ID
		   --TMR Address
		                LEFT OUTER JOIN(
		                				SELECT SCV_ID, FLOOR, UNIT, BUILDING_NAME, STREET_NO, STREET_NAME, STREET_TYPE, STREET_SUFFIX, SUBURB, POSTCODE, STATE, COUNTRY,
		                				(FLOOR || UNIT || BUILDING_NAME || STREET_NO || STREET_NAME || STREET_TYPE || STREET_SUFFIX || SUBURB || POSTCODE || STATE || COUNTRY) as ADDR_TMR
		                				FROM "osr.scv.foundation.db.data::SCVFoundation.AddressTmr"
		                ) as atmr
		                 ON ptmr.SCV_ID = atmr.SCV_ID
		   --TMR Tel Phone
		                LEFT OUTER JOIN(
		                				SELECT SCV_ID, CONTACT_NUMBER AS NUMBER_TMR, NUMBER_EXT, NUMBER_TYPE, VALID_FROM, SOURCE,
		                				(LAST_UPDATED || CONTACT_NUMBER) as TEL_TMR
		                				FROM "osr.scv.foundation.db.data::SCVFoundation.ContactNumber"
		        	     				WHERE SOURCE = 'TMR' and NUMBER_TYPE = 'PHO'
		                ) as teltmr
		                 ON ptmr.SCV_ID = teltmr.SCV_ID
		    --TMR SMS Phone
		                 LEFT OUTER JOIN(
		                				SELECT SCV_ID, CONTACT_NUMBER AS SMS_TMR_NUM, NUMBER_EXT, NUMBER_TYPE, VALID_FROM SOURCE,
		                				(LAST_UPDATED || CONTACT_NUMBER) as SMS_TMR
		                				FROM "osr.scv.foundation.db.data::SCVFoundation.ContactNumber"
		        	     				WHERE SOURCE = 'TMR' and NUMBER_TYPE = 'SMS'
		                ) as smstmr
		                 ON ptmr.SCV_ID = smstmr.SCV_ID
		    --TMR Email
		                 LEFT OUTER JOIN(
		                				SELECT SCV_ID, VALID_TO, CONTACT_EMAIL, SOURCE,
		                				(LAST_UPDATED || CONTACT_EMAIL) as EMAIL_TMR
		                				FROM "osr.scv.foundation.db.data::SCVFoundation.ContactEmail"
		        	     				WHERE SOURCE = 'TMR' 
		                ) as em
		                 ON ptmr.SCV_ID = em.SCV_ID
		                
		                ;
	
	lt_scvall_hash = SELECT * FROM :lt_scvrms_hash
						UNION ALL
					 SELECT * FROM :lt_scvtmr_hash;
	*/				 
/*	OLD CODE
	lt_exisitng_records = SELECT mh.ENTITY_ID, mh.MATCH_ROW, sh.SCV_ID AS SCV_ID, 'Existing' AS ACTION  FROM :lt_matchresults_hash as mh
		INNER JOIN (
					SELECT SCV_ID, HASH_SCV  FROM :lt_scvall_hash
					) as sh
		ON mh.HASH_MATCH = sh.HASH_SCV;
*/

	lt_exisitng_records = SELECT mh.ENTITY_ID, mh.MATCH_ROW_ID, sh.SCV_ID AS SCV_ID, 'Existing' AS ACTION  FROM "osr.scv.foundation.db.data::HashResults.MatchResultsHash" as mh
		INNER JOIN (
					SELECT SCV_ID, "HASH"  FROM "osr.scv.foundation.db.data::HashResults.SCVRecordHash"
					) as sh
		ON mh."HASH" = sh."HASH";

/* OLD CODE
-- Person RMS Hash without the xdele field	
	lt_exisitng_RMSPerson_records = SELECT mh.ENTITY_ID, mh.MATCH_ROW, sh.SCV_ID AS SCV_ID, 'Existing' AS ACTION  FROM :lt_matchresults_RMSPerson_hash as mh
		INNER JOIN (
					SELECT SCV_ID, HASH_SCV  FROM :lt_scvrms_RMSPerson_hash
					) as sh
		ON mh.HASH_MATCH = sh.HASH_SCV;
*/

-- Person RMS Hash without the xdele field	
	lt_exisitng_RMSPerson_records = SELECT mh.ENTITY_ID, mh.MATCH_ROW_ID, sh.SCV_ID AS SCV_ID, 'Existing' AS ACTION  FROM "osr.scv.foundation.db.data::HashResults.MatchResultsHashRMS" as mh
		INNER JOIN (
					SELECT SCV_ID, "HASH"  FROM "osr.scv.foundation.db.data::HashResults.SCVRecordHashRMS"
					) as sh
		ON mh."HASH" = sh."HASH";

/* OLD CODE
	lt_add_new_records = SELECT mh.ENTITY_ID, mh.MATCH_ROW, 0 AS SCV_ID , 'Add' AS ACTION 
						FROM   :lt_matchresults_hash as mh
						WHERE NOT EXISTS (SELECT SCV_ID, HASH_SCV  FROM :lt_scvall_hash as sh
                						WHERE mh.HASH_MATCH = sh.HASH_SCV); 
*/                						
    lt_add_new_records = SELECT mh.ENTITY_ID, mh.MATCH_ROW_ID, 0 AS SCV_ID , 'Add' AS ACTION 
						FROM   "osr.scv.foundation.db.data::HashResults.MatchResultsHash" as mh
						WHERE NOT EXISTS (SELECT SCV_ID, "HASH"  FROM "osr.scv.foundation.db.data::HashResults.SCVRecordHash" as sh
                						WHERE mh."HASH" = sh."HASH");            						

	lt_total_records = ( SELECT MATCH_ROW_ID, SCV_ID, ACTION  FROM :lt_exisitng_records
							UNION ALL
						SELECT MATCH_ROW_ID, SCV_ID, ACTION  FROM :lt_add_new_records);
						
						
	INSERT INTO "osr.scv.foundation.db.data::MatchResults.MatchDelta" ( SELECT f.MATCH_ROW_ID, g.SCV_ID, f.ACTION, 'Add' FROM (
																		SELECT b.ENTITY_ID, MATCH_ROW_ID, SCV_ID, a.ACTION FROM :lt_total_records as a
																		INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchResults" as b
																		ON a.MATCH_ROW_ID = b."Match_ROW_ID"
																		)f
																		LEFT OUTER JOIN (
																						SELECT e.ENTITY_ID, MAX (c.SCV_ID) AS SCV_ID FROM :lt_total_records as c
																						INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchResults" as e
																						ON c.MATCH_ROW_ID = e."Match_ROW_ID"
																						GROUP BY e.ENTITY_ID
																		)g
																		ON f.ENTITY_ID = g.ENTITY_ID);
	
																		
	UPDATE "osr.scv.foundation.db.data::MatchResults.MatchDelta" a SET  a.ACTION_RMS = b.ACTION
	FROM "osr.scv.foundation.db.data::MatchResults.MatchDelta" a , :lt_exisitng_RMSPerson_records b
	WHERE a.MATCH_ROW_ID = b.MATCH_ROW_ID;																	
	
--	MERGE INTO "osr.scv.foundation.db.data::MatchResults.MatchDelta" a USING :lt_exisitng_RMSPerson_records b ON a.MATCH_ROW_ID = b.MATCH_ROW
--	WHEN MATCHED THEN UPDATE SET a.ACTION = b.ACTION;

	
	
--	UPDATE "osr.scv.foundation.db.data::MatchResults.MatchResults" SET AVERAGE_SCORE = NULL;
	

	--	SELECT * FROM :lt_scvall_hash;	
	
			--SELECT * FROM #lt_record_action2;
		--	INSERT INTO "osr.scv.foundation.db.data::MatchResults.MatchDelta" (SELECT MATCH_ROW_ID, SCV_ID, ACTION FROM #lt_record_action2);

--			o_return_code := 'Success' ;
--	  		o_message := 'Entites moved successfully';
END;