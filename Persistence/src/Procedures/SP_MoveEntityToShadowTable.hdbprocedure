/*
	Move entities from match results table to shadow table
	
		This code will move all match result entities to a match results shadow table. The entities are automatically flagged using strategy 'PROMOTE' or 'REVIEW'.
		The stragegy can be overriden using the SCV Match Results Review UI. For every entity, a changelog will be written to table osr.scv.foundation.db.data::MatchResultsReview.Assessments.
						
		SAP Australia, September 2017	
*/
PROCEDURE "osr.scv.foundation.db.Procedures::SP_MoveEntityToShadowTable" (
	
	IN i_entities		TABLE (ENTITY_ID NVARCHAR(10)),
	IN i_user			NVARCHAR(20),
	IN i_timestamp		TIMESTAMP,
	OUT o_return_code	INT, 					-- 0 = execution successful; 1 = execution raised exception.
	out o_message		NVARCHAR(200) 
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN

	DECLARE l_number_entities int default 0;
	
	-- Declare exception hander for all SQL exceptions.
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		o_message :=  'Error Code: ' || ::SQL_ERROR_CODE || ' ' || ::SQL_ERROR_MESSAGE;
		o_return_code := 1;
	END;
	
	SELECT COUNT(*) INTO l_number_entities FROM :i_entities;
	
	IF :l_number_entities > 0 THEN
		/*
		CALL "osr.scv.foundation.db.Procedures.Util::SP_UtilSplitString"(
			I_STRING => :i_entities,
			I_SEPARATOR => ';',
			OT_RESULT => :lt_entities_parsed
		);
		*/
		
		-- Promote all entities with status 'Promote' or 'Promote*'
		
		-- Move entities
		INSERT INTO "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow"
		(
			SELECT m.* FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" m
			INNER JOIN (SELECT * FROM :i_entities) r
			ON m.ENTITY_ID = r.ENTITY_ID
		);
	   
	   -- Delete from main UI review table
	   DELETE FROM "osr.scv.foundation.db.data::MatchResultsReview.Review" WHERE ENTITY_ID IN (SELECT ENTITY_ID FROM :i_entities);
	   
	   -- Update shadow table with SCV promotions
	   UPDATE "osr.scv.foundation.db.data::MatchResultsReview.ReviewShadow" a SET a.PROMOTED_TO_SCV = 'X', a.PROMOTION_TIMESTAMP = :i_timestamp, a.PROMOTED_BY = :i_user
	   FROM "osr.scv.foundation.db.data::MatchResultsReview.ReviewShadow" a, :i_entities b
	   WHERE a.ENTITY_ID = b.ENTITY_ID;
		
		-- Update statistics
		INSERT INTO  "osr.scv.foundation.db.data::MatchResultsReview.Promotions" (
																				  SELECT *, :i_timestamp, :i_user  FROM :i_entities
																				 );
		
		
	ELSE
		
		-- Promote all entities with status 'Promote' or 'Promote*'
		
		-- Move into shadow table, use same CV as in SCV Review UI to get latest strategy per entity
		lt_entities = SELECT ENTITY_ID 
					  FROM "osr.scv.foundation.db.data::MatchResultsReview.Review"
					  WHERE STRATEGY_RESOLVED LIKE 'Promote%';
		
		-- Move entities
		INSERT INTO "osr.scv.foundation.db.data::MatchResults.MatchResultsShadow"
		(
			SELECT m.* FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" m
			INNER JOIN (SELECT * FROM :lt_entities) r
			ON m.ENTITY_ID = r.ENTITY_ID
		);
			
	   
	   -- Delete from main UI review table
	   DELETE FROM "osr.scv.foundation.db.data::MatchResultsReview.Review" WHERE ENTITY_ID IN (SELECT * FROM :lt_entities);
	   
	   -- Updata shadow table with SCV promotions
	   UPDATE "osr.scv.foundation.db.data::MatchResultsReview.ReviewShadow" c SET c.PROMOTED_TO_SCV = 'X', c.PROMOTION_TIMESTAMP = :i_timestamp, c.PROMOTED_BY = :i_user
	   FROM "osr.scv.foundation.db.data::MatchResultsReview.ReviewShadow" c, :lt_entities d
	   WHERE c.ENTITY_ID = d.ENTITY_ID;
		
		-- Update statistics
		INSERT INTO  "osr.scv.foundation.db.data::MatchResultsReview.Promotions" (
																				  SELECT *, :i_timestamp, :i_user  FROM :lt_entities
																				 );
	END IF;
	o_return_code := 0;
	
END