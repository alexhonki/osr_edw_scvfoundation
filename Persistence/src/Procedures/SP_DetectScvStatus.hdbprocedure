PROCEDURE "osr.scv.foundation.db.Procedures::SP_DetectScvStatus" ( 
--	IN i_user			NVARCHAR(20),
--	IN i_timestamp		TIMESTAMP,
--	OUT o_return_code	NVARCHAR(10),
--	OUT o_message		NVARCHAR(500)
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN

	DECLARE lt_count_entity INTEGER;
	DECLARE lv_max_group_row INTEGER;
	DECLARE lv_current_entity INT DEFAULT 1;
	DECLARE lv_current_row INT DEFAULT 1;
	DECLARE lv_max_row INT;
	DECLARE l_number_entities int default 0;
	DECLARE lv_current_row_entity NVARCHAR(20);
	DECLARE lv_current_row_action NVARCHAR(20);
	DECLARE lv_current_row_system_id NVARCHAR(10);
	DECLARE lv_current_row_match_row_id INTEGER;
	DECLARE lv_current_group_row INTEGER;
	
	DECLARE lv_match_row INTEGER;
	DECLARE lv_source_system NVARCHAR(3);
	DECLARE lv_addressnum NVARCHAR(10);
	DECLARE lv_max_scv_id INTEGER;
	
	DECLARE lv_scv_id int default 0;
	DECLARE lv_scv_id_addr INTEGER;
	DECLARE lv_scv_id_tel_tmr INTEGER;
	DECLARE lv_scv_id_sms_tmr INTEGER;
	DECLARE lv_scv_id_email_tmr INTEGER;
	DECLARE lv_scv_id_tel_rms INTEGER;
	DECLARE lv_scv_id_fax_rms INTEGER;
	
	DECLARE lv_check_scv int default 0;
	DECLARE lv_check_tel_TMR int default 0;
	DECLARE lv_check_sms_TMR int default 0;
	DECLARE lv_check_email_TMR int default 0;
	DECLARE lv_check_tel_RMS int default 0;
	DECLARE lv_check_fax_RMS int default 0;

	DECLARE lv_checksum_person NVARCHAR(256);
	DECLARE lv_checksum_addr NVARCHAR(256);
	DECLARE lv_checksum_tel_TMR NVARCHAR(256);
	DECLARE lv_checksum_sms_TMR NVARCHAR(256);
	DECLARE lv_checksum_email_TMR NVARCHAR(256);
	DECLARE lv_checksum_tel_RMS NVARCHAR(256);
	DECLARE lv_checksum_fax_RMS NVARCHAR(256);
	







BEGIN	
	-- Declare exception hander for all SQL exceptions. 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
		
		DROP TABLE #lt_record_action;
--		DROP TABLE #lt_entity_list;
		
--		o_return_code :=  'ERROR';
--		o_message:=  'ERROR: ' || ::SQL_ERROR_CODE || ' ' || ::SQL_ERROR_MESSAGE;
	END;
	
	DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299
    BEGIN    
       lv_scv_id := 0;
        lv_scv_id_addr := 0;
   END;
	
	-- Temporary table to hold the SCV ID to Entity ID mapping
--	CREATE LOCAL TEMPORARY TABLE #lt_entity_list (
--            lt_entity NVARCHAR(10)
--    );
    
--    CREATE LOCAL TEMPORARY TABLE #lv_scv_id (
--            lv_scv_id NVARCHAR(10)
--    );
    
    CREATE LOCAL TEMPORARY TABLE #lt_record_action (
            SCV_ID INTEGER,
            MATCH_ROW_ID INTEGER,
            ACTION NVARCHAR(10)
    );
    
    
--    INSERT INTO #lt_entity_list (SELECT DISTINCT ENTITY_ID FROM "osr.scv.foundation.db.data::MatchResults.MatchResults");


	
	lt_entity_information =		SELECT 
		            	ROW_NUMBER() OVER (ORDER BY a.ENTITY_ID ASC) as ROW_COUNT,
		            	a.GROUP_ID,
						a.ENTITY_ID,
						COALESCE(e.CHECKSUM_PERSON_RMS, f.CHECKSUM_PERSON_TMR) AS CHECKSUM_PERSON,
						COALESCE(e1.CHECKSUM_ADDR_RMS, f.CHECKSUM_ADDR_TMR) AS CHECKSUM_ADDR,
						ROW_NUMBER() OVER (PARTITION BY GROUP_ID ORDER BY SOURCE_SYSTEM DESC, SYSTEM_ID DESC) AS GROUP_ROW_COUNT,
						CHECKSUM_TEL_RMS,
						CHECKSUM_FAX_RMS,
						--CONTACT_PHONE_NO,
						CHECKSUM_TEL_TMR,
						--SMS_CONTACT_NUMBER,
						CHECKSUM_SMS_TMR,
						--EMAIL_ADDRESS,
						CHECKSUM_EMAIL_TMR,
		            	a.SOURCE_SYSTEM,
		            	a.SYSTEM_ID,
		            	--COALESCE(e.FNAME_ORIG_BUT, f.FNAME_ORIG_TMR) AS FIRST_NAME,
		            	--COALESCE(e.MNAME_ORIG_BUT, f.MNAME_ORIG_TMR) AS MIDDLE_NAME,
		            	--COALESCE(e.LNAME_ORIG_BUT, f.LNAME_ORIG_TMR) AS LAST_NAME,
		            	--COALESCE(e.BIRTHDT_ORIG_BUT, f.BIRTHDT_ORIG_TMR) AS BIRTHDT,
		            	e1.ADDRNUMBER,
		            	--COALESCE(e1.COUNTRY_ORIG_ADRC, f.COUNTRY_ORIG_TMR) AS ADDRESS_COUNTRY,
						--COALESCE(e1.CITY_ORIG_ADRC, f.CITY_ORIG_TMR) AS ADDRESS_LOCALITY,
						--COALESCE(e1.REGION_ORIG_ADRC, f.REGION_ORIG_TMR) AS ADDRESS_REGION,
						--COALESCE(e1.POSTCODE_ORIG_ADRC, f.POSTCODE_ORIG_TMR) AS ADDRESS_POSTCODE,
		            	--COALESCE(e1.STREET_ORIG_ADRC, f.STREET_ORIG_TMR) AS ADDRESS_PRIM_NAME,
		            	--COALESCE(e1.STREET_NUMBER_ORIG_ADRC, f.STREET_NUMBER_ORIG_TMR) AS ADDRESS_PRIM_NUMBER,
		            	a."Match_ROW_ID" as MATCH_ROW 

		                FROM   "osr.scv.foundation.db.data::MatchResults.MatchResults" AS a 
		                -- Add original fields
		                --BUT000-RMS
		                LEFT OUTER JOIN ( 
		                			      SELECT BIRTHDT AS BIRTHDT_ORIG_BUT, NAME_FIRST AS FNAME_ORIG_BUT, NAMEMIDDLE AS MNAME_ORIG_BUT, NAME_LAST AS LNAME_ORIG_BUT, "Cleanse_TABLE_ID", "Cleanse_ROW_ID", "PARTNER", 
		                			      HASH_SHA256(TO_BINARY(TO_VARCHAR(NAME_FIRST)), TO_BINARY(TO_VARCHAR(NAMEMIDDLE)), TO_BINARY(TO_VARCHAR(NAME_LAST)), TO_BINARY(TO_VARCHAR(BIRTHDT)), TO_BINARY(TO_VARCHAR(DEATHDT))) as CHECKSUM_PERSON_RMS
		                			      FROM "osr.scv.foundation.db.synonyms::BUT000"
		                					
		                				) as e
		                ON a."Cleanse_ROW_ID_BUT" = e."Cleanse_ROW_ID" AND a."Cleanse_TABLE_ID_BUT" = e."Cleanse_TABLE_ID" AND a."SYSTEM_ID" = e."PARTNER" and a."SOURCE_SYSTEM" = 'RMS'
		                --ADRC-RMS
		                LEFT OUTER JOIN (
		                				 SELECT TEL_NUMBER, TEL_EXTENS, ADDRNUMBER, COUNTRY as COUNTRY_ORIG_ADRC, REGION AS REGION_ORIG_ADRC, CITY1 AS CITY_ORIG_ADRC, STREET AS STREET_ORIG_ADRC, HOUSE_NUM1 AS STREET_NUMBER_ORIG_ADRC, POST_CODE1 as POSTCODE_ORIG_ADRC, "Cleanse_TABLE_ID", "Cleanse_ROW_ID",
		                				 HASH_SHA256(TO_BINARY(TO_VARCHAR(CITY1)), TO_BINARY(TO_VARCHAR(POST_CODE1)), TO_BINARY(TO_VARCHAR(STREET)), TO_BINARY(TO_VARCHAR(HOUSE_NUM1)), TO_BINARY(TO_VARCHAR(COUNTRY)),
    									 TO_BINARY(TO_VARCHAR(REGION)), TO_BINARY(TO_VARCHAR(PERS_ADDR)), TO_BINARY(TO_VARCHAR(MC_CITY1)), TO_BINARY(TO_VARCHAR(STREET)), TO_BINARY(TO_VARCHAR(TIME_ZONE)), TO_BINARY(TO_VARCHAR(ADRC_UUID))) as CHECKSUM_ADDR_RMS
		                				 FROM "osr.scv.foundation.db.synonyms::ADRC"
		                				) as e1
		                ON a."Cleanse_TABLE_ID_ADRC" = e1."Cleanse_TABLE_ID" AND a."Cleanse_ROW_ID_ADRC" = e1."Cleanse_ROW_ID" AND a."SOURCE_SYSTEM" = 'RMS'
		                --Phone number-RMS
		                LEFT OUTER JOIN(
		                				SELECT TEL_NUMBER, TEL_EXTENS, "Cleanse_TABLE_ID", "Cleanse_ROW_ID",
		                				HASH_SHA256(TO_BINARY(TO_VARCHAR(TEL_NUMBER)), TO_BINARY(TO_VARCHAR(TEL_EXTENS))) as CHECKSUM_TEL_RMS
		                				FROM "osr.scv.foundation.db.synonyms::ADRC"
		                				WHERE ( LENGTH(TEL_NUMBER) > 0)
		                				) e2
		                ON a."Cleanse_TABLE_ID_ADRC" = e2."Cleanse_TABLE_ID" AND a."Cleanse_ROW_ID_ADRC" = e2."Cleanse_ROW_ID" AND a."SOURCE_SYSTEM" = 'RMS'
		                --Fax number-RMS
		                LEFT OUTER JOIN(
		                				SELECT FAX_NUMBER, FAX_EXTENS, "Cleanse_TABLE_ID", "Cleanse_ROW_ID",
		                				HASH_SHA256(TO_BINARY(TO_VARCHAR(FAX_NUMBER)), TO_BINARY(TO_VARCHAR(FAX_EXTENS))) as CHECKSUM_FAX_RMS
		                				FROM "osr.scv.foundation.db.synonyms::ADRC"
		                				WHERE ( LENGTH(FAX_NUMBER) > 0)
		                				) e3
		                ON a."Cleanse_TABLE_ID_ADRC" = e3."Cleanse_TABLE_ID" AND a."Cleanse_ROW_ID_ADRC" = e3."Cleanse_ROW_ID" AND a."SOURCE_SYSTEM" = 'RMS'
		                
		                --Name and Address-TMR
		                LEFT OUTER JOIN ( 
		                			      SELECT DATE_OF_BIRTH AS BIRTHDT_ORIG_TMR, FIRST_NAME AS FNAME_ORIG_TMR, MIDDLE_NAME AS MNAME_ORIG_TMR, FAMILY_ORG_NAME AS LNAME_ORIG_TMR, COUNTRY as COUNTRY_ORIG_TMR, STATE AS REGION_ORIG_TMR, SUBURB AS CITY_ORIG_TMR, STREET_NAME AS STREET_ORIG_TMR, STREET_NO AS STREET_NUMBER_ORIG_TMR, POSTCODE as POSTCODE_ORIG_TMR, "Cleanse_TABLE_ID", "Z_RUN_SEQ_ID", "CUSTOMER_REF",
		                			      HASH_SHA256(TO_BINARY(TO_VARCHAR(FIRST_NAME)), TO_BINARY(TO_VARCHAR(MIDDLE_NAME)), TO_BINARY(TO_VARCHAR(FAMILY_ORG_NAME)), TO_BINARY(TO_VARCHAR(DATE_OF_BIRTH)), TO_BINARY(TO_VARCHAR(''))) as CHECKSUM_PERSON_TMR,
		                			      HASH_SHA256(TO_BINARY(TO_VARCHAR(FLOOR)), TO_BINARY(TO_VARCHAR(UNIT)), TO_BINARY(TO_VARCHAR(BUILDING_NAME)), TO_BINARY(TO_VARCHAR(STREET_NO)), TO_BINARY(TO_VARCHAR(STREET_NAME)),
    									  TO_BINARY(TO_VARCHAR(STREET_TYPE)), TO_BINARY(TO_VARCHAR(STREET_SUFFIX)), TO_BINARY(TO_VARCHAR(SUBURB)), TO_BINARY(TO_VARCHAR(POSTCODE)), TO_BINARY(TO_VARCHAR(STATE)), TO_BINARY(TO_VARCHAR(COUNTRY))) as CHECKSUM_ADDR_TMR
		                			      FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
		                				) as f
		                ON a."Cleanse_ROW_ID_TMR" = f."Z_RUN_SEQ_ID" AND a."Cleanse_TABLE_ID_TMR" = f."Cleanse_TABLE_ID" AND a."SYSTEM_ID" = f."CUSTOMER_REF" AND a."SOURCE_SYSTEM" = 'TMR'			
		                --Phone number-TMR
		                LEFT OUTER JOIN(
		                				SELECT CONTACT_PHONE_EFFECT_DT,CONTACT_PHONE_NO,"Z_RUN_SEQ_ID","Cleanse_TABLE_ID","CUSTOMER_REF",
		                				HASH_SHA256(TO_BINARY(TO_VARCHAR(CONTACT_PHONE_EFFECT_DT)), TO_BINARY(TO_VARCHAR(CONTACT_PHONE_NO))) as CHECKSUM_TEL_TMR
		                				FROM "osr.scv.foundation.db.synonyms::TMR_CustMain"
		                				) as f1
		                ON a."Cleanse_ROW_ID_TMR" = f1."Z_RUN_SEQ_ID" AND a."Cleanse_TABLE_ID_TMR" = f1."Cleanse_TABLE_ID" AND a."SYSTEM_ID" = f1."CUSTOMER_REF" AND a."SOURCE_SYSTEM" = 'TMR'	
		                --SMS number-TMR
		                LEFT OUTER JOIN(
		                				SELECT LAST_UPDATED,SMS_CONTACT_NUMBER,CUSTOMER_REF,
		                				HASH_SHA256(TO_BINARY(TO_VARCHAR(LAST_UPDATED)), TO_BINARY(TO_VARCHAR(SMS_CONTACT_NUMBER))) as CHECKSUM_SMS_TMR
										FROM "osr.scv.foundation.db.synonyms::TMR_CustContact" 
										WHERE SMS_CONTACT_NUMBER <> ''
										) as f2
		                ON a."SYSTEM_ID" = f2."CUSTOMER_REF" AND  a.SOURCE_SYSTEM = 'TMR'
		                --Email address-TMR
		                LEFT OUTER JOIN(
		                				SELECT LAST_UPDATED,EMAIL_ADDRESS,CUSTOMER_REF,
		                				HASH_SHA256(TO_BINARY(TO_VARCHAR(LAST_UPDATED)), TO_BINARY(TO_VARCHAR(EMAIL_ADDRESS))) as CHECKSUM_EMAIL_TMR
		                				FROM "osr.scv.foundation.db.synonyms::TMR_CustContact" 
										WHERE EMAIL_ADDRESS <> ''
		                		   )f3
		                ON a."SYSTEM_ID" = f3."CUSTOMER_REF" AND a.SOURCE_SYSTEM = 'TMR'
		                
		                ORDER  BY ROW_COUNT ASC
		                		  --SOURCE_SYSTEM ASC, 
		                          --SYSTEM_ID DESC,
		                          --MATCH_ROW ASC
					    ;
	
	--lt_row_count = SELECT ROW_NUMBER() OVER (ORDER BY ENTITY_ID ASC) as ROW_COUNT, ENTITY_ID, "Match_ROW_ID" 
	--FROM :lt_entity_information;	
	
	--SELECT MAX(ROW_COUNT) INTO lv_max_row FROM :lt_entity_information;
	
	--lt_count_entity = SELECT COUNT(DISTINCT ENTITY_ID) FROM :lt_entity_information;
	
	-- OLD SELECT COUNT(DISTINCT ENTITY_ID) INTO lt_count_entity FROM :lt_entity_information;
	
	SELECT MAX (ROW_COUNT) INTO lt_count_entity FROM :lt_entity_information;
	
	
	WHILE :lv_current_entity <= :lt_count_entity DO
			
			SELECT ENTITY_ID			INTO lv_current_row_entity		FROM :lt_entity_information WHERE ROW_COUNT = :lv_current_entity;
			SELECT MAX(GROUP_ROW_COUNT)	INTO lv_max_group_row			FROM :lt_entity_information WHERE ENTITY_ID = :lv_current_row_entity;
			
			lv_checksum_person = NULL;
			lv_checksum_addr = NULL;

			
			lv_current_group_row = 1;
			lv_current_row = 1;
			lv_scv_id = 0;
			WHILE :lv_current_group_row <= :lv_max_group_row DO

				SELECT CHECKSUM_PERSON		INTO lv_checksum_person		FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
				SELECT CHECKSUM_ADDR		INTO lv_checksum_addr		FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
				SELECT SOURCE_SYSTEM		INTO lv_source_system		FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
				SELECT ADDRNUMBER			INTO lv_addressnum			FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
				SELECT MAX(SCV_ID)			INTO lv_max_scv_id			FROM "osr.scv.foundation.db.data::SCVFoundation.Master";
				--Check if checksum is not null for Contact Details.
				--TMR to check for blank telephone, SMS and email values
				SELECT COUNT(*)				INTO lv_check_tel_TMR		FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row AND CHECKSUM_TEL_TMR IS NOT NULL;
				SELECT COUNT(*)				INTO lv_check_sms_TMR		FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row AND CHECKSUM_SMS_TMR IS NOT NULL;
				SELECT COUNT(*)				INTO lv_check_email_TMR		FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row AND CHECKSUM_EMAIL_TMR IS NOT NULL;
				IF (:lv_check_tel_TMR = 0)
				THEN
					lv_checksum_tel_TMR = 'NoValue';
				ELSE 
					SELECT CHECKSUM_TEL_TMR		INTO lv_checksum_tel_TMR	FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
				END IF;
				
				IF (:lv_check_sms_TMR = 0)
				THEN
					lv_checksum_sms_TMR = 'NoValue';
				ELSE 
					SELECT CHECKSUM_SMS_TMR		INTO lv_checksum_sms_TMR		FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
				END IF;
				
				IF (:lv_check_email_TMR = 0)
				THEN
					lv_checksum_email_TMR = 'NoValue';
				ELSE 
					SELECT CHECKSUM_EMAIL_TMR	INTO lv_checksum_email_TMR		FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
				END IF;
				
				
				--RMS to check for blank telephone and fax vaules
				SELECT COUNT(*)				INTO lv_check_tel_RMS		FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row AND CHECKSUM_TEL_RMS IS NOT NULL;
				SELECT COUNT(*)				INTO lv_check_fax_RMS		FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row AND CHECKSUM_FAX_RMS IS NOT NULL;
				
				IF (:lv_check_tel_RMS = 0)
				THEN
					lv_checksum_tel_RMS = 'NoValue';
				ELSE 
					SELECT CHECKSUM_TEL_RMS		INTO lv_checksum_tel_RMS	FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
				END IF;
				
				IF(lv_check_fax_RMS = 0)
				THEN
					lv_checksum_fax_RMS = 'NoValue';
				ELSE
					SELECT CHECKSUM_FAX_RMS		INTO lv_checksum_fax_RMS	FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
				END IF;
				
				--Start Delta detection
				
				IF (lv_source_system = 'RMS')
				THEN
					-- Check if the person's name exists in the SCV RMS
					SELECT COUNT(*)				INTO lv_check_scv				FROM "osr.scv.foundation.db.data::SCVFoundation.PersonRms" WHERE CHECKSUM = :lv_checksum_person;
					IF  (:lv_check_scv != 0)
					THEN
						SELECT SCV_ID				INTO lv_scv_id				FROM "osr.scv.foundation.db.data::SCVFoundation.PersonRms" WHERE CHECKSUM = :lv_checksum_person;
						--Check if the person's address exists in the SCV based on the known SCV_ID
						SELECT COUNT(*)			INTO lv_scv_id_addr			FROM "osr.scv.foundation.db.data::SCVFoundation.AddressRms" WHERE SCV_ID = :lv_scv_id AND ADDRNUMBER = :lv_addressnum AND CHECKSUM = :lv_checksum_addr;
						IF (:lv_scv_id_addr != 0)
						THEN
-------						-- Check for existing Telephone and Fax by comparing with the SCV
							SELECT COUNT(*)			INTO lv_scv_id_tel_rms			FROM "osr.scv.foundation.db.data::SCVFoundation.ContactNumber" WHERE SCV_ID = :lv_scv_id AND SOURCE = 'RMS' AND NUMBER_TYPE = 'PHO' AND CHECKSUM = :lv_checksum_tel_RMS;
							SELECT COUNT(*)			INTO lv_scv_id_fax_rms			FROM "osr.scv.foundation.db.data::SCVFoundation.ContactNumber" WHERE SCV_ID = :lv_scv_id AND SOURCE = 'RMS' AND NUMBER_TYPE = 'FAX' AND CHECKSUM = :lv_checksum_fax_RMS;
							
							IF (
								:lv_check_tel_RMS != 0 AND :lv_check_fax_RMS != 0 AND :lv_scv_id_tel_rms != 0 AND :lv_scv_id_fax_rms != 0
								OR
								:lv_check_tel_RMS != 0 AND :lv_check_fax_RMS = 0 AND :lv_scv_id_tel_rms != 0 
								OR
								:lv_check_tel_RMS = 0 AND :lv_check_fax_RMS != 0 AND :lv_scv_id_fax_rms != 0
								OR
								:lv_check_tel_RMS = 0 AND :lv_check_fax_RMS = 0 
								)
							THEN
								--If the person's name, address and contact exist in the SCV, classify this records as existing
								SELECT MATCH_ROW			INTO lv_match_row			FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
								INSERT INTO #lt_record_action VALUES ( :lv_scv_id,:lv_match_row ,'Existing');
							ELSE
								--If the person's name and address exist BUT contact is missing then classify this record as add with the same SCV_ID
								SELECT MATCH_ROW			INTO lv_match_row			FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
								INSERT INTO #lt_record_action VALUES ( :lv_scv_id,:lv_match_row ,'Add');
							END IF;
						ELSE
							--If the person's name exists and their address does not then classify this record as add with the same SCV_ID
							SELECT MATCH_ROW			INTO lv_match_row			FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
							INSERT INTO #lt_record_action VALUES ( :lv_scv_id,:lv_match_row ,'Add');
						END IF;
					-- Person's name does not exist in the SCV RMS
					ELSE
						IF (:lv_scv_id > 0)
						-- THEN add this record to the existing SCV_ID group
						THEN
							SELECT MATCH_ROW			INTO lv_match_row			FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
							INSERT INTO #lt_record_action VALUES ( :lv_scv_id,:lv_match_row ,'Add');	
						--ELSE Create a new SCV_ID as this is a new record
						ELSE
							SELECT MATCH_ROW			INTO lv_match_row			FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
							--lv_scv_id =  :lv_max_scv_id +1;
							lv_scv_id = 0;
							INSERT INTO #lt_record_action VALUES ( :lv_scv_id,:lv_match_row ,'Add');
						END IF;
					END IF;
				--Record is from TMR
				ELSE
				-- Check if the person's name exists in the SCV TMR
					SELECT COUNT(*)				INTO lv_check_scv				FROM "osr.scv.foundation.db.data::SCVFoundation.PersonTmr" WHERE CHECKSUM = :lv_checksum_person;
					IF  (:lv_check_scv != 0)
					THEN
						SELECT SCV_ID				INTO lv_scv_id				FROM "osr.scv.foundation.db.data::SCVFoundation.PersonTmr" WHERE CHECKSUM = :lv_checksum_person;
						--Check if the person's address exists in the SCV based on the known SCV_ID
						SELECT COUNT(*)			INTO lv_scv_id_addr			FROM "osr.scv.foundation.db.data::SCVFoundation.AddressTmr" WHERE SCV_ID = :lv_scv_id AND CHECKSUM = :lv_checksum_addr;
						IF (lv_scv_id_addr != 0)
						THEN
-------------			-- Check for existing Telephone, SMS and Email by comparing with the SCV
							SELECT COUNT(*)			INTO lv_scv_id_tel_tmr			FROM "osr.scv.foundation.db.data::SCVFoundation.ContactNumber" WHERE SCV_ID = :lv_scv_id AND SOURCE = 'TMR' AND CHECKSUM = :lv_checksum_tel_TMR;
							SELECT COUNT(*)			INTO lv_scv_id_sms_tmr			FROM "osr.scv.foundation.db.data::SCVFoundation.ContactNumber" WHERE SCV_ID = :lv_scv_id AND SOURCE = 'TMR'  AND CHECKSUM = :lv_checksum_sms_TMR;
							SELECT COUNT(*)			INTO lv_scv_id_email_tmr		FROM "osr.scv.foundation.db.data::SCVFoundation.ContactEmail" WHERE SCV_ID = :lv_scv_id AND SOURCE = 'TMR'  AND CHECKSUM = :lv_checksum_email_TMR ;
							
							IF (
								:lv_check_tel_TMR != 0 AND :lv_check_sms_TMR != 0 AND  :lv_check_email_TMR != 0 AND :lv_scv_id_tel_tmr != 0 AND :lv_scv_id_sms_tmr != 0 AND :lv_scv_id_email_tmr != 0
								OR
								:lv_check_tel_TMR != 0 AND :lv_check_sms_TMR != 0 AND  :lv_check_email_TMR = 0  AND :lv_scv_id_tel_tmr != 0 AND :lv_scv_id_sms_tmr != 0
								OR
								:lv_check_tel_TMR != 0 AND :lv_check_sms_TMR = 0  AND  :lv_check_email_TMR = 0  AND :lv_scv_id_tel_tmr != 0 
								OR
								:lv_check_tel_TMR != 0 AND :lv_check_sms_TMR = 0  AND  :lv_check_email_TMR != 0 AND :lv_scv_id_tel_tmr != 0 AND :lv_scv_id_email_tmr != 0
								OR
								:lv_check_tel_TMR = 0  AND :lv_check_sms_TMR != 0 AND :lv_check_email_TMR = 0   AND :lv_scv_id_sms_tmr != 0 
								OR
								:lv_check_tel_TMR = 0  AND :lv_check_sms_TMR != 0 AND :lv_check_email_TMR != 0  AND :lv_scv_id_sms_tmr != 0 AND :lv_scv_id_email_tmr != 0
								OR
								:lv_check_tel_TMR = 0  AND :lv_check_sms_TMR = 0 AND :lv_check_email_TMR != 0  AND :lv_scv_id_email_tmr != 0
								OR
								:lv_check_tel_TMR = 0 AND :lv_check_sms_TMR = 0 AND  :lv_check_email_TMR = 0 )
							THEN
								--If the person's name, address and contact exist in the SCV, classify this records as existing
								SELECT MATCH_ROW			INTO lv_match_row			FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
								INSERT INTO #lt_record_action VALUES ( :lv_scv_id,:lv_match_row ,'Existing');
							ELSE
								--If the person's name and address exist BUT contact is missing then classify this record as add with the same SCV_ID
								SELECT MATCH_ROW			INTO lv_match_row			FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
								INSERT INTO #lt_record_action VALUES ( :lv_scv_id,:lv_match_row ,'Add');
							END IF;
						ELSE
							--If the person's name exists and their address does not then classify this record as add with the same SCV_ID
							SELECT MATCH_ROW			INTO lv_match_row			FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
							INSERT INTO #lt_record_action VALUES ( :lv_scv_id,:lv_match_row ,'Add');
						END IF;
					-- The person's name does not exist in RMS or TMR
					ELSE
						--Check if an SCV_ID has been found:  SCV_ID = 0 then No SCV --- found SCV_ID >= 1 use current SCV_ID
						IF (:lv_scv_id > 0)
						-- THEN add this record to the existing SCV_ID group
						THEN
							SELECT MATCH_ROW			INTO lv_match_row			FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
							INSERT INTO #lt_record_action VALUES ( :lv_scv_id,:lv_match_row ,'Add');	
						--ELSE Create a new SCV_ID as this is a new record
						ELSE
							SELECT MATCH_ROW			INTO lv_match_row			FROM :lt_entity_information WHERE ENTITY_ID = lv_current_row_entity AND GROUP_ROW_COUNT = :lv_current_row;
							--lv_scv_id =  :lv_max_scv_id +1;
							lv_scv_id =  0;
							INSERT INTO #lt_record_action VALUES ( :lv_scv_id,:lv_match_row ,'Add');
						END IF;
					END IF;
				END IF;
			lv_current_group_row := :lv_current_group_row + 1;	
			lv_current_row := :lv_current_row + 1;
			END WHILE;
			lv_current_entity := :lv_current_entity + lv_max_group_row;
	END WHILE;		
			--SELECT * FROM #lt_record_action;
			INSERT INTO "osr.scv.foundation.db.data::MatchResults.MatchDelta" (SELECT MATCH_ROW_ID, SCV_ID, ACTION FROM #lt_record_action);
			DROP TABLE #lt_record_action;
--			o_return_code := 'SUCCESS';
--    		o_message := 'Entites moved successfully';
END;
END