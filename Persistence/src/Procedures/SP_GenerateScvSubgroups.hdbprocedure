PROCEDURE "osr.scv.foundation.db.Procedures::SP_GenerateScvSubgroups" (
	OUT o_return_code		NVARCHAR(128), 			-- 0 = execution successful; 1 = execution raised exception.
	OUT o_message			NVARCHAR(1000) 			-- message
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   AS
BEGIN
	/*************************************
	Generate SCV subgroups
	
	Create subgroups for all match rows within a match group.
		Assign initial system ID to match row									-> set a (all records)
		Override RMS match rows which refer to a TMR record (RMS-TMR)			-> set b (rms records and matched tmr records)
		Override TMR match rows which refer to a RMS record (TMR-RMS)			-> set c (tmr records and matched rms records)
		
   *************************************/
   	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		
		DROP TABLE #lt_sub_groups;
	
		o_return_code :=  'ERROR';
		o_message:=  'ERROR: ' || ::SQL_ERROR_CODE || ' ' || ::SQL_ERROR_MESSAGE;
	END;
	
	-- Temporary table
	CREATE LOCAL TEMPORARY TABLE #lt_sub_groups_mapping (MATCH_ROW INTEGER, SYSTEM_ID NVARCHAR(10), RELATED_ROW INTEGER, RELATED_SYSTEM_ID NVARCHAR(10), MATCH_POLICY NVARCHAR(256), SCORE DOUBLE, GROUP_TAG NVARCHAR(20));      
	CREATE LOCAL TEMPORARY TABLE #lt_sub_groups (MATCH_ROW INTEGER, GROUP_TAG NVARCHAR(20));      
	TRUNCATE TABLE "osr.scv.foundation.db.data::MatchResults.SubGroups";
	
	-- Initial assignment
	lt_set_a = SELECT "Match_ROW_ID", SYSTEM_ID FROM "osr.scv.foundation.db.data::MatchResults.MatchResults";
	INSERT INTO #lt_sub_groups (SELECT "Match_ROW_ID", SYSTEM_ID FROM :lt_set_a);
	
	-- RMS to TMR matches
	lt_set_b = 
		SELECT "Match_ROW_ID" as MATCH_ROW, SYSTEM_ID AS GROUP_TAG, RELATED_ROW_ID, SCORE FROM (
			SELECT *,
				   -- Add row number, sort by score 
				   ROW_NUMBER() OVER (PARTITION BY RELATED_ROW_ID ORDER BY SCORE DESC) AS GROUP_ROW_COUNT
			FROM (
					SELECT * FROM (
									SELECT DISTINCT mr.GROUP_ID, mr."Match_ROW_ID", mr.SOURCE_SYSTEM, mr.SYSTEM_ID 
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" mr
									WHERE SOURCE_SYSTEM = 'RMS'
					) a
					-- Add tracing information
					INNER JOIN (SELECT DISTINCT mt.ROW_ID, mt.RELATED_ROW_ID, mt.SCORE from "osr.scv.foundation.db.data::MatchResults.MatchResults" mr
									 INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchTracing" mt
									 ON mr."Match_ROW_ID" = mt.RELATED_ROW_ID
									 WHERE mr.SOURCE_SYSTEM = 'TMR') b
					ON a."Match_ROW_ID" = b.ROW_ID
				  )
		) WHERE GROUP_ROW_COUNT = 1 			-- Only 1 row per related row match
			AND RELATED_ROW_ID IS NOT NULL		-- Rows with null reference are being added in the initial step
			--AND GROUP_ID = 1899805
		;
	
	lt_tmr_updates_for_set_b = 
		SELECT * FROM 
		(
			SELECT DISTINCT MATCH_ROW, GROUP_TAG 
        	FROM :lt_set_b 
        	WHERE RELATED_ROW_ID IS NOT NULL
			UNION ALL 
			-- Union TMR records found using system ID from match source (RMS)
			SELECT RELATED_ROW_ID AS MATCH_ROW, GROUP_TAG 
			FROM (									
				SELECT *, ROW_NUMBER() OVER (PARTITION BY RELATED_ROW_ID ORDER BY SCORE DESC) AS GROUP_ROW_COUNT 
				FROM (
				    	SELECT * FROM :lt_set_b
			         )
			) WHERE GROUP_ROW_COUNT = 1
				AND RELATED_ROW_ID NOT IN (SELECT MATCH_ROW FROM :lt_set_b)
		)
		;
	
	-- Update main group table
	UPDATE #lt_sub_groups sg SET sg.MATCH_ROW = d.MATCH_ROW, sg.GROUP_TAG = d.GROUP_TAG
	FROM #lt_sub_groups sg, :lt_tmr_updates_for_set_b d
	WHERE sg.MATCH_ROW = d.MATCH_ROW;

	-- TMR to RMS matches
	lt_set_c = 
		SELECT "ROW_ID" as MATCH_ROW, SYSTEM_ID AS GROUP_TAG, RELATED_ROW_ID, SCORE FROM (
			SELECT *,
				   -- Add row number, sort by score 
				   ROW_NUMBER() OVER (PARTITION BY RELATED_ROW_ID ORDER BY SCORE DESC) AS GROUP_ROW_COUNT
			FROM (
					SELECT a.GROUP_ID, b.* FROM (
									SELECT DISTINCT mr.GROUP_ID, mr."Match_ROW_ID", mr.SOURCE_SYSTEM, mr.SYSTEM_ID 
									FROM "osr.scv.foundation.db.data::MatchResults.MatchResults" mr
									WHERE SOURCE_SYSTEM = 'TMR'
					) a
					-- Add tracing information
					INNER JOIN (SELECT DISTINCT mt.ROW_ID, mt.RELATED_ROW_ID, mr.SYSTEM_ID, mt.POLICY_NAME, mt.SCORE from "osr.scv.foundation.db.data::MatchResults.MatchResults" mr
									 INNER JOIN "osr.scv.foundation.db.data::MatchResults.MatchTracing" mt
									 ON mr."Match_ROW_ID" = mt.RELATED_ROW_ID
									 WHERE mr.SOURCE_SYSTEM = 'RMS') b
					ON a."Match_ROW_ID" = b.ROW_ID
				  )
		) WHERE GROUP_ROW_COUNT = 1 			-- Only 1 row per related row match
			AND RELATED_ROW_ID IS NOT NULL		-- Rows with null reference are being added in the initial step
		    --AND GROUP_ID = 1899805
		;
	
	lt_tmr_updates_for_set_c = 
		SELECT * FROM 
		(
			SELECT DISTINCT MATCH_ROW, GROUP_TAG 
        	FROM :lt_set_c 
        	WHERE RELATED_ROW_ID IS NOT NULL
			UNION ALL 
			-- Union TMR records found using system ID from match source (RMS)
			SELECT RELATED_ROW_ID AS MATCH_ROW, GROUP_TAG 
			FROM (									
				SELECT *, ROW_NUMBER() OVER (PARTITION BY RELATED_ROW_ID ORDER BY SCORE DESC) AS GROUP_ROW_COUNT 
				FROM (
				    	SELECT * FROM :lt_set_c
			         )
			) WHERE GROUP_ROW_COUNT = 1
				AND RELATED_ROW_ID NOT IN (SELECT MATCH_ROW FROM :lt_set_c)
		)
		;
	
	-- Update main group table
	UPDATE #lt_sub_groups sg SET sg.MATCH_ROW = d.MATCH_ROW, sg.GROUP_TAG = d.GROUP_TAG
	FROM #lt_sub_groups sg, :lt_tmr_updates_for_set_c d
	WHERE sg.MATCH_ROW = d.MATCH_ROW;
	
	-- Write to table
	INSERT INTO "osr.scv.foundation.db.data::MatchResults.SubGroups" (SELECT * FROM #lt_sub_groups);
	
	-- Set return code
	o_return_code :=  'SUCCESS';
	o_message:=  'SCV groups created successfully';
	
	-- ### Clean-up ##############################################################################################################
	DROP TABLE #lt_sub_groups_mapping;
	DROP TABLE #lt_sub_groups;
   
END